{"version":3,"file":"Fetch-4ce8326c.js","sources":["../../src/utils/getTypeof.ts","../../src/utils/isValidVin.ts","../../src/utils/makeQueryString.ts","../../src/api/Fetch.ts"],"sourcesContent":["/**\r\n * @module utils/getTypeof\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\r\n *\r\n * @param {any} value - Any kind of value (string, object, array, function, etc).\r\n *\r\n * @returns {string} - Type of value, normalized to a lowercase string.\r\n */\r\nexport function getTypeof(value: any): string {\r\n  const toString: string = Object.prototype.toString\r\n    .call(value)\r\n    .toLowerCase(); /* ex: => '[object string]' or '[object array], etc. */\r\n  return toString.slice(8, toString.length - 1);\r\n}\r\n","/**\r\n * @module utils/isValidVin\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\r\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\r\n *\r\n * @param {string} vin - Vehicle Identification Number.\r\n *\r\n * @returns {Promise<boolean>} True for a valid VIN, false for an invalid VIN.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const isValid = await NHTSA.isValidVin('3VWD07AJ5EM388202').catch(error => error)\r\n * console.log(isValid) // true\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\r\n * const isValid = await isValidVin('3VWD07AJ5EM388202').catch(error => error)\r\n * console.log(isValid) // true\r\n *\r\n */\r\nexport async function isValidVin(vin: string): Promise<boolean> {\r\n  /* A valid VIN must be a string and is always exactly 17 digits */\r\n  if (typeof vin !== 'string' || vin.length != 17) {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  /* Normalize the vin to all uppercase letters */\r\n  vin = vin.toUpperCase();\r\n\r\n  /* split the vin digits into an array */\r\n  const vinArray: string[] = vin.split('');\r\n\r\n  /* checkDigit will be tested against the checkSum later */\r\n  const checkDigit: string = vinArray[8];\r\n\r\n  /*\r\n   * In a valid VIN, the checkDigit can either be:\r\n   * a number, 0-9 inclusive OR the character 'X'\r\n   */\r\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  /*\r\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\r\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\r\n   * to be converted as such.\r\n   */\r\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit);\r\n\r\n  /*\r\n   * There will need to be some way to translate vin digits that are alphabetic\r\n   * into their number value in the VIN algorithm transliteration table.\r\n   * Later, during the creation of the checkusm variable, those digits will be\r\n   * multiplied against their corresponding weight (by index) in the weightsArray.\r\n   * This transliteration table is a key part of the VIN validation algorithm.\r\n   */\r\n  const transliterationTable: object = {\r\n    A: 1,\r\n    B: 2,\r\n    C: 3,\r\n    D: 4,\r\n    E: 5,\r\n    F: 6,\r\n    G: 7,\r\n    H: 8,\r\n    J: 1,\r\n    K: 2,\r\n    L: 3,\r\n    M: 4,\r\n    N: 5,\r\n    P: 7,\r\n    R: 9,\r\n    S: 2,\r\n    T: 3,\r\n    U: 4,\r\n    V: 5,\r\n    W: 6,\r\n    X: 7,\r\n    Y: 8,\r\n    Z: 9\r\n  };\r\n\r\n  /*\r\n   * Later, during the creation of the 'checksum' variable, these weights will be\r\n   * multilplied by the value of their mirrored index vin digits.\r\n   * The array index of each weight corresponds to the same index of each\r\n   * digit in the 'vin'.\r\n   */\r\n  const weightsArray: number[] = [\r\n    8,\r\n    7,\r\n    6,\r\n    5,\r\n    4,\r\n    3,\r\n    2,\r\n    10,\r\n    0,\r\n    9,\r\n    8,\r\n    7,\r\n    6,\r\n    5,\r\n    4,\r\n    3,\r\n    2\r\n  ];\r\n\r\n  /*\r\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\r\n   * into numbers, using the above transliteration table.\r\n   * Then these numbers are multiplied against their corresponding weight\r\n   * in the weights array, matched by index position.\r\n   * All 17 of those digitValues are then added together and divided by 11.\r\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\r\n   */\r\n  const checksum: number =\r\n    vinArray\r\n      .map((digit: string, index: number) => {\r\n        let digitValue: number;\r\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\r\n        isNaN(parseInt(digit))\r\n          ? (digitValue = transliterationTable[digit])\r\n          : (digitValue = parseInt(digit));\r\n\r\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\r\n        const weight: number = weightsArray[index];\r\n\r\n        /* The final step for each digit is to multiply it by it's corresponding weight */\r\n        return digitValue * weight;\r\n      })\r\n      /* Then get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\r\n      .reduce((acc, currValue) => acc + currValue, 0) % 11;\r\n\r\n  /*\r\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\r\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\r\n   * we return true, otherwise the VIN is invalid and we return false.\r\n   */\r\n  return Promise.resolve(checksum === checkValue);\r\n}\r\n","import { getTypeof } from './getTypeof';\r\n\r\n/**\r\n * @module utils/makeQueryString\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Utility method to generate a query string compatible with the NHSTA API, for use in an API URL string.\r\n *\r\n * @async\r\n *\r\n * @param {object} params - Object of Type [QueryStringParameters](module-utils_makeQueryString.html#.QueryStringParameters).\r\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\r\n * - Given params of `{ paramName: \"\" }` , setting this to true will use 'paramName=' in the final query string.\r\n * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\r\n *\r\n * @returns {Promise<string>|Error} A query string of search parameters for use in a final Fetch.get URL.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const qs = await NHTSA.makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { makeQueryString } from '@shaggytools/nhtsa-api-wrapper'\r\n * const qs = await makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>Single Param:</caption>\r\n * const qs = await makeQueryString({\r\n *   modelYear: 2019\r\n * }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2019\"\r\n *\r\n * @example <caption>Multiple Params:</caption>\r\n * const qs = await makeQueryString({\r\n *   whatever: 'some value',\r\n *   modelYear: 2006,\r\n *   page: \"2\"\r\n * }).catch(error => error)\r\n *\r\n * console.log(qs) // \"?whatever=some%20value&modelYear=2006&page=2\"\r\n *\r\n * @example <caption>Empty Params Object:</caption>\r\n * const qs = await makeQueryString({}).catch(error => error)\r\n *\r\n * console.log(qs) // \"\"\r\n *\r\n * @example <caption>Using allowEmptyStringValues option:</caption>\r\n * const qs = await makeQueryString({\r\n *   year: 2016,\r\n *   vehicleType: '',\r\n *   make: 'Audi'\r\n * }, true).catch(error => error)\r\n *\r\n * console.log(qs) // \"?year=2016&vehicleType=&make=Audi\"\r\n *\r\n */\r\nexport function makeQueryString(\r\n  params: QueryStringParameters = {},\r\n  allowEmptyStringValues = false\r\n): Promise<string | Error> {\r\n  /* Beginning of error message string */\r\n  const errorBase =\r\n    'queryString(params) - expected params in the form of an object, got:';\r\n\r\n  /* Runtime type guard params argument, must be of type object */\r\n  if (getTypeof(params) !== 'object') {\r\n    return Promise.reject(new Error(`${errorBase} ${params}`));\r\n  }\r\n\r\n  /* Setup QueryString for Array mapping */\r\n  const entries = Object.entries(params);\r\n  const paramsLength = entries.length;\r\n\r\n  /* Return an empty string if params are an empty object */\r\n  if (paramsLength < 1) return Promise.resolve('');\r\n\r\n  /* Used to check if we've already prepended a valid query param */\r\n  let isPrepended = false;\r\n\r\n  /* Map [key]:value entries to \"key=value\" strings in an array */\r\n  const queryStringArray = entries.map(([key, value], index) => {\r\n    let prepend = '';\r\n    let append = '';\r\n\r\n    const typeofValue = getTypeof(value);\r\n\r\n    /* Convert any number values to a string */\r\n    if (value && typeofValue === 'number') {\r\n      value = value.toString();\r\n    }\r\n\r\n    /* Skip any invalid values, only string and number value types are valid */\r\n    if (\r\n      (value || allowEmptyStringValues) &&\r\n      (typeofValue === 'string' || typeofValue === 'number')\r\n    ) {\r\n      /* if this is the first param we need to prepend the '?' char */\r\n      if (!isPrepended) {\r\n        prepend = '?';\r\n        isPrepended = true;\r\n      }\r\n      /* if there is another param coming after this one we need to append the '&' char */\r\n      if (index < paramsLength - 1) {\r\n        append = '&';\r\n      }\r\n\r\n      /* Add the completed partial query string to queryStringArray */\r\n      return `${prepend}${key}=${value}${append}`;\r\n    }\r\n    return;\r\n  });\r\n\r\n  /* Join and return the completed query string after URI encoding */\r\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\r\n}\r\n\r\n/**\r\n * Object containing Key:Value pairs to build the URL query string with.\r\n * - Parameter values may be either strings or numbers.\r\n *\r\n * @memberof module:utils/makeQueryString\r\n * @alias QueryStringParameters\r\n * @example\r\n * {\r\n * modelYear: 2009,\r\n * whatever: 'something'\r\n * }\r\n *\r\n */\r\nexport type QueryStringParameters = {\r\n  [propName: string]: string | number | undefined;\r\n};\r\n","/**\r\n * @module api/Fetch\r\n * @category API\r\n * @description API Fetch Logic.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [Fetch](module-api_Fetch.Fetch.html)\r\n * > - Constant: [BASE_URL](#~BASE_URL)\r\n * > - Constant: [DEFAULT_CONFIG](#~DEFAULT_CONFIG)\r\n * >\r\n * > **Types**\r\n * > - Type: [ApiResponse](#ApiResponse)\r\n * > - Type: [FetchConfig](#FetchConfig)\r\n * > - Type: [FetchRequestOptions](#FetchRequestOptions)\r\n * > - Type: [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body)\r\n * > - Type: [FetchResponse](#FetchResponse)\r\n * > - Type: [NhtsaResponse](#NhtsaResponse)\r\n */\r\n\r\n/* Module Dependencies */\r\nimport fetch from 'cross-fetch';\r\n/* Utilities */\r\nimport { getTypeof, makeQueryString } from '../utils';\r\n/* Types */\r\nimport { QueryStringParameters } from '../utils/types';\r\n\r\n/*****************\r\n * CONSTANTS\r\n ****************/\r\n\r\n/**\r\n * @constant {string} BASE_URL Default Fetch base URL string\r\n * @default 'https://vpic.nhtsa.dot.gov/api/vehicles'\r\n */\r\nexport const BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles';\r\n\r\n/**\r\n * @constant {module:api/Fetch.FetchConfig} DEFAULT_CONFIG Default Fetch configuration options\r\n * @property {string} apiResponseFormat=json\r\n * @property {string} baseUrl=BASE_URL Default: [BASE_URL](module-api_Fetch.html#~BASE_URL)\r\n * @property {FetchRequestOptions} options={method:\"GET\"}\r\n */\r\nexport const DEFAULT_CONFIG: FetchConfig = {\r\n  apiResponseFormat: 'json',\r\n  baseUrl: BASE_URL,\r\n  options: {}\r\n};\r\n\r\n/*****************\r\n * Fetch Class\r\n ****************/\r\n\r\n/**\r\n * Class wrapper containing API wrapper HTTP Fetch logic.\r\n *\r\n * > **Static Methods**:\r\n * > - [buildQueryString](#buildQueryString)\r\n * > - [get](#get)\r\n *\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n * @category API\r\n */\r\nexport class Fetch {\r\n  apiResponseFormat: string;\r\n  baseUrl?: string;\r\n  options?: FetchRequestOptions;\r\n\r\n  constructor(userConfig?: FetchConfig) {\r\n    let finalConfig: FetchConfig;\r\n\r\n    /* userConfig takes precedence over DEFAULT_CONFIG */\r\n    if (userConfig && getTypeof(userConfig) === 'object') {\r\n      finalConfig = {\r\n        ...DEFAULT_CONFIG,\r\n        ...userConfig,\r\n        options: { ...DEFAULT_CONFIG.options, ...userConfig.options }\r\n      };\r\n    } else {\r\n      finalConfig = { ...DEFAULT_CONFIG };\r\n    }\r\n\r\n    /** @private */\r\n    this.apiResponseFormat = 'json';\r\n    /** @private */\r\n    this.baseUrl = finalConfig.baseUrl;\r\n    /** @private */\r\n    this.options = finalConfig.options;\r\n  }\r\n\r\n  /**\r\n   * Builds a query string from QueryStringParameters.\r\n   *\r\n   * @param {QueryStringParameters} params - Object containing Key:Value pairs to build the URL query string with.\r\n   * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\r\n   * - Given params of `{paramName: \"\"}` , setting this to true will use 'paramName=' in the final query string.\r\n   * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\r\n   * @returns {(Promise<string | Error>)} A formatted NHSTA.dot.gov Vehicles API query string.\r\n   */\r\n  async buildQueryString(\r\n    params?: QueryStringParameters,\r\n    allowEmptyStringValues = false\r\n  ): Promise<string | Error> {\r\n    /*\r\n     * Make sure we're always using 'format=json' in the url Query parameters\r\n     * If the user provides a 'format' key in the params, during class instantiation we want to override it to 'json'\r\n     * This package may provide support for the other formats (CSV and XML) if requested.\r\n     */\r\n    if (!params || getTypeof(params) !== 'object') {\r\n      params = {\r\n        format: this.apiResponseFormat\r\n      };\r\n    } else {\r\n      params = { ...params, format: this.apiResponseFormat };\r\n    }\r\n\r\n    /* Return the completed query string */\r\n    return await makeQueryString(params, allowEmptyStringValues);\r\n  }\r\n\r\n  /**\r\n   * Uses the `cross-fetch` npm package to send HTTP requests and retrieve data from an API.\r\n   * - In browser environments, [whatwg-fetch](https://github.com/github/fetch/) window.fetch is used.\r\n   * - In node environments, [node-fetch](https://github.com/bitinn/node-fetch/) NPM package is used.\r\n   *\r\n   * @param {string} url - URL to fetch data from.\r\n   * @param {FetchRequestOptions} [options] - [Fetch options](https://github.github.io/fetch/#options).\r\n   * @returns {(Promise<module:api/Fetch.ApiResponse | Error>)} Response from the API.\r\n   */\r\n  async get(\r\n    url: string,\r\n    options: FetchRequestOptions = {}\r\n  ): Promise<ApiResponse | Error> {\r\n    /* Runtime typechecking */\r\n    const typeofUrl = getTypeof(url);\r\n    if (typeofUrl !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `Fetch.get(url) - url argument must be of type string, got: ${typeofUrl}`\r\n        )\r\n      );\r\n    }\r\n    const typeofOptions = getTypeof(options);\r\n    if (typeofOptions !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `Fetch.get(url, options) - options argument must be of type object, got: ${typeofOptions}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Combine user provided 'options' and class property 'this.options', user options overwrite class options */\r\n    const combinedOptions = { ...this.options, ...options };\r\n\r\n    /* Use the cross-fetch package to perform an HTTP request */\r\n    const response: Response = await fetch(url, combinedOptions)\r\n      .then(result => {\r\n        if (!result?.status || result.status >= 400) {\r\n          throw new Error(\r\n            `Bad response from server, code: ${result?.status}, text: ${result?.statusText}, headers: ${result?.headers}`\r\n          );\r\n        } else return result;\r\n      })\r\n      .catch(err =>\r\n        Promise.reject(new Error(`Fetch.get() http error: ${err}`))\r\n      );\r\n\r\n    /* Convert the NHTSA API data to JSON */\r\n    const NhtsaResponse: NhtsaResponse = await response\r\n      .json()\r\n      .then((json: NhtsaResponse): NhtsaResponse => json);\r\n\r\n    /* Add the fetch response information to the returned NHSTA API data */\r\n    const finalResult: ApiResponse = {\r\n      ...NhtsaResponse,\r\n      FetchResponse: {\r\n        headers: response.headers,\r\n        ok: response.ok,\r\n        redirected: response.redirected,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        url: response.url\r\n      }\r\n    };\r\n\r\n    /* Return the completed ApiResponse */\r\n    return Promise.resolve(finalResult);\r\n  }\r\n}\r\n\r\n/*****************\r\n * Types\r\n ****************/\r\n\r\n/**\r\n * Various fetch request body types.\r\n *\r\n * @typedef FetchRequestBodyTypes\r\n * @type {URLSearchParams | FormData | Blob | ArrayBuffer | DataView}\r\n *\r\n * @memberof module:api/Fetch\r\n */\r\nexport type FetchRequestBodyTypes =\r\n  | URLSearchParams\r\n  | FormData\r\n  | Blob\r\n  | ArrayBuffer\r\n  | DataView;\r\n\r\n/**\r\n * Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchRequestOptions\r\n */\r\nexport type FetchRequestOptions = {\r\n  /**HTTP request method - Default: \"GET\". */\r\n  method?: string;\r\n  /** HTTP request body - [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body). */\r\n  body?: string | FetchRequestBodyTypes;\r\n  /** [Object, Headers](https://github.github.io/fetch/#Headers) - Default: {}. */\r\n  headers?: {} | Headers;\r\n  /**\r\n   * Default: \"omit\" - Authentication credentials mode.\r\n   * - \"omit\" - don't include authentication credentials (e.g. Cookies) in the request.\r\n   * - \"same-origin\" - include credentials in requests to the same site\r\n   * - \"include\" - include credentials in requests to all sites.\r\n   */\r\n  credentials?: 'omit' | 'same-origin' | 'include';\r\n};\r\n\r\n/**\r\n * Used when instantiating a Fetch class or related subclass.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchConfig\r\n */\r\nexport type FetchConfig = {\r\n  /** Requested response format from the NHSTA API (hardcoded to 'json' for now). */\r\n  apiResponseFormat?: string;\r\n  /** Base of the URL to build fetch URLs from. */\r\n  baseUrl?: string;\r\n  /** Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}. */\r\n  options?: FetchRequestOptions;\r\n};\r\n\r\n/**\r\n * [Fetch API Response](https://github.github.io/fetch/#Response) properties.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchResponse\r\n */\r\nexport type FetchResponse = {\r\n  /** The [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object associated with the response. */\r\n  headers: Headers;\r\n  /** A boolean indicating whether the response was successful (status in the range 200–299) or not. */\r\n  ok: boolean;\r\n  /** Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry). */\r\n  redirected: boolean;\r\n  /** The status code of the response. (This will be 200 for a success). */\r\n  status: number;\r\n  /** The status message corresponding to the status code. (e.g., OK for 200). */\r\n  statusText: string;\r\n  /** The URL of the response. */\r\n  url: string;\r\n};\r\n\r\n/**\r\n * Response data returned from the NHSTA API.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias NhtsaResponse\r\n */\r\nexport type NhtsaResponse = {\r\n  /** The number of items returned in the Results object. */\r\n  Count: number;\r\n  /** A message describing the Results. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\r\n  Results: Array<any>;\r\n};\r\n\r\n/**\r\n * Complete response returned by {@link module:api/Fetch.Fetch#get}.\r\n *\r\n * @see {@link module:api/Fetch.NhtsaResponse}\r\n * @see {@link module:api/Fetch.FetchResponse}\r\n * @memberof module:api/Fetch\r\n * @alias ApiResponse\r\n */\r\nexport type ApiResponse = {\r\n  /** The number of items returned in the Results object. */\r\n  Count: number;\r\n  /** A message describing the Results. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\r\n  Results: Array<any>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) Properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":[],"mappings":"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"}