{"version":3,"file":"isValidType.js","sources":["../../src/utils/isValidType.ts"],"sourcesContent":["/**\r\n * @memberof module:isValidType\r\n * @category Utils\r\n *\r\n * @description Options argument object provided to utils/isValidType()\r\n *\r\n * ```javascript\r\n *  {\r\n *    type: <string>,\r\n *    value: <any>\r\n *  }\r\n * ```\r\n */\r\ninterface IsValidTypeOptions {\r\n  type: string;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * @module isValidType\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * @async\r\n * @description Validate types and existence of various input values.<br>\r\n * Note: Uses `Object.prototype.toString.call(value)` under the hood\r\n *\r\n * ---\r\n *\r\n * Returns `true` if:\r\n *   - type of value is equal to provided type\r\n *\r\n * ---\r\n *\r\n * Returns `false` if:\r\n *   - 'options.value is not of type options.type\r\n *   - 'options.type' is missing from options object\r\n *   - 'options.type' is not of type 'string'\r\n *   - 'options.value' is falsey or not provided\r\n *\r\n * @param {object} options Object of Type [IsValidTypeOptions](module-isValidType.IsValidTypeOptions.html)\r\n * @param {string} options.type What type are you expecting the value to be?\r\n * @param {any} options.value What value are we testing against?\r\n * @returns {Promise<Boolean>}\r\n *\r\n * @example <caption>Verify type string</caption>\r\n * const isValid = await isValidType({\r\n *   type: 'string',\r\n *   value: 'this is a string'\r\n * }).catch(error => error)\r\n * //  isValid = \"true\"\r\n *\r\n * @example <caption>Verify type object</caption>\r\n * const isValid = await isValidType({\r\n *   type: 'object',\r\n *   value: { someKey: 'some value' }\r\n * }).catch(error => error)\r\n * //  isValid = \"true\"\r\n *\r\n * @example <caption>Returns false if type is not valid</caption>\r\n * const isValid = await isValidType({\r\n *   type: 'array',\r\n *   value: 'this is not an array'\r\n * }).catch(error => error)\r\n * //  isValid = \"false\"\r\n */\r\n\r\nexport async function isValidType(opts: IsValidTypeOptions): Promise<boolean> {\r\n  // Gatekeeping\r\n  if (typeof opts?.type !== 'string' || !opts.value) {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  // normalize type\r\n  const type_ = opts.type.toLowerCase();\r\n\r\n  const expected = `[object ${type_}]`;\r\n  const actual = Object.prototype.toString.call(opts.value).toLowerCase();\r\n\r\n  return Promise.resolve(expected === actual);\r\n}\r\n"],"names":["isValidType","opts","type","value","type_","toLowerCase","expected","actual","Object","prototype","toString","call","Promise","resolve"],"mappings":"4DAoEsBA,EAAYC,sFAEhC,MAA0B,2BAAfA,wBAAMC,OAAsBD,EAAKE,OAKtCC,EAAQH,EAAKC,KAAKG,cAElBC,EAAW,WAAWF,MACtBG,EAASC,OAAOC,UAAUC,SAASC,KAAKV,EAAKE,OAAOE,iBAEnDO,QAAQC,QAAQP,IAAaC,QAT3BK,QAAQC,SAAQ"}