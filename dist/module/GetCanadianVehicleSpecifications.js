import{_ as e}from"./isValidVin-a63c6e15.js";import{F as r,g as t}from"./Fetch-3b3744ac.js";class i extends r{constructor(e){super(e)}GetCanadianVehicleSpecifications(r){return e(this,void 0,void 0,(function*(){const e="GetCanadianVehicleSpecifications",i=t(r);if("object"!==i)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${i}> ${r}`));const n=t(r.year);if("number"!==n)return Promise.reject(new Error(`${e}, "params.year" argument is required and must be of type number, got: `+`<${n}> ${r.year}`));const s=t(r.make);if(r.make&&"string"!==s)return Promise.reject(new Error(`${e}, "params.make" argument must be of type string, got: `+`<${s}> ${r.make}`));const o=t(r.model);if(r.model&&"string"!==o)return Promise.reject(new Error(`${e}, "params.model" argument must be of type string, got: `+`<${o}> ${r.model}`));const a=t(r.units);if(r.units&&"string"!==a)return Promise.reject(new Error(`${e}, "params.units" argument must be of type string, got: `+`<${a}> ${r.units}`));const m=r.make||"",c=r.model||"",u=r.units||"",g={year:r.year,make:m,model:c,units:u},$=yield this.buildQueryString(g,!0).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),d=`${this.baseUrl}/${e}${$}`;return yield this.get(d).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}export{i as GetCanadianVehicleSpecifications};
//# sourceMappingURL=GetCanadianVehicleSpecifications.js.map
