!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("isomorphic-unfetch")):"function"==typeof define&&define.amd?define(["exports","isomorphic-unfetch"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).NHTSA={})}(this,(function(e){"use strict";var r=Object.freeze({__proto__:null});function t(e,r,t,o){return new(t||(t=Promise))((function(n,s){function i(e){try{u(o.next(e))}catch(e){s(e)}}function c(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var r;e.done?n(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(i,c)}u((o=o.apply(e,r||[])).next())}))}function o(e){const r=Object.prototype.toString.call(e).toLowerCase();return r.slice(8,r.length-1)}const n={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9},s=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2];function i(e){if("string"!=typeof e||17!=e.length)return!1;const r=(e=e.toUpperCase()).split(""),t=r[8];if(isNaN(parseInt(t))&&"X"!==t)return!1;const o="X"===t?10:parseInt(t);return r.map(((e,r)=>{let t;t=isNaN(parseInt(e))?n[e]:parseInt(e);return t*s[r]})).reduce(((e,r)=>e+r),0)%11===o}const c={apiResponseFormat:"json",baseUrl:"https://vpic.nhtsa.dot.gov/api/vehicles",options:{}};class u{constructor(e){let r;r=e&&"object"===o(e)?Object.assign(Object.assign(Object.assign({},c),e),{options:Object.assign(Object.assign({},c.options),e.options)}):Object.assign({},c),this.apiResponseFormat="json",this.baseUrl=r.baseUrl,this.options=r.options}buildQueryString(e,r=!1){return t(this,void 0,void 0,(function*(){return e=e&&"object"===o(e)?Object.assign(Object.assign({},e),{format:this.apiResponseFormat}):{format:this.apiResponseFormat},yield function(e={},r=!1){if("object"!==o(e))return Promise.reject(new Error(`queryString(params) - expected params in the form of an object, got: ${e}`));const t=Object.entries(e),n=t.length;if(n<1)return Promise.resolve("");let s=!1;const i=t.map((([e,t],i)=>{let c="",u="";const a=o(t);if(t&&"number"===a&&(t=t.toString()),(t||r)&&("string"===a||"number"===a))return s||(c="?",s=!0),i<n-1&&(u="&"),`${c}${e}=${t}${u}`}));return Promise.resolve(encodeURI(i.join("")))}(e,r)}))}get(e,r={}){return t(this,void 0,void 0,(function*(){const t=o(e);if("string"!==t)return Promise.reject(new Error(`Fetch.get(url) - url argument must be of type string, got: ${t}`));const n=o(r);if("object"!==n)return Promise.reject(new Error(`Fetch.get(url, options) - options argument must be of type object, got: ${n}`));const s=Object.assign(Object.assign({},this.options),r),i=yield fetch(e,s).then((e=>{if(!(null==e?void 0:e.status)||e.status>=400)throw new Error(`Bad response from server, code: ${null==e?void 0:e.status}, text: ${null==e?void 0:e.statusText}, headers: ${null==e?void 0:e.headers}`);return e})).catch((e=>Promise.reject(new Error(`Fetch.get() http error: ${e}`)))),c=yield i.json().then((e=>e)),u=Object.assign(Object.assign({},c),{FetchResponse:{headers:i.headers,ok:i.ok,redirected:i.redirected,status:i.status,statusText:i.statusText,url:i.url}});return Promise.resolve(u)}))}}class a extends u{constructor(e){super(e)}DecodeVin(e,r){return t(this,void 0,void 0,(function*(){const t=o(r);if(r&&"object"!==t)return Promise.reject(new Error(`DecodeVin, "params" argument must be of type object, got: <${t}> ${r}`));const n=o(e);if("string"!==n)return Promise.reject(new Error(`DecodeVin, "vin" argument is required and must be of type string, got: <${n}> ${e}`));const s=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==s)return Promise.reject(new Error(`DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${r.modelYear}`));const i=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`)))),c=`${this.baseUrl}/DecodeVin/${e}${i}`;return yield this.get(c).then((e=>e)).catch((e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`))))}))}}class d extends u{constructor(e){super(e)}DecodeVinExtended(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinExtended",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==i)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`))))}))}}class l extends u{constructor(e){super(e)}DecodeVinValues(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinValues",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"string"!==i&&"number"!==i)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`))))}))}}class m extends u{constructor(e){super(e)}DecodeVINValuesBatch(e){return t(this,void 0,void 0,(function*(){const r="DecodeVINValuesBatch",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "inputString" argument is required and must be of type string, got: <${t}> ${e}`));const n=`${this.baseUrl}/${r}/`,s=encodeURI(`DATA=${e}&format=json`);return yield this.get(n,{method:"POST",headers:{"content-type":"application/x-www-form-urlencoded"},body:s}).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class $ extends u{constructor(e){super(e)}DecodeVinValuesExtended(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinValuesExtended",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==i)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`))))}))}}class g extends u{constructor(e){super(e)}DecodeWMI(e){return t(this,void 0,void 0,(function*(){const r=o(e);if("string"!==r)return Promise.reject(new Error(`DecodeWMI, "WMI" argument is required and must be of type string, got: <${r}> ${e}`));const t=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`DecodeWMI, Error building query string: ${e}`)))),n=`${this.baseUrl}/DecodeWMI/${e}${t}`;return yield this.get(n).then((e=>e)).catch((e=>Promise.reject(new Error(`DecodeWMI, Fetch.get() error: ${e}`))))}))}}class h extends u{constructor(e){super(e)}GetAllMakes(){return t(this,void 0,void 0,(function*(){const e="GetAllMakes",r=yield this.buildQueryString().catch((r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`)))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then((e=>e)).catch((r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`))))}))}}class p extends u{constructor(e){super(e)}GetAllManufacturers(e={}){return t(this,void 0,void 0,(function*(){const r="GetAllManufacturers",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.manufacturerType);if(e.manufacturerType&&"string"!==n)return Promise.reject(new Error(`${r}, "params.manufacturerType" argument must be of type string, got: <${n}> ${e.manufacturerType}`));const s=o(e.page);if(e.page&&"number"!==s)return Promise.reject(new Error(`${r}, "params.page" argument must be of type number, got: <${s}> ${e.page}`));const i=yield this.buildQueryString(e).catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),c=`${this.baseUrl}/${r}${i}`;return yield this.get(c).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class y extends u{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return t(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: <${n}> ${e.year}`));const s=o(e.make);if(e.make&&"string"!==s)return Promise.reject(new Error(`${r}, "params.make" argument must be of type string, got: <${s}> ${e.make}`));const i=o(e.model);if(e.model&&"string"!==i)return Promise.reject(new Error(`${r}, "params.model" argument must be of type string, got: <${i}> ${e.model}`));const c=o(e.units);if(e.units&&"string"!==c)return Promise.reject(new Error(`${r}, "params.units" argument must be of type string, got: <${c}> ${e.units}`));const u=e.make||"",a=e.model||"",d=e.units||"",l={year:e.year,make:u,model:a,units:d},m=yield this.buildQueryString(l,!0).catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),$=`${this.baseUrl}/${r}${m}`;return yield this.get($).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class b extends u{constructor(e){super(e)}GetEquipmentPlantCodes(e){return t(this,void 0,void 0,(function*(){const r="GetEquipmentPlantCodes",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: <${n}> ${e.year}`));const s=o(e.equipmentType);if("number"!==s)return Promise.reject(new Error(`${r}, "params.equipmentType" argument is required and must be of type number, got: <${s}> ${e.equipmentType}`));const i=o(e.reportType);if("string"!==i)return Promise.reject(new Error(`${r}, "params.reportType" argument is required and must be of type string, got: <${i}> ${e.reportType}`));const c=yield this.buildQueryString(e).catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${r}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class f extends u{constructor(e){super(e)}GetMakeForManufacturer(e){return t(this,void 0,void 0,(function*(){const r="GetMakeForManufacturer",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class j extends u{constructor(e){super(e)}GetMakesForManufacturerAndYear(e,r){return t(this,void 0,void 0,(function*(){const t="GetMakesForManufacturerAndYear",n=o(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`${t}, "manufacturer" argument is required and must be of type string or number, got: <${n}> ${e}`));const s=o(r);if("object"!==s)return Promise.reject(new Error(`${t}, "params" argument is required and must be of type object, got: <${s}> ${r}`));const i=o(r.year);if("number"!==i)return Promise.reject(new Error(`${t}, "params.year" argument is required and must be of type number, got: <${i}> ${r.year}`));const c=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`))))}))}}class E extends u{constructor(e){super(e)}GetMakesForVehicleType(e){return t(this,void 0,void 0,(function*(){const r="GetMakesForVehicleType",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "typeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class P extends u{constructor(e){super(e)}GetManufacturerDetails(e){return t(this,void 0,void 0,(function*(){const r="GetManufacturerDetails",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class w extends u{constructor(e){super(e)}GetModelsForMake(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class M extends u{constructor(e){super(e)}GetModelsForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: <${t}> ${e}`));const n=yield this.buildQueryString({}).catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class v extends u{constructor(e){super(e)}GetModelsForMakeIdYear(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeIdYear",t=null==e?void 0:e.makeId,n=null==e?void 0:e.modelYear,s=null==e?void 0:e.vehicleType,i=o(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${i}> ${e}`));const c=o(t);if("number"!==c)return Promise.reject(new Error(`${r}, "params.makeId" argument is required and must be of type number, got: <${c}> ${t}`));if(!n&&!s)return Promise.reject(new Error(`${r}, either one of "params.modelYear" or "params.vehicleType" is required, got: ${n} | ${s}`));const u=o(n);if(n&&"number"!==u)return Promise.reject(new Error(`${r}, "params.modelYear" must be of type number, got: <${u}> ${n}`));const a=o(s);if(s&&"string"!==a)return Promise.reject(new Error(`${r}, "params.vehicleType" must be of type string, got: <${a}> ${s}`));let d=`${r}/makeId/${t}/`;d+=n&&s?`modelYear/${n}/vehicleType/${s}`:n?`modelYear/${n}`:`vehicleType/${s}`;const l=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),m=`${this.baseUrl}/${d}${l}`;return yield this.get(m).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class G extends u{constructor(e){super(e)}GetModelsForMakeYear(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeYear",t=null==e?void 0:e.make,n=null==e?void 0:e.modelYear,s=null==e?void 0:e.vehicleType,i=o(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${i}> ${e}`));const c=o(t);if("string"!==c)return Promise.reject(new Error(`${r}, "params.make" argument is required and must be of type string, got: <${c}> ${t}`));if(!n&&!s)return Promise.reject(new Error(`${r}, either one of "params.modelYear" or "params.vehicleType" is required, got: ${n} | ${s}`));const u=o(n);if(n&&"number"!==u)return Promise.reject(new Error(`${r}, "params.modelYear" must be of type number, got: <${u}> ${n}`));const a=o(s);if(s&&"string"!==a)return Promise.reject(new Error(`${r}, "params.vehicleType" must be of type string, got: <${a}> ${s}`));let d=`${r}/make/${e.make}/`;d+=n&&s?`modelYear/${n}/vehicleType/${s}`:n?`modelYear/${n}`:`vehicleType/${s}`;const l=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),m=`${this.baseUrl}/${d}${l}`;return yield this.get(m).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class V extends u{constructor(e){super(e)}GetParts(e){return t(this,void 0,void 0,(function*(){const r=null==e?void 0:e.type,t=null==e?void 0:e.fromDate,n=null==e?void 0:e.toDate,s=null==e?void 0:e.page,i=o(e);if(e&&"object"!==i)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${i}> ${e}`));const c=o(r);if(r&&"number"!==c)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${c}> ${r}`));const u=o(t);if(t&&"string"!==u)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${u}> ${t}`));const a=o(n);if(n&&"string"!==a)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${a}> ${n}`));const d=o(s);if(s&&"number"!==d)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${d}> ${s}`));const l=yield this.buildQueryString(e).catch((e=>Promise.reject(new Error(`GetParts, Error building query string: ${e}`)))),m=`${this.baseUrl}/GetParts${l}`;return yield this.get(m).then((e=>e)).catch((e=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${e}`))))}))}}class F extends u{constructor(e){super(e)}GetVehicleTypesForMake(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class k extends u{constructor(e){super(e)}GetVehicleTypesForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class q extends u{constructor(e){super(e)}GetVehicleVariableList(){return t(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch((r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`)))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then((e=>e)).catch((r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`))))}))}}class T extends u{constructor(e){super(e)}GetVehicleVariableValuesList(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleVariableValuesList",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "variableValue" argument is required and must be of type string or number, got: <${t}> ${e}`));"string"===t&&(e=encodeURI(e));const n=yield this.buildQueryString().catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}class D extends u{constructor(e){super(e)}GetWMIsForManufacturer(e,r){return t(this,void 0,void 0,(function*(){const t="GetWMIsForManufacturer",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s&&"number"!==s)return Promise.reject(new Error(`${t}, "manufacturer" argument is required and must be of type string or number, got: <${s}> ${e}`));const i=o(null==r?void 0:r.vehicleType);if((null==r?void 0:r.vehicleType)&&"string"!==i&&"number"!==i)return Promise.reject(new Error(`${t}, "vehicleType" argument must be of type string or number, got: <${i}> ${r.vehicleType}`));const c=yield this.buildQueryString(r).catch((e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`)))),u=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(u).then((e=>e)).catch((e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`))))}))}}class x extends u{constructor(e){super(e),this.DecodeVin=a.prototype.DecodeVin,this.DecodeVinExtended=d.prototype.DecodeVinExtended,this.DecodeVinValues=l.prototype.DecodeVinValues,this.DecodeVINValuesBatch=m.prototype.DecodeVINValuesBatch,this.DecodeVinValuesExtended=$.prototype.DecodeVinValuesExtended,this.DecodeWMI=g.prototype.DecodeWMI,this.GetAllMakes=h.prototype.GetAllMakes,this.GetAllManufacturers=p.prototype.GetAllManufacturers,this.GetCanadianVehicleSpecifications=y.prototype.GetCanadianVehicleSpecifications,this.GetEquipmentPlantCodes=b.prototype.GetEquipmentPlantCodes,this.GetMakeForManufacturer=f.prototype.GetMakeForManufacturer,this.GetMakesForManufacturerAndYear=j.prototype.GetMakesForManufacturerAndYear,this.GetMakesForVehicleType=E.prototype.GetMakesForVehicleType,this.GetManufacturerDetails=P.prototype.GetManufacturerDetails,this.GetModelsForMake=w.prototype.GetModelsForMake,this.GetModelsForMakeId=M.prototype.GetModelsForMakeId,this.GetModelsForMakeIdYear=v.prototype.GetModelsForMakeIdYear,this.GetModelsForMakeYear=G.prototype.GetModelsForMakeYear,this.GetParts=V.prototype.GetParts,this.GetVehicleTypesForMake=F.prototype.GetVehicleTypesForMake,this.GetVehicleTypesForMakeId=k.prototype.GetVehicleTypesForMakeId,this.GetVehicleVariableList=q.prototype.GetVehicleVariableList,this.GetVehicleVariableValuesList=T.prototype.GetVehicleVariableValuesList,this.GetWMIsForManufacturer=D.prototype.GetWMIsForManufacturer,this.isValidVin=i}}const I=new x;e.ActionTypes=r,e.Client=I,e.DecodeVINValuesBatch=m,e.DecodeVin=a,e.DecodeVinExtended=d,e.DecodeVinValues=l,e.DecodeVinValuesExtended=$,e.DecodeWMI=g,e.Fetch=u,e.GetAllMakes=h,e.GetAllManufacturers=p,e.GetCanadianVehicleSpecifications=y,e.GetEquipmentPlantCodes=b,e.GetMakeForManufacturer=f,e.GetMakesForManufacturerAndYear=j,e.GetMakesForVehicleType=E,e.GetManufacturerDetails=P,e.GetModelsForMake=w,e.GetModelsForMakeId=M,e.GetModelsForMakeIdYear=v,e.GetModelsForMakeYear=G,e.GetParts=V,e.GetVehicleTypesForMake=F,e.GetVehicleTypesForMakeId=k,e.GetVehicleVariableList=q,e.GetVehicleVariableValuesList=T,e.GetWMIsForManufacturer=D,e.NHTSA=x,e.isValidVin=i}));
//# sourceMappingURL=bundle.min.js.map
