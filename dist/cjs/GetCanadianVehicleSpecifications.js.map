{"version":3,"file":"GetCanadianVehicleSpecifications.js","sources":["../../src/api/actions/GetCanadianVehicleSpecifications.ts"],"sourcesContent":["/**\n * @module api/actions/GetCanadianVehicleSpecifications\n * @category Actions\n * @description GetCanadianVehicleSpecifications NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetCanadianVehicleSpecifications](module-api_actions_GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications.html)\n * >\n * > **Types**\n * > - Type: [GetCanadianVehicleSpecificationsResponse](#GetCanadianVehicleSpecificationsResponse)\n * > - Type: [GetCanadianVehicleSpecificationsResults](#GetCanadianVehicleSpecificationsResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetCanadianVehicleSpecifications extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\n   * used primarily in collision investigation and reconstruction, combined with a search engine.\n   *\n   * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\n   * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\n   * page for more details.\n   *\n   * This API action will return a 404 html error if any of the query parameters in params\n   * are missing from the query string. This is the only API action with this behaviour. Therefore,\n   * parameters are inserted into the query string as empty strings if not provided by the user.\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle (required) - Number, >= 1971.\n   * @param {string} [params.make] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\n   * @param {string} [params.model] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\n   * @param {string} [params.units] - \"Metric\" (default), or \"US\" for United States customary units.\n   * @returns {(Promise<GetCanadianVehicleSpecificationsResponse>)} Api Response object.\n   */\n  async GetCanadianVehicleSpecifications(params: {\n    year: number;\n    make?: string;\n    model?: string;\n    units?: string;\n  }): Promise<GetCanadianVehicleSpecificationsResponse> {\n    const action = 'GetCanadianVehicleSpecifications';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    const typeofMake = getTypeof(params.make);\n    if (params.make && typeofMake !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.make\" argument must be of type string, got: ` +\n            `<${typeofMake}> ${params.make}`\n        )\n      );\n    }\n\n    const typeofModel = getTypeof(params.model);\n    if (params.model && typeofModel !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.model\" argument must be of type string, got: ` +\n            `<${typeofModel}> ${params.model}`\n        )\n      );\n    }\n\n    const typeofUnits = getTypeof(params.units);\n    if (params.units && typeofUnits !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.units\" argument must be of type string, got: ` +\n            `<${typeofUnits}> ${params.units}`\n        )\n      );\n    }\n\n    /* Set default query parameters to empty strings if not provided by the user */\n    const make = params.make || '';\n    const model = params.model || '';\n    const units = params.units || '';\n\n    const params_ = {\n      year: params.year,\n      make,\n      model,\n      units,\n    };\n\n    /*\n     * Build the 'default' query string to be appended to the URL.\n     *\n     * Additionally, sets the allowEmptyStringValues option (2nd argument) to true because\n     * this API action will return a 404 error if any of the query parameters are missing from the query string.\n     * This is the only API action with this behaviour (\"year\" is the only param the user must provide).\n     */\n    const queryString = await this.buildQueryString(params_, true).catch(\n      (err: Error) =>\n        Promise.reject(\n          new Error(`${action}, Error building query string: ${err}`)\n        )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetCanadianVehicleSpecificationsResponse}.Results' array.\n *\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\n * @alias GetCanadianVehicleSpecificationsResults\n */\nexport type GetCanadianVehicleSpecificationsResults = {\n  Specs: Array<{\n    Name: string;\n    Value: string;\n  }>;\n};\n\n/**\n * Type representing the complete response returned by the GetCanadianVehicleSpecifications API Action.\n *\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\n * @alias GetCanadianVehicleSpecificationsResponse\n */\nexport type GetCanadianVehicleSpecificationsResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetCanadianVehicleSpecificationsResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["Fetch","getTypeof"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAwBA;;;;;;;;MAQa,gCAAiC,SAAQA,WAAK;IACzD,YAAY,UAAwB;QAClC,KAAK,CAAC,UAAU,CAAC,CAAC;KACnB;;;;;;;;;;;;;;;;;;;;;IAsBK,gCAAgC,CAAC,MAKtC;;YACC,MAAM,MAAM,GAAG,kCAAkC,CAAC;;YAGlD,MAAM,YAAY,GAAGC,eAAS,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,YAAY,KAAK,QAAQ,EAAE;gBAC7B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,mDAAmD;oBAC1D,IAAI,YAAY,KAAK,MAAM,EAAE,CAChC,CACF,CAAC;aACH;YAED,MAAM,UAAU,GAAGA,eAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,UAAU,KAAK,QAAQ,EAAE;gBAC3B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,wEAAwE;oBAC/E,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE,CACnC,CACF,CAAC;aACH;YAED,MAAM,UAAU,GAAGA,eAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,MAAM,CAAC,IAAI,IAAI,UAAU,KAAK,QAAQ,EAAE;gBAC1C,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,wDAAwD;oBAC/D,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE,CACnC,CACF,CAAC;aACH;YAED,MAAM,WAAW,GAAGA,eAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,MAAM,CAAC,KAAK,IAAI,WAAW,KAAK,QAAQ,EAAE;gBAC5C,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,yDAAyD;oBAChE,IAAI,WAAW,KAAK,MAAM,CAAC,KAAK,EAAE,CACrC,CACF,CAAC;aACH;YAED,MAAM,WAAW,GAAGA,eAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,MAAM,CAAC,KAAK,IAAI,WAAW,KAAK,QAAQ,EAAE;gBAC5C,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,yDAAyD;oBAChE,IAAI,WAAW,KAAK,MAAM,CAAC,KAAK,EAAE,CACrC,CACF,CAAC;aACH;;YAGD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;YACjC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;YAEjC,MAAM,OAAO,GAAG;gBACd,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,IAAI;gBACJ,KAAK;gBACL,KAAK;aACN,CAAC;;;;;;;;YASF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAClE,CAAC,GAAU,KACT,OAAO,CAAC,MAAM,CACZ,IAAI,KAAK,CAAC,GAAG,MAAM,kCAAkC,GAAG,EAAE,CAAC,CAC5D,CACJ,CAAC;;YAGF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,GAAG,WAAW,EAAE,CAAC;;YAGtD,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;iBACvB,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC;iBAC5B,KAAK,CAAC,CAAC,GAAU,KAChB,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,MAAM,wBAAwB,GAAG,EAAE,CAAC,CAAC,CAClE,CAAC;SACL;KAAA;;;;;"}