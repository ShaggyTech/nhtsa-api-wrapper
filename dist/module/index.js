import{F as e,_ as r,g as t,i as o}from"./Fetch-ece12d05.js";export{F as Fetch,i as isValidVin}from"./Fetch-ece12d05.js";class n extends e{constructor(e){super(e)}DecodeVin(e,i){var o,n;return r(this,void 0,void 0,(function*(){const r=t(i);if(i&&"object"!==r)return Promise.reject(new Error('DecodeVin, "params" argument must be of type object, got: '+`<${r}> ${i}`));const s=t(e);if("string"!==s)return Promise.reject(new Error('DecodeVin, "vin" argument is required and must be of type string, got: '+`<${s}> ${e}`));const a=t(null===(o=i)||void 0===o?void 0:o.modelYear);if((null===(n=i)||void 0===n?void 0:n.modelYear)&&"number"!==a)return Promise.reject(new Error('DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: '+`<${a}> ${i.modelYear}`));const u=yield this.buildQueryString(i).catch(e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`))),c=`${this.baseUrl}/DecodeVin/${e}${u}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`)))}))}}class s extends e{DecodeVinExtended(e,i){var o,n;return r(this,void 0,void 0,(function*(){const r="DecodeVinExtended",s=t(i);if(i&&"object"!==s)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${s}> ${i}`));const a=t(e);if("string"!==a)return Promise.reject(new Error(`${r}, "vin" argument is required and must be of type string, got: `+`<${a}> ${e}`));const u=t(null===(o=i)||void 0===o?void 0:o.modelYear);if((null===(n=i)||void 0===n?void 0:n.modelYear)&&"number"!==u)return Promise.reject(new Error(`${r}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${u}> ${i.modelYear}`));const c=yield this.buildQueryString(i).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),d=`${this.baseUrl}/${r}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class a extends e{DecodeVinValues(e,i){var o,n;return r(this,void 0,void 0,(function*(){const r="DecodeVinValues",s=t(i);if(i&&"object"!==s)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${s}> ${i}`));const a=t(e);if("string"!==a)return Promise.reject(new Error(`${r}, "vin" argument is required and must be of type string, got: `+`<${a}> ${e}`));const u=t(null===(o=i)||void 0===o?void 0:o.modelYear);if((null===(n=i)||void 0===n?void 0:n.modelYear)&&"string"!==u&&"number"!==u)return Promise.reject(new Error(`${r}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${u}> ${i.modelYear}`));const c=yield this.buildQueryString(i).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),d=`${this.baseUrl}/${r}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class u extends e{DecodeVinValuesExtended(e,i){var o,n;return r(this,void 0,void 0,(function*(){const r="DecodeVinValuesExtended",s=t(i);if(i&&"object"!==s)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${s}> ${i}`));const a=t(e);if("string"!==a)return Promise.reject(new Error(`${r}, "vin" argument is required and must be of type string, got: `+`<${a}> ${e}`));const u=t(null===(o=i)||void 0===o?void 0:o.modelYear);if((null===(n=i)||void 0===n?void 0:n.modelYear)&&"number"!==u)return Promise.reject(new Error(`${r}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${u}> ${i.modelYear}`));const c=yield this.buildQueryString(i).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),d=`${this.baseUrl}/${r}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class c extends e{DecodeWMI(e){return r(this,void 0,void 0,(function*(){const r=t(e);if("string"!==r)return Promise.reject(new Error('DecodeWMI, "WMI" argument is required and must be of type string, got: '+`<${r}> ${e}`));const i=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`DecodeWMI, Error building query string: ${e}`))),o=`${this.baseUrl}/DecodeWMI/${e}${i}`;return yield this.get(o).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeWMI, Fetch.get() error: ${e}`)))}))}}class d extends e{GetAllMakes(){return r(this,void 0,void 0,(function*(){const e=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`GetAllMakes, Error building query string: ${e}`))),r=`${this.baseUrl}/GetAllMakes${e}`;return yield this.get(r).then(e=>e).catch(e=>Promise.reject(new Error(`GetAllMakes, Fetch.get() error: ${e}`)))}))}}class m extends e{GetAllManufacturers(e={}){return r(this,void 0,void 0,(function*(){const r="GetAllManufacturers",i=t(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${i}> ${e}`));const o=t(e.manufacturerType);if(e.manufacturerType&&"string"!==o)return Promise.reject(new Error(`${r}, "params.manufacturerType" argument must be of type string, got: `+`<${o}> ${e.manufacturerType}`));const n=t(e.page);if(e.page&&"number"!==n)return Promise.reject(new Error(`${r}, "params.page" argument must be of type number, got: `+`<${n}> ${e.page}`));const s=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}${s}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class $ extends e{GetCanadianVehicleSpecifications(e){return r(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",i=t(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${i}> ${e}`));const o=t(e.year);if("number"!==o)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${o}> ${e.year}`));const n=t(e.make);if(e.make&&"string"!==n)return Promise.reject(new Error(`${r}, "params.make" argument must be of type string, got: `+`<${n}> ${e.make}`));const s=t(e.model);if(e.model&&"string"!==s)return Promise.reject(new Error(`${r}, "params.model" argument must be of type string, got: `+`<${s}> ${e.model}`));const a=t(e.units);if(e.units&&"string"!==a)return Promise.reject(new Error(`${r}, "params.units" argument must be of type string, got: `+`<${a}> ${e.units}`));const u=e.make||"",c=e.model||"",d=e.units||"",m={year:e.year,make:u,model:c,units:d},$=yield this.buildQueryString(m,!0).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),l=`${this.baseUrl}/${r}${$}`;return yield this.get(l).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class l extends e{GetEquipmentPlantCodes(e){return r(this,void 0,void 0,(function*(){const r="GetEquipmentPlantCodes",i=t(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${i}> ${e}`));const o=t(e.year);if("number"!==o)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${o}> ${e.year}`));const n=t(e.equipmentType);if("number"!==n)return Promise.reject(new Error(`${r}, "params.equipmentType" argument is required and must be of type number, got: `+`<${n}> ${e.equipmentType}`));const s=t(e.reportType);if("string"!==s)return Promise.reject(new Error(`${r}, "params.reportType" argument is required and must be of type string, got: `+`<${s}> ${e.reportType}`));const a=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),u=`${this.baseUrl}/${r}${a}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class g extends e{GetMakeForManufacturer(e){return r(this,void 0,void 0,(function*(){const r="GetMakeForManufacturer",i=t(e);if("string"!==i&&"number"!==i)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class h extends e{GetMakesForManufacturerAndYear(e,i){return r(this,void 0,void 0,(function*(){const r="GetMakesForManufacturerAndYear",o=t(e);if("string"!==o&&"number"!==o)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: `+`<${o}> ${e}`));const n=t(i);if("object"!==n)return Promise.reject(new Error(`${r}, "params" argument is required and must be of type object, got: `+`<${n}> ${i}`));const s=t(i.year);if("number"!==s)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${s}> ${i.year}`));const a=yield this.buildQueryString(i).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),u=`${this.baseUrl}/${r}/${e}${a}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class y extends e{GetMakesForVehicleType(e){return r(this,void 0,void 0,(function*(){const r="GetMakesForVehicleType",i=t(e);if("string"!==i)return Promise.reject(new Error(`${r}, "typeName" argument is required and must be of type string, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class p extends e{GetManufacturerDetails(e){return r(this,void 0,void 0,(function*(){const r="GetManufacturerDetails",i=t(e);if("string"!==i&&"number"!==i)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class b extends e{GetModelsForMake(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMake",i=t(e);if("string"!==i)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class f extends e{GetModelsForMakeId(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeId",i=t(e);if("number"!==i)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString({}).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class E extends e{GetModelsForMakeIdYear(e){var i,o,n;return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeIdYear",s=null===(i=e)||void 0===i?void 0:i.makeId,a=null===(o=e)||void 0===o?void 0:o.modelYear,u=null===(n=e)||void 0===n?void 0:n.vehicleType,c=t(e);if("object"!==c)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${c}> ${e}`));const d=t(s);if("number"!==d)return Promise.reject(new Error(`${r}, "params.makeId" argument is required and must be of type number, got: `+`<${d}> ${s}`));if(!a&&!u)return Promise.reject(new Error(`${r}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${a} | ${u}`));const m=t(a);if(a&&"number"!==m)return Promise.reject(new Error(`${r}, "params.modelYear" must be of type number, got: `+`<${m}> ${a}`));const $=t(u);if(u&&"string"!==$)return Promise.reject(new Error(`${r}, "params.vehicleType" must be of type string, got: `+`<${$}> ${u}`));let l=`${r}/makeId/${s}/`;l+=a&&u?`modelYear/${a}/vehicleType/${u}`:a?`modelYear/${a}`:`vehicleType/${u}`;const g=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),h=`${this.baseUrl}/${l}${g}`;return yield this.get(h).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class j extends e{GetModelsForMakeYear(e){var i,o,n;return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeYear",s=null===(i=e)||void 0===i?void 0:i.make,a=null===(o=e)||void 0===o?void 0:o.modelYear,u=null===(n=e)||void 0===n?void 0:n.vehicleType,c=t(e);if("object"!==c)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${c}> ${e}`));const d=t(s);if("string"!==d)return Promise.reject(new Error(`${r}, "params.make" argument is required and must be of type string, got: `+`<${d}> ${s}`));if(!a&&!u)return Promise.reject(new Error(`${r}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${a} | ${u}`));const m=t(a);if(a&&"number"!==m)return Promise.reject(new Error(`${r}, "params.modelYear" must be of type number, got: `+`<${m}> ${a}`));const $=t(u);if(u&&"string"!==$)return Promise.reject(new Error(`${r}, "params.vehicleType" must be of type string, got: `+`<${$}> ${u}`));let l=`${r}/make/${e.make}/`;l+=a&&u?`modelYear/${a}/vehicleType/${u}`:a?`modelYear/${a}`:`vehicleType/${u}`;const g=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),h=`${this.baseUrl}/${l}${g}`;return yield this.get(h).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class P extends e{GetParts(e){var i,o,n,s;return r(this,void 0,void 0,(function*(){const r=null===(i=e)||void 0===i?void 0:i.type,a=null===(o=e)||void 0===o?void 0:o.fromDate,u=null===(n=e)||void 0===n?void 0:n.toDate,c=null===(s=e)||void 0===s?void 0:s.page,d=t(e);if(e&&"object"!==d)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${d}> ${e}`));const m=t(r);if(r&&"number"!==m)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${m}> ${r}`));const $=t(a);if(a&&"string"!==$)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${$}> ${a}`));const l=t(u);if(u&&"string"!==l)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${l}> ${u}`));const g=t(c);if(c&&"number"!==g)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${g}> ${c}`));const h=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`GetParts, Error building query string: ${e}`))),y=`${this.baseUrl}/GetParts${h}`;return yield this.get(y).then(e=>e).catch(e=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${e}`)))}))}}class v extends e{GetVehicleTypesForMake(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMake",i=t(e);if("string"!==i)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class w extends e{GetVehicleTypesForMakeId(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMakeId",i=t(e);if("number"!==i)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class M extends e{GetVehicleVariableList(){return r(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class G extends e{GetVehicleVariableValuesList(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleVariableValuesList",i=t(e);if("string"!==i&&"number"!==i)return Promise.reject(new Error(`${r}, "variableValue" argument is required and must be of type string or number, got: `+`<${i}> ${e}`));"string"===i&&(e=encodeURI(e));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class V extends e{GetWMIsForManufacturer(e){return r(this,void 0,void 0,(function*(){const r="GetWMIsForManufacturer",i=t(e);if("string"!==i)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string, got: `+`<${i}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),n=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class k extends e{constructor(e){super(e),this.isValidVin=o,this.DecodeVin=n.prototype.DecodeVin,this.DecodeVinValues=a.prototype.DecodeVinValues,this.DecodeVinExtended=s.prototype.DecodeVinExtended,this.DecodeVinValuesExtended=u.prototype.DecodeVinValuesExtended,this.DecodeWMI=c.prototype.DecodeWMI,this.GetAllMakes=d.prototype.GetAllMakes,this.GetAllManufacturers=m.prototype.GetAllManufacturers,this.GetCanadianVehicleSpecifications=$.prototype.GetCanadianVehicleSpecifications,this.GetEquipmentPlantCodes=l.prototype.GetEquipmentPlantCodes,this.GetMakeForManufacturer=g.prototype.GetMakeForManufacturer,this.GetMakesForManufacturerAndYear=h.prototype.GetMakesForManufacturerAndYear,this.GetMakesForVehicleType=y.prototype.GetMakesForVehicleType,this.GetManufacturerDetails=p.prototype.GetManufacturerDetails,this.GetModelsForMake=b.prototype.GetModelsForMake,this.GetModelsForMakeId=f.prototype.GetModelsForMakeId,this.GetModelsForMakeIdYear=E.prototype.GetModelsForMakeIdYear,this.GetModelsForMakeYear=j.prototype.GetModelsForMakeYear,this.GetParts=P.prototype.GetParts,this.GetVehicleTypesForMake=v.prototype.GetVehicleTypesForMake,this.GetVehicleTypesForMakeId=w.prototype.GetVehicleTypesForMakeId,this.GetVehicleVariableList=M.prototype.GetVehicleVariableList,this.GetVehicleVariableValuesList=G.prototype.GetVehicleVariableValuesList,this.GetWMIsForManufacturer=V.prototype.GetWMIsForManufacturer}}const q=new k;export{q as Client,n as DecodeVin,k as NHTSA};
//# sourceMappingURL=index.js.map
