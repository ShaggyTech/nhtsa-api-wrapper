{"version":3,"file":"GetModelsForMakeIdYear.js","sources":["../../src/api/actions/GetModelsForMakeIdYear.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetModelsForMakeIdYear\r\n * @category Actions\r\n * @description GetModelsForMakeIdYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeIdYear](module-api_actions_GetModelsForMakeIdYear.GetModelsForMakeIdYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeIdYearResponse](#GetModelsForMakeIdYearResponse)\r\n * > - Type: [GetModelsForMakeIdYearResults](#GetModelsForMakeIdYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeIdYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Model Year\r\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\r\n   *   - `params.makeId` is a number and is a required query parameter.\r\n   *\r\n   * A minimum of one of the following are required (or a combination of both):\r\n   *   - `params.modelYear` is a number (greater than 1995)\r\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\r\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.makeId - Make ID to search.\r\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\r\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\r\n   * @returns {(Promise<GetModelsForMakeIdYearResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeIdYear(params: {\r\n    makeId: number;\r\n    modelYear?: number;\r\n    vehicleType?: string;\r\n  }): Promise<GetModelsForMakeIdYearResponse | Error> {\r\n    const action = 'GetModelsForMakeIdYear';\r\n\r\n    const makeId: number = params?.makeId;\r\n    const modelYear: number | undefined = params?.modelYear;\r\n    const vehicleType: string | undefined = params?.vehicleType;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n    /* Required makeId param of type number */\r\n    const typeofMakeId = getTypeof(makeId);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeId}`\r\n        )\r\n      );\r\n    }\r\n    /* At least one of modelYear or vehicleType params is required */\r\n    if (!modelYear && !vehicleType) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\r\n            `${modelYear} | ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n    /* valid modelYear param of type number */\r\n    const typeofModelYear = getTypeof(modelYear);\r\n    if (modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\r\n            `<${typeofModelYear}> ${modelYear}`\r\n        )\r\n      );\r\n    }\r\n    /* valid vehicleType param of type string */\r\n    const typeofVehicleType = getTypeof(vehicleType);\r\n    if (vehicleType && typeofVehicleType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\r\n            `<${typeofVehicleType}> ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Beginning of the the actionUrl */\r\n    let actionUrl = `${action}/makeId/${makeId}/`;\r\n\r\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\r\n    if (modelYear && vehicleType) {\r\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\r\n    } else if (modelYear) {\r\n      actionUrl += `modelYear/${modelYear}`;\r\n    } else {\r\n      actionUrl += `vehicleType/${vehicleType}`;\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResults\r\n */\r\nexport type GetModelsForMakeIdYearResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeIdYear API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResponse\r\n */\r\nexport type GetModelsForMakeIdYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeIdYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["GetModelsForMakeIdYear","Fetch","[object Object]","userConfig","super","params","action","makeId","modelYear","vehicleType","typeofParams","getTypeof","Promise","reject","Error","typeofMakeId","typeofModelYear","typeofVehicleType","actionUrl","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"iGAgCaA,UAA+BC,EAC1CC,YAAYC,GACVC,MAAMD,GAoBFD,uBAAuBG,sDAK3B,MAAMC,EAAS,yBAETC,YAAiBF,wBAAQE,OACzBC,YAAgCH,wBAAQG,UACxCC,YAAkCJ,wBAAQI,YAG1CC,EAAeC,EAAUN,GAC/B,GAAqB,WAAjBK,EACF,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGR,qDACD,IAAII,MAAiBL,MAK7B,MAAMU,EAAeJ,EAAUJ,GAC/B,GAAqB,WAAjBQ,EACF,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGR,4EACD,IAAIS,MAAiBR,MAK7B,IAAKC,IAAcC,EACjB,OAAOG,QAAQC,OACb,IAAIC,MACF,GAAGR,iFACD,GAAGE,OAAeC,MAK1B,MAAMO,EAAkBL,EAAUH,GAClC,GAAIA,GAAiC,WAApBQ,EACf,OAAOJ,QAAQC,OACb,IAAIC,MACF,GAAGR,sDACD,IAAIU,MAAoBR,MAKhC,MAAMS,EAAoBN,EAAUF,GACpC,GAAIA,GAAqC,WAAtBQ,EACjB,OAAOL,QAAQC,OACb,IAAIC,MACF,GAAGR,wDACD,IAAIW,MAAsBR,MAMlC,IAAIS,EAAY,GAAGZ,YAAiBC,KAIlCW,GADEV,GAAaC,EACF,aAAaD,iBAAyBC,IAC1CD,EACI,aAAaA,IAEb,eAAeC,IAI9B,MAAMU,QAAoBC,KAAKC,mBAAmBC,MAAOC,GACvDX,QAAQC,OACN,IAAIC,MAAM,GAAGR,mCAAwCiB,OAKnDC,EAAM,GAAGJ,KAAKK,WAAWP,IAAYC,IAG3C,aAAaC,KAAKM,IAAIF,GACnBG,KAAKC,GAAYA,GACjBN,MAAOC,GACNX,QAAQC,OAAO,IAAIC,MAAM,GAAGR,yBAA8BiB"}