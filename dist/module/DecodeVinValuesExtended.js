import{_ as e}from"./tslib.es6-e8a9b979.js";import{F as r,g as t}from"./Fetch-55acb681.js";class o extends r{constructor(e){super(e)}DecodeVinValuesExtended(r,o){return e(this,void 0,void 0,(function*(){const e="DecodeVinValuesExtended",n=t(o);if(o&&"object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${o}`));const s=t(r);if("string"!==s)return Promise.reject(new Error(`${e}, "vin" argument is required and must be of type string, got: `+`<${s}> ${r}`));const i=t(null==o?void 0:o.modelYear);if((null==o?void 0:o.modelYear)&&"number"!==i)return Promise.reject(new Error(`${e}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${i}> ${o.modelYear}`));const u=yield this.buildQueryString(o).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),a=`${this.baseUrl}/${e}/${r}${u}`;return yield this.get(a).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}export{o as DecodeVinValuesExtended};
//# sourceMappingURL=DecodeVinValuesExtended.js.map
