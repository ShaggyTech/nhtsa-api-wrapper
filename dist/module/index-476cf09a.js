import{_ as e}from"./tslib.es6-e8a9b979.js";import{F as r,g as t}from"./Fetch-980165d1.js";class n extends r{constructor(e){super(e)}DecodeVin(r,n){var o,i;return e(this,void 0,void 0,(function*(){const e=t(n);if(n&&"object"!==e)return Promise.reject(new Error('DecodeVin, "params" argument must be of type object, got: '+`<${e}> ${n}`));const s=t(r);if("string"!==s)return Promise.reject(new Error('DecodeVin, "vin" argument is required and must be of type string, got: '+`<${s}> ${r}`));const u=t(null===(o=n)||void 0===o?void 0:o.modelYear);if((null===(i=n)||void 0===i?void 0:i.modelYear)&&"number"!==u)return Promise.reject(new Error('DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: '+`<${u}> ${n.modelYear}`));const c=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`))),a=`${this.baseUrl}/DecodeVin/${r}${c}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`)))}))}}class o extends r{constructor(e){super(e)}DecodeVinExtended(r,n){var o,i;return e(this,void 0,void 0,(function*(){const e="DecodeVinExtended",s=t(n);if(n&&"object"!==s)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${s}> ${n}`));const u=t(r);if("string"!==u)return Promise.reject(new Error(`${e}, "vin" argument is required and must be of type string, got: `+`<${u}> ${r}`));const c=t(null===(o=n)||void 0===o?void 0:o.modelYear);if((null===(i=n)||void 0===i?void 0:i.modelYear)&&"number"!==c)return Promise.reject(new Error(`${e}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${c}> ${n.modelYear}`));const a=yield this.buildQueryString(n).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),m=`${this.baseUrl}/${e}/${r}${a}`;return yield this.get(m).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class i extends r{constructor(e){super(e)}DecodeVinValues(r,n){var o,i;return e(this,void 0,void 0,(function*(){const e="DecodeVinValues",s=t(n);if(n&&"object"!==s)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${s}> ${n}`));const u=t(r);if("string"!==u)return Promise.reject(new Error(`${e}, "vin" argument is required and must be of type string, got: `+`<${u}> ${r}`));const c=t(null===(o=n)||void 0===o?void 0:o.modelYear);if((null===(i=n)||void 0===i?void 0:i.modelYear)&&"string"!==c&&"number"!==c)return Promise.reject(new Error(`${e}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${c}> ${n.modelYear}`));const a=yield this.buildQueryString(n).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),m=`${this.baseUrl}/${e}/${r}${a}`;return yield this.get(m).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class s extends r{constructor(e){super(e)}DecodeVinValuesExtended(r,n){var o,i;return e(this,void 0,void 0,(function*(){const e="DecodeVinValuesExtended",s=t(n);if(n&&"object"!==s)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${s}> ${n}`));const u=t(r);if("string"!==u)return Promise.reject(new Error(`${e}, "vin" argument is required and must be of type string, got: `+`<${u}> ${r}`));const c=t(null===(o=n)||void 0===o?void 0:o.modelYear);if((null===(i=n)||void 0===i?void 0:i.modelYear)&&"number"!==c)return Promise.reject(new Error(`${e}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${c}> ${n.modelYear}`));const a=yield this.buildQueryString(n).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),m=`${this.baseUrl}/${e}/${r}${a}`;return yield this.get(m).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class u extends r{constructor(e){super(e)}DecodeWMI(r){return e(this,void 0,void 0,(function*(){const e=t(r);if("string"!==e)return Promise.reject(new Error('DecodeWMI, "WMI" argument is required and must be of type string, got: '+`<${e}> ${r}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`DecodeWMI, Error building query string: ${e}`))),o=`${this.baseUrl}/DecodeWMI/${r}${n}`;return yield this.get(o).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeWMI, Fetch.get() error: ${e}`)))}))}}class c extends r{constructor(e){super(e)}GetAllMakes(){return e(this,void 0,void 0,(function*(){const e=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`GetAllMakes, Error building query string: ${e}`))),r=`${this.baseUrl}/GetAllMakes${e}`;return yield this.get(r).then(e=>e).catch(e=>Promise.reject(new Error(`GetAllMakes, Fetch.get() error: ${e}`)))}))}}class a extends r{constructor(e){super(e)}GetAllManufacturers(r={}){return e(this,void 0,void 0,(function*(){const e="GetAllManufacturers",n=t(r);if("object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${r}`));const o=t(r.manufacturerType);if(r.manufacturerType&&"string"!==o)return Promise.reject(new Error(`${e}, "params.manufacturerType" argument must be of type string, got: `+`<${o}> ${r.manufacturerType}`));const i=t(r.page);if(r.page&&"number"!==i)return Promise.reject(new Error(`${e}, "params.page" argument must be of type number, got: `+`<${i}> ${r.page}`));const s=yield this.buildQueryString(r).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),u=`${this.baseUrl}/${e}${s}`;return yield this.get(u).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class m extends r{constructor(e){super(e)}GetCanadianVehicleSpecifications(r){return e(this,void 0,void 0,(function*(){const e="GetCanadianVehicleSpecifications",n=t(r);if("object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${r}`));const o=t(r.year);if("number"!==o)return Promise.reject(new Error(`${e}, "params.year" argument is required and must be of type number, got: `+`<${o}> ${r.year}`));const i=t(r.make);if(r.make&&"string"!==i)return Promise.reject(new Error(`${e}, "params.make" argument must be of type string, got: `+`<${i}> ${r.make}`));const s=t(r.model);if(r.model&&"string"!==s)return Promise.reject(new Error(`${e}, "params.model" argument must be of type string, got: `+`<${s}> ${r.model}`));const u=t(r.units);if(r.units&&"string"!==u)return Promise.reject(new Error(`${e}, "params.units" argument must be of type string, got: `+`<${u}> ${r.units}`));const c=r.make||"",a=r.model||"",m=r.units||"",d={year:r.year,make:c,model:a,units:m},$=yield this.buildQueryString(d,!0).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),g=`${this.baseUrl}/${e}${$}`;return yield this.get(g).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class d extends r{constructor(e){super(e)}GetEquipmentPlantCodes(r){return e(this,void 0,void 0,(function*(){const e="GetEquipmentPlantCodes",n=t(r);if("object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${r}`));const o=t(r.year);if("number"!==o)return Promise.reject(new Error(`${e}, "params.year" argument is required and must be of type number, got: `+`<${o}> ${r.year}`));const i=t(r.equipmentType);if("number"!==i)return Promise.reject(new Error(`${e}, "params.equipmentType" argument is required and must be of type number, got: `+`<${i}> ${r.equipmentType}`));const s=t(r.reportType);if("string"!==s)return Promise.reject(new Error(`${e}, "params.reportType" argument is required and must be of type string, got: `+`<${s}> ${r.reportType}`));const u=yield this.buildQueryString(r).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),c=`${this.baseUrl}/${e}${u}`;return yield this.get(c).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class $ extends r{constructor(e){super(e)}GetMakeForManufacturer(r){return e(this,void 0,void 0,(function*(){const e="GetMakeForManufacturer",n=t(r);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`${e}, "manufacturer" argument is required and must be of type string or number, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class g extends r{constructor(e){super(e)}GetMakesForManufacturerAndYear(r,n){return e(this,void 0,void 0,(function*(){const e="GetMakesForManufacturerAndYear",o=t(r);if("string"!==o&&"number"!==o)return Promise.reject(new Error(`${e}, "manufacturer" argument is required and must be of type string or number, got: `+`<${o}> ${r}`));const i=t(n);if("object"!==i)return Promise.reject(new Error(`${e}, "params" argument is required and must be of type object, got: `+`<${i}> ${n}`));const s=t(n.year);if("number"!==s)return Promise.reject(new Error(`${e}, "params.year" argument is required and must be of type number, got: `+`<${s}> ${n.year}`));const u=yield this.buildQueryString(n).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),c=`${this.baseUrl}/${e}/${r}${u}`;return yield this.get(c).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class l extends r{constructor(e){super(e)}GetMakesForVehicleType(r){return e(this,void 0,void 0,(function*(){const e="GetMakesForVehicleType",n=t(r);if("string"!==n)return Promise.reject(new Error(`${e}, "typeName" argument is required and must be of type string, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class h extends r{constructor(e){super(e)}GetManufacturerDetails(r){return e(this,void 0,void 0,(function*(){const e="GetManufacturerDetails",n=t(r);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`${e}, "manufacturer" argument is required and must be of type string or number, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class b extends r{constructor(e){super(e)}GetModelsForMake(r){return e(this,void 0,void 0,(function*(){const e="GetModelsForMake",n=t(r);if("string"!==n)return Promise.reject(new Error(`${e}, "makeName" argument is required and must be of type string, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class y extends r{constructor(e){super(e)}GetModelsForMakeId(r){return e(this,void 0,void 0,(function*(){const e="GetModelsForMakeId",n=t(r);if("number"!==n)return Promise.reject(new Error(`${e}, "makeId" argument is required and must be of type number, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString({}).catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class p extends r{constructor(e){super(e)}GetModelsForMakeIdYear(r){var n,o,i;return e(this,void 0,void 0,(function*(){const e="GetModelsForMakeIdYear",s=null===(n=r)||void 0===n?void 0:n.makeId,u=null===(o=r)||void 0===o?void 0:o.modelYear,c=null===(i=r)||void 0===i?void 0:i.vehicleType,a=t(r);if("object"!==a)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${a}> ${r}`));const m=t(s);if("number"!==m)return Promise.reject(new Error(`${e}, "params.makeId" argument is required and must be of type number, got: `+`<${m}> ${s}`));if(!u&&!c)return Promise.reject(new Error(`${e}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${u} | ${c}`));const d=t(u);if(u&&"number"!==d)return Promise.reject(new Error(`${e}, "params.modelYear" must be of type number, got: `+`<${d}> ${u}`));const $=t(c);if(c&&"string"!==$)return Promise.reject(new Error(`${e}, "params.vehicleType" must be of type string, got: `+`<${$}> ${c}`));let g=`${e}/makeId/${s}/`;g+=u&&c?`modelYear/${u}/vehicleType/${c}`:u?`modelYear/${u}`:`vehicleType/${c}`;const l=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),h=`${this.baseUrl}/${g}${l}`;return yield this.get(h).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class f extends r{constructor(e){super(e)}GetModelsForMakeYear(r){var n,o,i;return e(this,void 0,void 0,(function*(){const e="GetModelsForMakeYear",s=null===(n=r)||void 0===n?void 0:n.make,u=null===(o=r)||void 0===o?void 0:o.modelYear,c=null===(i=r)||void 0===i?void 0:i.vehicleType,a=t(r);if("object"!==a)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${a}> ${r}`));const m=t(s);if("string"!==m)return Promise.reject(new Error(`${e}, "params.make" argument is required and must be of type string, got: `+`<${m}> ${s}`));if(!u&&!c)return Promise.reject(new Error(`${e}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${u} | ${c}`));const d=t(u);if(u&&"number"!==d)return Promise.reject(new Error(`${e}, "params.modelYear" must be of type number, got: `+`<${d}> ${u}`));const $=t(c);if(c&&"string"!==$)return Promise.reject(new Error(`${e}, "params.vehicleType" must be of type string, got: `+`<${$}> ${c}`));let g=`${e}/make/${r.make}/`;g+=u&&c?`modelYear/${u}/vehicleType/${c}`:u?`modelYear/${u}`:`vehicleType/${c}`;const l=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),h=`${this.baseUrl}/${g}${l}`;return yield this.get(h).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class E extends r{constructor(e){super(e)}GetParts(r){var n,o,i,s;return e(this,void 0,void 0,(function*(){const e=null===(n=r)||void 0===n?void 0:n.type,u=null===(o=r)||void 0===o?void 0:o.fromDate,c=null===(i=r)||void 0===i?void 0:i.toDate,a=null===(s=r)||void 0===s?void 0:s.page,m=t(r);if(r&&"object"!==m)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${m}> ${r}`));const d=t(e);if(e&&"number"!==d)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${d}> ${e}`));const $=t(u);if(u&&"string"!==$)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${$}> ${u}`));const g=t(c);if(c&&"string"!==g)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${g}> ${c}`));const l=t(a);if(a&&"number"!==l)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${l}> ${a}`));const h=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`GetParts, Error building query string: ${e}`))),b=`${this.baseUrl}/GetParts${h}`;return yield this.get(b).then(e=>e).catch(e=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${e}`)))}))}}class j extends r{constructor(e){super(e)}GetVehicleTypesForMake(r){return e(this,void 0,void 0,(function*(){const e="GetVehicleTypesForMake",n=t(r);if("string"!==n)return Promise.reject(new Error(`${e}, "makeName" argument is required and must be of type string, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class P extends r{constructor(e){super(e)}GetVehicleTypesForMakeId(r){return e(this,void 0,void 0,(function*(){const e="GetVehicleTypesForMakeId",n=t(r);if("number"!==n)return Promise.reject(new Error(`${e}, "makeId" argument is required and must be of type number, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class v extends r{constructor(e){super(e)}GetVehicleVariableList(){return e(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class w extends r{constructor(e){super(e)}GetVehicleVariableValuesList(r){return e(this,void 0,void 0,(function*(){const e="GetVehicleVariableValuesList",n=t(r);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`${e}, "variableValue" argument is required and must be of type string or number, got: `+`<${n}> ${r}`));"string"===n&&(r=encodeURI(r));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class q extends r{constructor(e){super(e)}GetWMIsForManufacturer(r){return e(this,void 0,void 0,(function*(){const e="GetWMIsForManufacturer",n=t(r);if("string"!==n)return Promise.reject(new Error(`${e}, "manufacturer" argument is required and must be of type string, got: `+`<${n}> ${r}`));const o=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),i=`${this.baseUrl}/${e}/${r}${o}`;return yield this.get(i).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}export{n as D,c as G,i as a,o as b,s as c,u as d,a as e,m as f,d as g,$ as h,g as i,l as j,h as k,b as l,y as m,p as n,f as o,E as p,j as q,P as r,v as s,w as t,q as u};
//# sourceMappingURL=index-476cf09a.js.map
