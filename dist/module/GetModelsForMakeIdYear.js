import{_ as e}from"./isValidVin-a63c6e15.js";import{F as r,g as t}from"./Fetch-3b3744ac.js";class o extends r{constructor(e){super(e)}GetModelsForMakeIdYear(r){return e(this,void 0,void 0,(function*(){const e="GetModelsForMakeIdYear",o=null==r?void 0:r.makeId,i=null==r?void 0:r.modelYear,s=null==r?void 0:r.vehicleType,n=t(r);if("object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${r}`));const a=t(o);if("number"!==a)return Promise.reject(new Error(`${e}, "params.makeId" argument is required and must be of type number, got: `+`<${a}> ${o}`));if(!i&&!s)return Promise.reject(new Error(`${e}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${i} | ${s}`));const m=t(i);if(i&&"number"!==m)return Promise.reject(new Error(`${e}, "params.modelYear" must be of type number, got: `+`<${m}> ${i}`));const c=t(s);if(s&&"string"!==c)return Promise.reject(new Error(`${e}, "params.vehicleType" must be of type string, got: `+`<${c}> ${s}`));let u=`${e}/makeId/${o}/`;u+=i&&s?`modelYear/${i}/vehicleType/${s}`:i?`modelYear/${i}`:`vehicleType/${s}`;const $=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),d=`${this.baseUrl}/${u}${$}`;return yield this.get(d).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}export{o as GetModelsForMakeIdYear};
//# sourceMappingURL=GetModelsForMakeIdYear.js.map
