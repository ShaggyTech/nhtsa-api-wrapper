{"version":3,"file":"GetAllManufacturers.js","sources":["../../src/api/actions/GetAllManufacturers.ts"],"sourcesContent":["/**\n * @module api/actions/GetAllManufacturers\n * @category Actions\n * @description GetAllManufacturers NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetAllManufacturers](module-api_actions_GetAllManufacturers.GetAllManufacturers.html)\n * >\n * > **Types**\n * > - Type: [GetAllManufacturersResponse](#GetAllManufacturersResponse)\n * > - Type: [GetAllManufacturersResults](#GetAllManufacturersResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetAllManufacturers extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of all the Manufacturers available in vPIC Dataset.\n   * - `params.manufacturerType` allows the user to filter the list based on manufacturer type,\n   *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\n   *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings).\n   * - You can get a list of all manufacturer types with the following API Action:\n   *   `GetVehicleVariableValuesList('manufacturer type')`\n   * - Results are provided in pages of 100 items.\n   * - Provide a number value for `params.page` to specify 1st (default), 2nd, 3rd, Nth, etc page.\n   *\n   * @async\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string} [params.manufacturerType] - See method description.\n   * @param {number} [params.page] - Specify the page number (results returned 100 at a time).\n   * @returns {(Promise<module:api.ApiResponse>)} Api Response object.\n   */\n  async GetAllManufacturers(\n    params: {\n      manufacturerType?: string;\n      page?: number;\n    } = {}\n  ): Promise<GetAllManufacturersResponse> {\n    const action = 'GetAllManufacturers';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofManufacturerType = getTypeof(params.manufacturerType);\n    if (params.manufacturerType && typeofManufacturerType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.manufacturerType\" argument must be of type string, got: ` +\n            `<${typeofManufacturerType}> ${params.manufacturerType}`\n        )\n      );\n    }\n\n    const typeofPage = getTypeof(params.page);\n    if (params.page && typeofPage !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.page\" argument must be of type number, got: ` +\n            `<${typeofPage}> ${params.page}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetAllManufacturersResponse}.Results' array.\n *\n * @memberof module:api/actions/GetAllManufacturers\n * @alias GetAllManufacturersResults\n */\nexport type GetAllManufacturersResults = {\n  Country: string;\n  Mfr_CommonName: string;\n  Mfr_ID: number;\n  Mfr_Name: string;\n  VehicleTypes: Array<{ isPrimary?: boolean; name?: string }>;\n};\n\n/**\n * Type representing the complete response returned by the GetAllManufacturers API Action.\n *\n * @memberof module:api/actions/GetAllManufacturers\n * @alias GetAllManufacturersResponse\n */\nexport type GetAllManufacturersResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetAllManufacturersResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["GetAllManufacturers","Fetch","constructor","userConfig","super","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofManufacturerType","manufacturerType","typeofPage","page","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAA4BC,EACvCC,YAAYC,GACVC,MAAMD,GAmBFH,oBACJK,EAGI,6CAEJ,MAAMC,EAAS,sBAGTC,EAAeC,EAAUH,GAC/B,GAAqB,WAAjBE,EACF,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGL,sDACGC,MAAiBF,MAK7B,MAAMO,EAAyBJ,EAAUH,EAAOQ,kBAChD,GAAIR,EAAOQ,kBAA+C,WAA3BD,EAC7B,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGL,uEACGM,MAA2BP,EAAOQ,qBAK9C,MAAMC,EAAaN,EAAUH,EAAOU,MACpC,GAAIV,EAAOU,MAAuB,WAAfD,EACjB,OAAOL,QAAQC,OACb,IAAIC,MACF,GAAGL,2DACGQ,MAAeT,EAAOU,SAMlC,MAAMC,QAAoBC,KAAKC,iBAAiBb,GAAQc,OAAOC,GAC7DX,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCc,QAKnDC,EAAM,GAAGJ,KAAKK,WAAWhB,IAASU,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,MAAMC,GAAaA,IACnBN,OAAOC,GACNX,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8Bc"}