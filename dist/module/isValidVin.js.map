{"version":3,"file":"isValidVin.js","sources":["../../src/utils/isValidVin.ts"],"sourcesContent":["/**\r\n * @module utils/isValidVin\r\n * @category Utils\r\n */\r\n\r\n/*\r\n * There will need to be some way to translate vin digits that are alphabetic\r\n * into their number value in the VIN algorithm transliteration table.\r\n * Later, during the creation of the checksum variable, those digits will be\r\n * multiplied against their corresponding weight (by index) in the WEIGHTS_ARRAY.\r\n * This transliteration table is a key part of the VIN validation algorithm.\r\n */\r\nconst TRANSLITERATION_TABLE: Record<string, number> = {\r\n  A: 1,\r\n  B: 2,\r\n  C: 3,\r\n  D: 4,\r\n  E: 5,\r\n  F: 6,\r\n  G: 7,\r\n  H: 8,\r\n  J: 1,\r\n  K: 2,\r\n  L: 3,\r\n  M: 4,\r\n  N: 5,\r\n  P: 7,\r\n  R: 9,\r\n  S: 2,\r\n  T: 3,\r\n  U: 4,\r\n  V: 5,\r\n  W: 6,\r\n  X: 7,\r\n  Y: 8,\r\n  Z: 9,\r\n};\r\n\r\n/*\r\n * Later, during the creation of the 'checksum' variable, these weights will be\r\n * multiplied by the value of their mirrored index vin digits.\r\n * The array index of each weight corresponds to the same index of each\r\n * digit in the 'vin'.\r\n */\r\nconst WEIGHTS_ARRAY: number[] = [\r\n  8,\r\n  7,\r\n  6,\r\n  5,\r\n  4,\r\n  3,\r\n  2,\r\n  10,\r\n  0,\r\n  9,\r\n  8,\r\n  7,\r\n  6,\r\n  5,\r\n  4,\r\n  3,\r\n  2,\r\n];\r\n\r\n/**\r\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\r\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\r\n *\r\n * @param {string} vin - Vehicle Identification Number.\r\n * @returns {boolean} True for a valid VIN, false for an invalid VIN.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const isValid = NHTSA.isValidVin('3VWD07AJ5EM388202')\r\n * console.log(isValid) // true\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\r\n * const isValid = isValidVin('3VWD07AJ5EM388202')\r\n * console.log(isValid) // true\r\n *\r\n */\r\nexport function isValidVin(vin: string): boolean {\r\n  /* A valid VIN must be a string and is always exactly 17 digits */\r\n  if (typeof vin !== 'string' || vin.length != 17) {\r\n    return false;\r\n  }\r\n\r\n  /* Normalize the vin to all uppercase letters */\r\n  vin = vin.toUpperCase();\r\n\r\n  /* split the vin digits into an array */\r\n  const vinArray: string[] = vin.split('');\r\n\r\n  /* checkDigit will be tested against the checkSum later */\r\n  const checkDigit: string = vinArray[8];\r\n\r\n  /*\r\n   * In a valid VIN, the checkDigit can either be:\r\n   * a number, 0-9 inclusive OR the character 'X'\r\n   */\r\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\r\n    return false;\r\n  }\r\n\r\n  /*\r\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\r\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\r\n   * to be converted as such.\r\n   */\r\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit);\r\n\r\n  /*\r\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\r\n   * into numbers, using the TRANSLITERATION_TABLE.\r\n   * Then these numbers are multiplied against their corresponding weight\r\n   * in the WEIGHTS_ARRAY, matched by index position.\r\n   * All 17 of those digitValues are then added together and divided by 11.\r\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\r\n   */\r\n  const checksum: number =\r\n    vinArray\r\n      .map((digit: string, index: number) => {\r\n        let digitValue: number;\r\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\r\n        isNaN(parseInt(digit))\r\n          ? (digitValue = TRANSLITERATION_TABLE[digit])\r\n          : (digitValue = parseInt(digit));\r\n\r\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\r\n        const weight: number = WEIGHTS_ARRAY[index];\r\n\r\n        /* The final step for each digit is to multiply the digit by it's corresponding weight */\r\n        return digitValue * weight;\r\n      })\r\n      /* Finally, get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\r\n      .reduce((acc, currValue) => acc + currValue, 0) % 11;\r\n\r\n  /*\r\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\r\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\r\n   * we return true, otherwise the VIN is invalid and we return false.\r\n   */\r\n  return checksum === checkValue;\r\n}\r\n"],"names":["TRANSLITERATION_TABLE","A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z","WEIGHTS_ARRAY","isValidVin","vin","length","vinArray","toUpperCase","split","checkDigit","isNaN","parseInt","checkValue","map","digit","index","digitValue","reduce","acc","currValue"],"mappings":"AAYA,MAAMA,EAAgD,CACpDC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GASCC,EAA0B,CAC9B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,YAqBcC,EAAWC,GAEzB,GAAmB,iBAARA,GAAkC,IAAdA,EAAIC,OACjC,OAAO,EAOT,MAAMC,GAHNF,EAAMA,EAAIG,eAGqBC,MAAM,IAG/BC,EAAqBH,EAAS,GAMpC,GAAII,MAAMC,SAASF,KAA+B,MAAfA,EACjC,OAAO,EAQT,MAAMG,EAAoC,MAAfH,EAAqB,GAAKE,SAASF,GAiC9D,OAtBEH,EACGO,IAAI,CAACC,EAAeC,KACnB,IAAIC,EAGCA,EADLN,MAAMC,SAASG,IACGpC,EAAsBoC,GACtBH,SAASG,GAM3B,OAAOE,EAHgBd,EAAca,KAMtCE,OAAO,CAACC,EAAKC,IAAcD,EAAMC,EAAW,GAAK,KAOlCP"}