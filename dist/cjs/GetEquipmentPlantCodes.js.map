{"version":3,"file":"GetEquipmentPlantCodes.js","sources":["../../src/api/actions/GetEquipmentPlantCodes.ts"],"sourcesContent":["/**\n * @module api/actions/GetEquipmentPlantCodes\n * @category Actions\n * @description GetEquipmentPlantCodes NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetEquipmentPlantCodes](module-api_actions_GetEquipmentPlantCodes.GetEquipmentPlantCodes.html)\n * >\n * > **Types**\n * > - Type: [GetEquipmentPlantCodesResponse](#GetEquipmentPlantCodesResponse)\n * > - Type: [GetEquipmentPlantCodesResults](#GetEquipmentPlantCodesResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetEquipmentPlantCodes extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * Returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\n   *\n   * `params.year`:\n   *  - Only years >= 2016 are supported\n   *\n   * `params.equipmentType`:\n   *  - 1 (Tires)\n   *  - 3 (Brake Hoses)\n   *  - 13 (Glazing)\n   *  - 16 (Retread)\n   *\n   * `params.reportType`:\n   *  - 'New' (The Equipment Plant Code was assigned during the selected year).\n   *  - 'Updated' (The Equipment Plant data was modified during the selected year).\n   *  - 'Closed' (The Equipment Plant is no longer Active).\n   *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed)).\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\n   * @param {number} params.equipmentType - Number equal to 1, 3, 13, or 16.\n   * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All'.\n   * @returns {(Promise<GetEquipmentPlantCodesResponse>)} Api Response object.\n   */\n  public async GetEquipmentPlantCodes(params: {\n    year: number;\n    equipmentType: 1 | 3 | 13 | 16;\n    reportType: 'New' | 'Updated' | 'Closed' | 'All';\n  }): Promise<GetEquipmentPlantCodesResponse> {\n    const action = 'GetEquipmentPlantCodes';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    const typeofEquipmentType = getTypeof(params.equipmentType);\n    if (typeofEquipmentType !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.equipmentType\" argument is required and must be of type number, got: ` +\n            `<${typeofEquipmentType}> ${params.equipmentType}`\n        )\n      );\n    }\n\n    const typeofReportType = getTypeof(params.reportType);\n    if (typeofReportType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.reportType\" argument is required and must be of type string, got: ` +\n            `<${typeofReportType}> ${params.reportType}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetEquipmentPlantCodesResponse}.Results' array.\n *\n * @memberof module:api/actions/GetEquipmentPlantCodes\n * @alias GetEquipmentPlantCodesResults\n */\nexport type GetEquipmentPlantCodesResults = {\n  Address: string;\n  City: string;\n  Country: string;\n  DOTCode: string;\n  Name: string;\n  OldDotCode: string;\n  PostalCode: string;\n  StateProvince: string;\n  Status: string;\n};\n\n/**\n * Type representing the complete response returned by the GetEquipmentPlantCodes API Action.\n *\n * @memberof module:api/actions/GetEquipmentPlantCodes\n * @alias GetEquipmentPlantCodesResponse\n */\nexport type GetEquipmentPlantCodesResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetEquipmentPlantCodesResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["Fetch","getTypeof"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAwBA;;;;;;;;MAQa,sBAAuB,SAAQA,WAAK;IAC/C,YAAY,UAAwB;QAClC,KAAK,CAAC,UAAU,CAAC,CAAC;KACnB;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BY,sBAAsB,CAAC,MAInC;;YACC,MAAM,MAAM,GAAG,wBAAwB,CAAC;;YAGxC,MAAM,YAAY,GAAGC,eAAS,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,YAAY,KAAK,QAAQ,EAAE;gBAC7B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,mDAAmD;oBAC1D,IAAI,YAAY,KAAK,MAAM,EAAE,CAChC,CACF,CAAC;aACH;YAED,MAAM,UAAU,GAAGA,eAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,UAAU,KAAK,QAAQ,EAAE;gBAC3B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,wEAAwE;oBAC/E,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE,CACnC,CACF,CAAC;aACH;YAED,MAAM,mBAAmB,GAAGA,eAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC5D,IAAI,mBAAmB,KAAK,QAAQ,EAAE;gBACpC,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,iFAAiF;oBACxF,IAAI,mBAAmB,KAAK,MAAM,CAAC,aAAa,EAAE,CACrD,CACF,CAAC;aACH;YAED,MAAM,gBAAgB,GAAGA,eAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,gBAAgB,KAAK,QAAQ,EAAE;gBACjC,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,8EAA8E;oBACrF,IAAI,gBAAgB,KAAK,MAAM,CAAC,UAAU,EAAE,CAC/C,CACF,CAAC;aACH;;YAGD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,KAChE,OAAO,CAAC,MAAM,CACZ,IAAI,KAAK,CAAC,GAAG,MAAM,kCAAkC,GAAG,EAAE,CAAC,CAC5D,CACF,CAAC;;YAGF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,GAAG,WAAW,EAAE,CAAC;;YAGtD,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;iBACvB,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC;iBAC5B,KAAK,CAAC,CAAC,GAAG,KACT,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,MAAM,wBAAwB,GAAG,EAAE,CAAC,CAAC,CAClE,CAAC;SACL;KAAA;;;;;"}