import{F as e,_ as r,g as t}from"./Fetch-b3914c0a.js";class n extends e{constructor(e){super(e)}DecodeVin(e,n){return r(this,void 0,void 0,(function*(){const r="DecodeVin",o=t(n);if(n&&"object"!==o)return Promise.reject(new Error(`DecodeVin, "params" argument must be of type object, got: <${o}> ${n}`));const i=t(e);if("string"!==i)return Promise.reject(new Error(`DecodeVin, "vin" argument is required and must be of type string, got: <${i}> ${e}`));const s=t(null==n?void 0:n.modelYear);if((null==n?void 0:n.modelYear)&&"number"!==s)return Promise.reject(new Error(`DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${n.modelYear}`));const u=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class o extends e{constructor(e){super(e)}DecodeVinExtended(e,n){return r(this,void 0,void 0,(function*(){const r="DecodeVinExtended",o=t(n);if(n&&"object"!==o)return Promise.reject(new Error(`DecodeVinExtended, "params" argument must be of type object, got: <${o}> ${n}`));const i=t(e);if("string"!==i)return Promise.reject(new Error(`DecodeVinExtended, "vin" argument is required and must be of type string, got: <${i}> ${e}`));const s=t(null==n?void 0:n.modelYear);if((null==n?void 0:n.modelYear)&&"number"!==s)return Promise.reject(new Error(`DecodeVinExtended, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${n.modelYear}`));const u=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class i extends e{constructor(e){super(e)}DecodeVinValues(e,n){return r(this,void 0,void 0,(function*(){const r="DecodeVinValues",o=t(n);if(n&&"object"!==o)return Promise.reject(new Error(`DecodeVinValues, "params" argument must be of type object, got: <${o}> ${n}`));const i=t(e);if("string"!==i)return Promise.reject(new Error(`DecodeVinValues, "vin" argument is required and must be of type string, got: <${i}> ${e}`));const s=t(null==n?void 0:n.modelYear);if((null==n?void 0:n.modelYear)&&"string"!==s&&"number"!==s)return Promise.reject(new Error(`DecodeVinValues, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${n.modelYear}`));const u=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class s extends e{constructor(e){super(e)}DecodeVINValuesBatch(e){return r(this,void 0,void 0,(function*(){const r="DecodeVINValuesBatch",n=t(e);if("string"!==n)return Promise.reject(new Error(`DecodeVINValuesBatch, "inputString" argument is required and must be of type string, got: <${n}> ${e}`));const o=`${this.baseUrl}/${r}/`,i=encodeURI(`DATA=${e}&format=json`);return yield this.get(o,{method:"POST",headers:{"content-type":"application/x-www-form-urlencoded"},body:i}).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class u extends e{constructor(e){super(e)}DecodeVinValuesExtended(e,n){return r(this,void 0,void 0,(function*(){const r="DecodeVinValuesExtended",o=t(n);if(n&&"object"!==o)return Promise.reject(new Error(`DecodeVinValuesExtended, "params" argument must be of type object, got: <${o}> ${n}`));const i=t(e);if("string"!==i)return Promise.reject(new Error(`DecodeVinValuesExtended, "vin" argument is required and must be of type string, got: <${i}> ${e}`));const s=t(null==n?void 0:n.modelYear);if((null==n?void 0:n.modelYear)&&"number"!==s)return Promise.reject(new Error(`DecodeVinValuesExtended, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${n.modelYear}`));const u=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class a extends e{constructor(e){super(e)}DecodeWMI(e){return r(this,void 0,void 0,(function*(){const r="DecodeWMI",n=t(e);if("string"!==n)return Promise.reject(new Error(`DecodeWMI, "WMI" argument is required and must be of type string, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class c extends e{constructor(e){super(e)}GetAllMakes(){return r(this,void 0,void 0,(function*(){const e=yield this.buildQueryString().catch(e=>Promise.reject(new Error("GetAllMakes, Error building query string: "+e))),r=`${this.baseUrl}/GetAllMakes${e}`;return yield this.get(r).then(e=>e).catch(e=>Promise.reject(new Error("GetAllMakes, Fetch.get() error: "+e)))}))}}class d extends e{constructor(e){super(e)}GetAllManufacturers(e={}){return r(this,void 0,void 0,(function*(){const r="GetAllManufacturers",n=t(e);if("object"!==n)return Promise.reject(new Error(`GetAllManufacturers, "params" argument must be of type object, got: <${n}> ${e}`));const o=t(e.manufacturerType);if(e.manufacturerType&&"string"!==o)return Promise.reject(new Error(`GetAllManufacturers, "params.manufacturerType" argument must be of type string, got: <${o}> ${e.manufacturerType}`));const i=t(e.page);if(e.page&&"number"!==i)return Promise.reject(new Error(`GetAllManufacturers, "params.page" argument must be of type number, got: <${i}> ${e.page}`));const s=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),u=`${this.baseUrl}/${r}${s}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class m extends e{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return r(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",n=t(e);if("object"!==n)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params" argument must be of type object, got: <${n}> ${e}`));const o=t(e.year);if("number"!==o)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.year" argument is required and must be of type number, got: <${o}> ${e.year}`));const i=t(e.make);if(e.make&&"string"!==i)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.make" argument must be of type string, got: <${i}> ${e.make}`));const s=t(e.model);if(e.model&&"string"!==s)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.model" argument must be of type string, got: <${s}> ${e.model}`));const u=t(e.units);if(e.units&&"string"!==u)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.units" argument must be of type string, got: <${u}> ${e.units}`));const a=e.make||"",c=e.model||"",d=e.units||"",m={year:e.year,make:a,model:c,units:d},l=yield this.buildQueryString(m,!0).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),$=`${this.baseUrl}/${r}${l}`;return yield this.get($).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class l extends e{constructor(e){super(e)}GetEquipmentPlantCodes(e){return r(this,void 0,void 0,(function*(){const r="GetEquipmentPlantCodes",n=t(e);if("object"!==n)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params" argument must be of type object, got: <${n}> ${e}`));const o=t(e.year);if("number"!==o)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.year" argument is required and must be of type number, got: <${o}> ${e.year}`));const i=t(e.equipmentType);if("number"!==i)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.equipmentType" argument is required and must be of type number, got: <${i}> ${e.equipmentType}`));const s=t(e.reportType);if("string"!==s)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.reportType" argument is required and must be of type string, got: <${s}> ${e.reportType}`));const u=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class $ extends e{constructor(e){super(e)}GetMakeForManufacturer(e){return r(this,void 0,void 0,(function*(){const r="GetMakeForManufacturer",n=t(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`GetMakeForManufacturer, "manufacturer" argument is required and must be of type string or number, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class g extends e{constructor(e){super(e)}GetMakesForManufacturerAndYear(e,n){return r(this,void 0,void 0,(function*(){const r="GetMakesForManufacturerAndYear",o=t(e);if("string"!==o&&"number"!==o)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "manufacturer" argument is required and must be of type string or number, got: <${o}> ${e}`));const i=t(n);if("object"!==i)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "params" argument is required and must be of type object, got: <${i}> ${n}`));const s=t(n.year);if("number"!==s)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "params.year" argument is required and must be of type number, got: <${s}> ${n.year}`));const u=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class h extends e{constructor(e){super(e)}GetMakesForVehicleType(e){return r(this,void 0,void 0,(function*(){const r="GetMakesForVehicleType",n=t(e);if("string"!==n)return Promise.reject(new Error(`GetMakesForVehicleType, "typeName" argument is required and must be of type string, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class b extends e{constructor(e){super(e)}GetManufacturerDetails(e){return r(this,void 0,void 0,(function*(){const r="GetManufacturerDetails",n=t(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`GetManufacturerDetails, "manufacturer" argument is required and must be of type string or number, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class y extends e{constructor(e){super(e)}GetModelsForMake(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMake",n=t(e);if("string"!==n)return Promise.reject(new Error(`GetModelsForMake, "makeName" argument is required and must be of type string, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class p extends e{constructor(e){super(e)}GetModelsForMakeId(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeId",n=t(e);if("number"!==n)return Promise.reject(new Error(`GetModelsForMakeId, "makeId" argument is required and must be of type number, got: <${n}> ${e}`));const o=yield this.buildQueryString({}).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class f extends e{constructor(e){super(e)}GetModelsForMakeIdYear(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeIdYear",n=null==e?void 0:e.makeId,o=null==e?void 0:e.modelYear,i=null==e?void 0:e.vehicleType,s=t(e);if("object"!==s)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params" argument must be of type object, got: <${s}> ${e}`));const u=t(n);if("number"!==u)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.makeId" argument is required and must be of type number, got: <${u}> ${n}`));if(!o&&!i)return Promise.reject(new Error(`GetModelsForMakeIdYear, either one of "params.modelYear" or "params.vehicleType" is required, got: ${o} | ${i}`));const a=t(o);if(o&&"number"!==a)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.modelYear" must be of type number, got: <${a}> ${o}`));const c=t(i);if(i&&"string"!==c)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.vehicleType" must be of type string, got: <${c}> ${i}`));let d=`${r}/makeId/${n}/`;d+=o&&i?`modelYear/${o}/vehicleType/${i}`:o?"modelYear/"+o:"vehicleType/"+i;const m=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),l=`${this.baseUrl}/${d}${m}`;return yield this.get(l).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class E extends e{constructor(e){super(e)}GetModelsForMakeYear(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeYear",n=null==e?void 0:e.make,o=null==e?void 0:e.modelYear,i=null==e?void 0:e.vehicleType,s=t(e);if("object"!==s)return Promise.reject(new Error(`GetModelsForMakeYear, "params" argument must be of type object, got: <${s}> ${e}`));const u=t(n);if("string"!==u)return Promise.reject(new Error(`GetModelsForMakeYear, "params.make" argument is required and must be of type string, got: <${u}> ${n}`));if(!o&&!i)return Promise.reject(new Error(`GetModelsForMakeYear, either one of "params.modelYear" or "params.vehicleType" is required, got: ${o} | ${i}`));const a=t(o);if(o&&"number"!==a)return Promise.reject(new Error(`GetModelsForMakeYear, "params.modelYear" must be of type number, got: <${a}> ${o}`));const c=t(i);if(i&&"string"!==c)return Promise.reject(new Error(`GetModelsForMakeYear, "params.vehicleType" must be of type string, got: <${c}> ${i}`));let d=`${r}/make/${e.make}/`;d+=o&&i?`modelYear/${o}/vehicleType/${i}`:o?"modelYear/"+o:"vehicleType/"+i;const m=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),l=`${this.baseUrl}/${d}${m}`;return yield this.get(l).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class j extends e{constructor(e){super(e)}GetParts(e){return r(this,void 0,void 0,(function*(){const r="GetParts",n=null==e?void 0:e.type,o=null==e?void 0:e.fromDate,i=null==e?void 0:e.toDate,s=null==e?void 0:e.page,u=t(e);if(e&&"object"!==u)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${u}> ${e}`));const a=t(n);if(n&&"number"!==a)return Promise.reject(new Error(`${r}, "params.type" argument must be of type number, got: <${a}> ${n}`));const c=t(o);if(o&&"string"!==c)return Promise.reject(new Error(`${r}, "params.fromDate" argument must be of type string, got: <${c}> ${o}`));const d=t(i);if(i&&"string"!==d)return Promise.reject(new Error(`${r}, "params.toDate" argument must be of type string, got: <${d}> ${i}`));const m=t(s);if(s&&"number"!==m)return Promise.reject(new Error(`${r}, "params.page" argument must be of type number, got: <${m}> ${s}`));const l=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),$=`${this.baseUrl}/${r}${l}`;return yield this.get($).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class P extends e{constructor(e){super(e)}GetVehicleTypesForMake(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMake",n=t(e);if("string"!==n)return Promise.reject(new Error(`GetVehicleTypesForMake, "makeName" argument is required and must be of type string, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class w extends e{constructor(e){super(e)}GetVehicleTypesForMakeId(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMakeId",n=t(e);if("number"!==n)return Promise.reject(new Error(`GetVehicleTypesForMakeId, "makeId" argument is required and must be of type number, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class M extends e{constructor(e){super(e)}GetVehicleVariableList(){return r(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class v extends e{constructor(e){super(e)}GetVehicleVariableValuesList(e){return r(this,void 0,void 0,(function*(){const r="GetVehicleVariableValuesList",n=t(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`GetVehicleVariableValuesList, "variableValue" argument is required and must be of type string or number, got: <${n}> ${e}`));"string"===n&&(e=encodeURI(e));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class G extends e{constructor(e){super(e)}GetWMIsForManufacturer(e){return r(this,void 0,void 0,(function*(){const r="GetWMIsForManufacturer",n=t(e);if("string"!==n)return Promise.reject(new Error(`GetWMIsForManufacturer, "manufacturer" argument is required and must be of type string, got: <${n}> ${e}`));const o=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${o}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}export{n as D,c as G,o as a,i as b,s as c,u as d,a as e,d as f,m as g,l as h,$ as i,g as j,h as k,b as l,y as m,p as n,f as o,E as p,j as q,P as r,w as s,M as t,v as u,G as v};
//# sourceMappingURL=GetWMIsForManufacturer-a7ef6c3c.js.map
