{"version":3,"file":"makeQueryString.js","sources":["../../src/utils/makeQueryString.ts"],"sourcesContent":["/**\r\n * @memberof module:makeQueryString\r\n * @category Utils\r\n *\r\n * @description Object containing Key:Value pairs to build the URL query string with.<br>\r\n * Parameter values may be either strings or numbers. <br>\r\n * ---\r\n * ```javascript\r\n *  Example\r\n *  {\r\n *    format: 'json',\r\n *    modelYear: 2009,\r\n *    whatever: 'something'\r\n *  }\r\n * ```\r\n */\r\nexport interface QueryStringParameters {\r\n  [propName: string]: string | number | undefined;\r\n}\r\n\r\n/**\r\n * @module makeQueryString\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * @async\r\n * @description Utility method to generate a query string.<br>\r\n *   Prepend it to an API URL string. <br>\r\n *   ---\r\n *\r\n * @param {object} params Object of Type [QueryStringParameters](module-makeQueryString.QueryStringParameters.html)\r\n *\r\n * @returns {Promise<string>|Error} An API query string <br>\r\n *  - On resolve: `Promise(<string>)`<br>\r\n *  - On reject: `new Error(<string>)` - if parameters are not of type 'object'\r\n *\r\n * @example <caption>Single Param:</caption>\r\n * const qs = await genQueryString({\r\n *   format: 'json'\r\n * }).catch(error => error)\r\n * //  qs = \"format=json\"\r\n *\r\n * @example <caption>Multiple Params:</caption>\r\n * const qs = await genQueryString({\r\n *   format: 'json',\r\n *   modelYear: 2006,\r\n *   page: \"2\"\r\n * }).catch(error => error)\r\n * // qs = \"?format=json&modelYear=2006&page=2\"\r\n *\r\n * @example <caption>Empty Params Object:</caption>\r\n * const qs = await genQueryString({}).catch(error => error)\r\n * // qs = \"\"\r\n *\r\n */\r\n\r\nexport function makeQueryString(\r\n  params: QueryStringParameters = {}\r\n): Promise<string | Error> {\r\n  // Error message begins with\r\n  const errorBase =\r\n    'queryString(params) - expected params in the form of an object , got:';\r\n\r\n  // Type guard params argument, must be of type object\r\n  if (Object.prototype.toString.call(params) !== '[object Object]') {\r\n    return Promise.reject(new Error(`${errorBase} ${params}`));\r\n  }\r\n\r\n  // Setup QueryString for Array mapping\r\n  const entries = Object.entries(params);\r\n  const paramsLength = entries.length;\r\n\r\n  // Return an empty string if params are an empty object\r\n  if (paramsLength < 1) return Promise.resolve('');\r\n\r\n  // Used to check if we've already prepended a valid query param\r\n  let isPrepended = false;\r\n\r\n  // Map [key]:value entries to \"key=value\" strings in an array\r\n  const queryStringArray = entries.map(([key, value], index) => {\r\n    let prepend = '';\r\n    let append = '';\r\n\r\n    const typeofValue = typeof value;\r\n\r\n    if (value && typeofValue === 'number') {\r\n      value = value.toString();\r\n    }\r\n\r\n    // skip any invalid values, only string or number types are valid\r\n    if (value && (typeofValue === 'string' || typeofValue === 'number')) {\r\n      // if this is the first param we need to prepend the '?' char\r\n      if (value !== '' && !isPrepended) {\r\n        prepend = '?';\r\n        isPrepended = true;\r\n      }\r\n      // if there is another param coming after this one we need to append the '&' char\r\n      if (index < paramsLength - 1) {\r\n        append = '&';\r\n      }\r\n\r\n      // map the completed partial query string to queryStringArray\r\n      return `${prepend}${key}=${value}${append}`;\r\n    }\r\n    return;\r\n  });\r\n\r\n  // Join and return the completed query string anfter URI encoding\r\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\r\n}\r\n"],"names":["makeQueryString","params","Object","prototype","toString","call","Promise","reject","Error","errorBase","entries","paramsLength","length","resolve","isPrepended","queryStringArray","map","_a","index","key","value","prepend","append","typeofValue","encodeURI","join"],"mappings":"SAyDgBA,EACdC,gBAAAA,MAOA,GAA+C,oBAA3CC,OAAOC,UAAUC,SAASC,KAAKJ,GACjC,OAAOK,QAAQC,OAAO,IAAIC,MAASC,yEAAaR,IAIlD,IAAMS,EAAUR,OAAOQ,QAAQT,GACzBU,EAAeD,EAAQE,OAG7B,GAAID,EAAe,EAAG,OAAOL,QAAQO,QAAQ,IAG7C,IAAIC,GAAc,EAGZC,EAAmBL,EAAQM,KAAI,SAACC,EAAcC,OAAbC,OAAKC,OACtCC,EAAU,GACVC,EAAS,GAEPC,SAAqBH,EAO3B,GALIA,GAAyB,WAAhBG,IACXH,EAAQA,EAAMhB,YAIZgB,IAA0B,WAAhBG,GAA4C,WAAhBA,GAYxC,MAVc,KAAVH,GAAiBN,IACnBO,EAAU,IACVP,GAAc,GAGZI,EAAQP,EAAe,IACzBW,EAAS,KAIJ,GAAGD,EAAUF,MAAOC,EAAQE,KAMvC,OAAOhB,QAAQO,QAAQW,UAAUT,EAAiBU,KAAK"}