import{F as e,_ as r,g as t}from"./Fetch-d0e51133.js";class n extends e{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return r(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",n=t(e);if("object"!==n)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${n}> ${e}`));const s=t(e.year);if("number"!==s)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: <${s}> ${e.year}`));const i=t(e.make);if(e.make&&"string"!==i)return Promise.reject(new Error(`${r}, "params.make" argument must be of type string, got: <${i}> ${e.make}`));const o=t(e.model);if(e.model&&"string"!==o)return Promise.reject(new Error(`${r}, "params.model" argument must be of type string, got: <${o}> ${e.model}`));const a=t(e.units);if(e.units&&"string"!==a)return Promise.reject(new Error(`${r}, "params.units" argument must be of type string, got: <${a}> ${e.units}`));const m=e.make||"",u=e.model||"",c=e.units||"",g={year:e.year,make:m,model:u,units:c},$=yield this.buildQueryString(g,!0).catch((e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`)))),d=`${this.baseUrl}/${r}${$}`;return yield this.get(d).then((e=>e)).catch((e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`))))}))}}export{n as GetCanadianVehicleSpecifications};
//# sourceMappingURL=GetCanadianVehicleSpecifications.js.map
