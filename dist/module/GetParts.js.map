{"version":3,"file":"GetParts.js","sources":["../../src/api/actions/GetParts.ts"],"sourcesContent":["/**\n * @module api/actions/GetParts\n * @category Actions\n * @description GetParts NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetParts](module-api_actions_GetParts.GetParts.html)\n * >\n * > **Types**\n * > - Type: [GetPartsResponse](#GetPartsResponse)\n * > - Type: [GetPartsResults](#GetPartsResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetParts extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of ORGs with letter date in the given range of the dates\n   * and with specified Type (`params.type`) of ORG.\n   * - Up to 1000 results will be returned at a time.\n   * - Get the next page by incrementing the `params.page` query parameter.\n   * - All query `params` are optional.\n   *\n   * @async\n   * @param {object} [params] - Query Search Parameters to append to the URL.\n   * @param {number} [params.type] - Specified type of ORG to search.\n   * @param {string} [params.fromDate] - Start date of search query.\n   * @param {string} [params.toDate] - End date of search query.\n   * @param {number} [params.page] - Which page number of results to request (100 results per page).\n   * @returns {(Promise<GetPartsResponse>)} Api Response object.\n   */\n  async GetParts(params?: {\n    type?: number;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n  }): Promise<GetPartsResponse> {\n    const action = 'GetParts';\n\n    const type: number | undefined = params?.type;\n    const fromDate: string | undefined = params?.fromDate;\n    const toDate: string | undefined = params?.toDate;\n    const page: number | undefined = params?.page;\n\n    /* Valid params object */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: <${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    /* valid params.type of type number */\n    const typeofType = getTypeof(type);\n    if (type && typeofType !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.type\" argument must be of type number, got: <${typeofType}> ${type}`\n        )\n      );\n    }\n\n    /* valid params.fromDate of type string */\n    const typeofFromDate = getTypeof(fromDate);\n    if (fromDate && typeofFromDate !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.fromDate\" argument must be of type string, got: <${typeofFromDate}> ${fromDate}`\n        )\n      );\n    }\n\n    /* valid params.toDate of type number */\n    const typeofToDate = getTypeof(toDate);\n    if (toDate && typeofToDate !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.toDate\" argument must be of type string, got: <${typeofToDate}> ${toDate}`\n        )\n      );\n    }\n\n    /* valid params.page of type number */\n    const typeofPage = getTypeof(page);\n    if (page && typeofPage !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.page\" argument must be of type number, got: <${typeofPage}> ${page}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetPartsResponse}.Results' array.\n *\n * @memberof module:api/actions/GetParts\n * @alias GetPartsResults\n */\nexport type GetPartsResults = {\n  CoverLetterURL: string;\n  LetterDate: string;\n  ManufacturerId: number;\n  ManufacturerName: string;\n  ModelYearFrom: string;\n  ModelYearTo: string;\n  Name: string;\n  Type: string;\n  URL: string;\n};\n\n/**\n * Type representing the complete response returned by the GetParts API Action.\n *\n * @memberof module:api/actions/GetParts\n * @alias GetPartsResponse\n */\nexport type GetPartsResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetPartsResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["GetParts","Fetch","constructor","userConfig","super","params","type","fromDate","toDate","page","typeofParams","getTypeof","Promise","reject","Error","typeofType","typeofFromDate","typeofToDate","typeofPage","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAAiBC,EAC5BC,YAAYC,GACVC,MAAMD,GAkBFH,SAASK,4CAMb,MAEMC,EAA2BD,MAAAA,SAAAA,EAAQC,KACnCC,EAA+BF,MAAAA,SAAAA,EAAQE,SACvCC,EAA6BH,MAAAA,SAAAA,EAAQG,OACrCC,EAA2BJ,MAAAA,SAAAA,EAAQI,KAGnCC,EAAeC,EAAUN,GAC/B,GAAIA,GAA2B,WAAjBK,EACZ,OAAOE,QAAQC,OACb,IAAIC,MACF,6DAA8DJ,MAAiBL,MAMrF,MAAMU,EAAaJ,EAAUL,GAC7B,GAAIA,GAAuB,WAAfS,EACV,OAAOH,QAAQC,OACb,IAAIC,MACF,kEAAmEC,MAAeT,MAMxF,MAAMU,EAAiBL,EAAUJ,GACjC,GAAIA,GAA+B,WAAnBS,EACd,OAAOJ,QAAQC,OACb,IAAIC,MACF,sEAAuEE,MAAmBT,MAMhG,MAAMU,EAAeN,EAAUH,GAC/B,GAAIA,GAA2B,WAAjBS,EACZ,OAAOL,QAAQC,OACb,IAAIC,MACF,oEAAqEG,MAAiBT,MAM5F,MAAMU,EAAaP,EAAUF,GAC7B,GAAIA,GAAuB,WAAfS,EACV,OAAON,QAAQC,OACb,IAAIC,MACF,kEAAmEI,MAAeT,MAMxF,MAAMU,QAAoBC,KAAKC,iBAAiBhB,GAAQiB,OAAOC,GAC7DX,QAAQC,OACN,IAAIC,MAAM,0CAA2CS,QAKnDC,EAAM,GAAGJ,KAAKK,mBAAoBN,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,MAAMC,GAAaA,IACnBN,OAAOC,GACNX,QAAQC,OAAO,IAAIC,MAAM,gCAAiCS"}