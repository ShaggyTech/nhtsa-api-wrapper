{"version":3,"file":"GetEquipmentPlantCodes.js","sources":["../../src/api/actions/GetEquipmentPlantCodes.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetEquipmentPlantCodes\r\n * @category Actions\r\n * @description GetEquipmentPlantCodes NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetEquipmentPlantCodes](module-api_actions_GetEquipmentPlantCodes.GetEquipmentPlantCodes.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetEquipmentPlantCodesResponse](#GetEquipmentPlantCodesResponse)\r\n * > - Type: [GetEquipmentPlantCodesResults](#GetEquipmentPlantCodesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */,\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetEquipmentPlantCodes extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * Returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\r\n   *\r\n   * `params.year`:\r\n   *  - Only years >= 2016 are supported\r\n   *\r\n   * `params.equipmentType`:\r\n   *  - 1 (Tires)\r\n   *  - 3 (Brake Hoses)\r\n   *  - 13 (Glazing)\r\n   *  - 16 (Retread)\r\n   *\r\n   * `params.reportType`:\r\n   *  - 'New' (The Equipment Plant Code was assigned during the selected year).\r\n   *  - 'Updated' (The Equipment Plant data was modified during the selected year).\r\n   *  - 'Closed' (The Equipment Plant is no longer Active).\r\n   *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed)).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   * @param {number} params.equipmentType - Number equal to 1, 3, 13, or 16.\r\n   * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All'.\r\n   * @returns {(Promise<GetEquipmentPlantCodesResponse>)} Api Response object.\r\n   */\r\n  public async GetEquipmentPlantCodes(params: {\r\n    year: number;\r\n    equipmentType: 1 | 3 | 13 | 16;\r\n    reportType: 'New' | 'Updated' | 'Closed' | 'All';\r\n  }): Promise<GetEquipmentPlantCodesResponse> {\r\n    const action = 'GetEquipmentPlantCodes';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofEquipmentType = getTypeof(params.equipmentType);\r\n    if (typeofEquipmentType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.equipmentType\" argument is required and must be of type number, got: ` +\r\n            `<${typeofEquipmentType}> ${params.equipmentType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofReportType = getTypeof(params.reportType);\r\n    if (typeofReportType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.reportType\" argument is required and must be of type string, got: ` +\r\n            `<${typeofReportType}> ${params.reportType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch((err) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then((response) => response)\r\n      .catch((err) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetEquipmentPlantCodesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResults\r\n */\r\nexport type GetEquipmentPlantCodesResults = {\r\n  Address: string;\r\n  City: string;\r\n  Country: string;\r\n  DOTCode: string;\r\n  Name: string;\r\n  OldDotCode: string;\r\n  PostalCode: string;\r\n  StateProvince: string;\r\n  Status: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetEquipmentPlantCodes API Action.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResponse\r\n */\r\nexport type GetEquipmentPlantCodesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetEquipmentPlantCodesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["GetEquipmentPlantCodes","Fetch","[object Object]","userConfig","super","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofYear","year","typeofEquipmentType","equipmentType","typeofReportType","reportType","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAA+BC,EAC1CC,YAAYC,GACVC,MAAMD,GA4BKD,uBAAuBG,4CAKlC,MAAMC,EAAS,yBAGTC,EAAeC,EAAUH,GAC/B,GAAqB,WAAjBE,EACF,OAAOE,QAAQC,OACb,IAAIC,MAEA,2EAAIJ,MAAiBF,MAK7B,MAAMO,EAAaJ,EAAUH,EAAOQ,MACpC,GAAmB,WAAfD,EACF,OAAOH,QAAQC,OACb,IAAIC,MAEA,gGAAIC,MAAeP,EAAOQ,SAKlC,MAAMC,EAAsBN,EAAUH,EAAOU,eAC7C,GAA4B,WAAxBD,EACF,OAAOL,QAAQC,OACb,IAAIC,MAEA,yGAAIG,MAAwBT,EAAOU,kBAK3C,MAAMC,EAAmBR,EAAUH,EAAOY,YAC1C,GAAyB,WAArBD,EACF,OAAOP,QAAQC,OACb,IAAIC,MAEA,sGAAIK,MAAqBX,EAAOY,eAMxC,MAAMC,QAAoBC,KAAKC,iBAAiBf,GAAQgB,MAAOC,GAC7Db,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCgB,OAKnDC,EAAM,GAAGJ,KAAKK,WAAWlB,IAASY,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,KAAMC,GAAaA,GACnBN,MAAOC,GACNb,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8BgB"}