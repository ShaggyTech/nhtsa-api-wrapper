{"version":3,"file":"GetModelsForMakeIdYear.js","sources":["../../src/api/actions/GetModelsForMakeIdYear.ts"],"sourcesContent":["/**\n * @module api/actions/GetModelsForMakeIdYear\n * @category Actions\n * @description GetModelsForMakeIdYear NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetModelsForMakeIdYear](module-api_actions_GetModelsForMakeIdYear.GetModelsForMakeIdYear.html)\n * >\n * > **Types**\n * > - Type: [GetModelsForMakeIdYearResponse](#GetModelsForMakeIdYearResponse)\n * > - Type: [GetModelsForMakeIdYearResults](#GetModelsForMakeIdYearResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetModelsForMakeIdYear extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns the Models in the vPIC dataset for a specified Model Year\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\n   *   - `params.makeId` is a number and is a required query parameter.\n   *\n   * A minimum of one of the following are required (or a combination of both):\n   *   - `params.modelYear` is a number (greater than 1995)\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.makeId - Make ID to search.\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\n   * @returns {(Promise<GetModelsForMakeIdYearResponse>)} Api Response object.\n   */\n  async GetModelsForMakeIdYear(params: {\n    makeId: number;\n    modelYear?: number;\n    vehicleType?: string;\n  }): Promise<GetModelsForMakeIdYearResponse> {\n    const action = 'GetModelsForMakeIdYear';\n\n    const makeId: number = params?.makeId;\n    const modelYear: number | undefined = params?.modelYear;\n    const vehicleType: string | undefined = params?.vehicleType;\n\n    /* Valid params object */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n    /* Required makeId param of type number */\n    const typeofMakeId = getTypeof(makeId);\n    if (typeofMakeId !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.makeId\" argument is required and must be of type number, got: ` +\n            `<${typeofMakeId}> ${makeId}`\n        )\n      );\n    }\n    /* At least one of modelYear or vehicleType params is required */\n    if (!modelYear && !vehicleType) {\n      return Promise.reject(\n        new Error(\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\n            `${modelYear} | ${vehicleType}`\n        )\n      );\n    }\n    /* valid modelYear param of type number */\n    const typeofModelYear = getTypeof(modelYear);\n    if (modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\n            `<${typeofModelYear}> ${modelYear}`\n        )\n      );\n    }\n    /* valid vehicleType param of type string */\n    const typeofVehicleType = getTypeof(vehicleType);\n    if (vehicleType && typeofVehicleType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\n            `<${typeofVehicleType}> ${vehicleType}`\n        )\n      );\n    }\n\n    /* Beginning of the the actionUrl */\n    let actionUrl = `${action}/makeId/${makeId}/`;\n\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\n    if (modelYear && vehicleType) {\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\n    } else if (modelYear) {\n      actionUrl += `modelYear/${modelYear}`;\n    } else {\n      actionUrl += `vehicleType/${vehicleType}`;\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdYearResponse}.Results' array.\n *\n * @memberof module:api/actions/GetModelsForMakeIdYear\n * @alias GetModelsForMakeIdYearResults\n */\nexport type GetModelsForMakeIdYearResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Model_ID: number;\n  Model_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetModelsForMakeIdYear API Action.\n *\n * @memberof module:api/actions/GetModelsForMakeIdYear\n * @alias GetModelsForMakeIdYearResponse\n */\nexport type GetModelsForMakeIdYearResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetModelsForMakeIdYearResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["GetModelsForMakeIdYear","Fetch","constructor","userConfig","super","params","action","makeId","modelYear","vehicleType","typeofParams","getTypeof","Promise","reject","Error","typeofMakeId","typeofModelYear","typeofVehicleType","actionUrl","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAA+BC,EAC1CC,YAAYC,GACVC,MAAMD,GAoBFH,uBAAuBK,4CAK3B,MAAMC,EAAS,yBAETC,EAAiBF,MAAAA,SAAAA,EAAQE,OACzBC,EAAgCH,MAAAA,SAAAA,EAAQG,UACxCC,EAAkCJ,MAAAA,SAAAA,EAAQI,YAG1CC,EAAeC,EAAUN,GAC/B,GAAqB,WAAjBK,EACF,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGR,sDACGI,MAAiBL,MAK7B,MAAMU,EAAeJ,EAAUJ,GAC/B,GAAqB,WAAjBQ,EACF,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGR,6EACGS,MAAiBR,MAK7B,IAAKC,IAAcC,EACjB,OAAOG,QAAQC,OACb,IAAIC,MACF,GAAGR,iFACEE,OAAeC,MAK1B,MAAMO,EAAkBL,EAAUH,GAClC,GAAIA,GAAiC,WAApBQ,EACf,OAAOJ,QAAQC,OACb,IAAIC,MACF,GAAGR,uDACGU,MAAoBR,MAKhC,MAAMS,EAAoBN,EAAUF,GACpC,GAAIA,GAAqC,WAAtBQ,EACjB,OAAOL,QAAQC,OACb,IAAIC,MACF,GAAGR,yDACGW,MAAsBR,MAMlC,IAAIS,EAAY,GAAGZ,YAAiBC,KAIlCW,GADEV,GAAaC,EACF,aAAaD,iBAAyBC,IAC1CD,EACI,aAAaA,IAEb,eAAeC,IAI9B,MAAMU,QAAoBC,KAAKC,mBAAmBC,OAAOC,GACvDX,QAAQC,OACN,IAAIC,MAAM,GAAGR,mCAAwCiB,QAKnDC,EAAM,GAAGJ,KAAKK,WAAWP,IAAYC,IAG3C,aAAaC,KAAKM,IAAIF,GACnBG,MAAMC,GAAaA,IACnBN,OAAOC,GACNX,QAAQC,OAAO,IAAIC,MAAM,GAAGR,yBAA8BiB"}