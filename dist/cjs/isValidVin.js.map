{"version":3,"file":"isValidVin.js","sources":["../../src/utils/isValidVin.ts"],"sourcesContent":["/**\n * @module utils/isValidVin\n * @category Utils\n */\n\n/*\n * There will need to be some way to translate vin digits that are alphabetic\n * into their number value in the VIN algorithm transliteration table.\n * Later, during the creation of the checksum variable, those digits will be\n * multiplied against their corresponding weight (by index) in the WEIGHTS_ARRAY.\n * This transliteration table is a key part of the VIN validation algorithm.\n */\nconst TRANSLITERATION_TABLE: Record<string, number> = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4,\n  E: 5,\n  F: 6,\n  G: 7,\n  H: 8,\n  J: 1,\n  K: 2,\n  L: 3,\n  M: 4,\n  N: 5,\n  P: 7,\n  R: 9,\n  S: 2,\n  T: 3,\n  U: 4,\n  V: 5,\n  W: 6,\n  X: 7,\n  Y: 8,\n  Z: 9,\n};\n\n/*\n * Later, during the creation of the 'checksum' variable, these weights will be\n * multiplied by the value of their mirrored index vin digits.\n * The array index of each weight corresponds to the same index of each\n * digit in the 'vin'.\n */\nconst WEIGHTS_ARRAY: number[] = [\n  8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2,\n];\n\n/**\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\n *\n * @param {string} vin - Vehicle Identification Number.\n * @returns {boolean} True for a valid VIN, false for an invalid VIN.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const isValid = NHTSA.isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n * @example <caption>When loaded as a module</caption>\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\n * const isValid = isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n */\nexport function isValidVin(vin: string): boolean {\n  /* A valid VIN must be a string and is always exactly 17 digits */\n  if (typeof vin !== 'string' || vin.length != 17) {\n    return false;\n  }\n\n  /* Normalize the vin to all uppercase letters */\n  vin = vin.toUpperCase();\n\n  /* split the vin digits into an array */\n  const vinArray: string[] = vin.split('');\n\n  /* checkDigit will be tested against the checkSum later */\n  const checkDigit: string = vinArray[8];\n\n  /*\n   * In a valid VIN, the checkDigit can either be:\n   * a number, 0-9 inclusive OR the character 'X'\n   */\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\n    return false;\n  }\n\n  /*\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\n   * to be converted as such.\n   */\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit);\n\n  /*\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\n   * into numbers, using the TRANSLITERATION_TABLE.\n   * Then these numbers are multiplied against their corresponding weight\n   * in the WEIGHTS_ARRAY, matched by index position.\n   * All 17 of those digitValues are then added together and divided by 11.\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\n   */\n  const checksum: number =\n    vinArray\n      .map((digit: string, index: number) => {\n        let digitValue: number;\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\n        isNaN(parseInt(digit))\n          ? (digitValue = TRANSLITERATION_TABLE[digit])\n          : (digitValue = parseInt(digit));\n\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\n        const weight: number = WEIGHTS_ARRAY[index];\n\n        /* The final step for each digit is to multiply the digit by it's corresponding weight */\n        return digitValue * weight;\n      })\n      /* Finally, get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\n      .reduce((acc, currValue) => acc + currValue, 0) % 11;\n\n  /*\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\n   * we return true, otherwise the VIN is invalid and we return false.\n   */\n  return checksum === checkValue;\n}\n"],"names":[],"mappings":";;;;AAAA;;;;AAKA;;;;;;;AAOA,MAAM,qBAAqB,GAA2B;IACpD,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;CACL,CAAC;AAEF;;;;;;AAMA,MAAM,aAAa,GAAa;IAC9B,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;CACnD,CAAC;AAEF;;;;;;;;;;;;;;;;;;SAkBgB,UAAU,CAAC,GAAW;;IAEpC,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,MAAM,IAAI,EAAE,EAAE;QAC/C,OAAO,KAAK,CAAC;KACd;;IAGD,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;;IAGxB,MAAM,QAAQ,GAAa,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;;IAGzC,MAAM,UAAU,GAAW,QAAQ,CAAC,CAAC,CAAC,CAAC;;;;;IAMvC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,UAAU,KAAK,GAAG,EAAE;QACrD,OAAO,KAAK,CAAC;KACd;;;;;;IAOD,MAAM,UAAU,GAAW,UAAU,KAAK,GAAG,GAAG,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;;;;;;;;;IAU1E,MAAM,QAAQ,GACZ,QAAQ;SACL,GAAG,CAAC,CAAC,KAAa,EAAE,KAAa;QAChC,IAAI,UAAkB,CAAC;;QAEvB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;eACjB,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC;eACzC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;QAGnC,MAAM,MAAM,GAAW,aAAa,CAAC,KAAK,CAAC,CAAC;;QAG5C,OAAO,UAAU,GAAG,MAAM,CAAC;KAC5B,CAAC;;SAED,MAAM,CAAC,CAAC,GAAG,EAAE,SAAS,KAAK,GAAG,GAAG,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;;;;;;IAOzD,OAAO,QAAQ,KAAK,UAAU,CAAC;AACjC;;;;"}