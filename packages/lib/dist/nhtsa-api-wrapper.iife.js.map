{"version":3,"file":"nhtsa-api-wrapper.iife.js","sources":["../src/utils/argHandler.ts","../src/utils/errorHandler.ts","../src/utils/getTypeof.ts","../src/utils/isValidVin.ts","../src/constants.ts","../src/utils/useFetch.ts","../src/utils/useQueryString.ts","../src/api/endpoints/DecodeVin.ts","../src/api/endpoints/DecodeVinExtended.ts","../src/api/endpoints/DecodeVinValues.ts","../src/api/endpoints/DecodeVinValuesBatch.ts","../src/api/endpoints/DecodeVinValuesExtended.ts","../src/api/endpoints/DecodeWMI.ts","../src/api/endpoints/GetAllMakes.ts","../src/api/endpoints/GetAllManufacturers.ts","../src/api/endpoints/GetCanadianVehicleSpecifications.ts","../src/api/endpoints/GetEquipmentPlantCodes.ts","../src/api/endpoints/GetMakeForManufacturer.ts","../src/api/endpoints/GetMakesForManufacturerAndYear.ts","../src/api/endpoints/GetMakesForVehicleType.ts","../src/api/endpoints/GetManufacturerDetails.ts","../src/api/endpoints/GetModelsForMake.ts","../src/api/endpoints/GetModelsForMakeId.ts","../src/api/endpoints/GetModelsForMakeIdYear.ts","../src/api/endpoints/GetModelsForMakeYear.ts","../src/api/endpoints/GetParts.ts","../src/api/endpoints/GetVehicleTypesForMake.ts","../src/api/endpoints/GetVehicleTypesForMakeId.ts","../src/api/endpoints/GetVehicleVariableList.ts","../src/api/endpoints/GetVehicleVariableValuesList.ts","../src/api/endpoints/GetWMIsForManufacturer.ts"],"sourcesContent":["import { getTypeof } from '../utils'\nimport type { AtLeastOne } from '../types'\n\nexport type IArgToValidate = {\n  name: string\n  value: unknown\n} & AtLeastOne<{\n  required?: boolean\n  types?: string[]\n}>\n\nexport const catchInvalidArguments = ({\n  args,\n  mode = 'default',\n}: {\n  args: IArgToValidate[]\n  mode?: 'default' | 'atLeast'\n}) => {\n  if (getTypeof(args) !== 'array' && !args.length) {\n    throw Error(\n      `catchInvalidArguments requires \"args\" that must be an array of IArgToValidate objects`\n    )\n  }\n\n  if (mode === 'default') {\n    args.forEach((arg) => {\n      validateArgument(arg)\n    })\n  } else if (mode === 'atLeast') {\n    const providedArg = args.find((arg) => !!arg.value)\n    if (!providedArg) {\n      throw Error(\n        `must provide at least one of the following arguments: ${args\n          .map((arg) => arg.name)\n          .join(', ')}`\n      )\n    }\n  }\n}\n\nexport const validateArgument = ({\n  name,\n  value,\n  required,\n  types,\n  errorMode = 'error',\n}: IArgToValidate & { errorMode?: 'error' | 'boolean' }): boolean => {\n  if (getTypeof(name) !== 'string') {\n    throw Error(`'name', is required and must be of type string`)\n  }\n\n  let error = ''\n  const typeofValue = getTypeof(value)\n  const errorPrepend = `error validating argument named \"${name}\",`\n  const errorAppend = `received value: ${value} - of type: <${typeofValue}>`\n\n  if (types && getTypeof(types) !== 'array' && !types.length) {\n    throw Error(`${errorPrepend} 'types' must be an array of strings`)\n  }\n\n  /* ex: if types = ['string', 'number'] then you'll get '<string | number>' */\n  const joinedTypes = types ? `<${types.join(' | ')}>` : ''\n\n  /* argument validation logic */\n  if (required && !types) {\n    if (!value) {\n      error = `${errorPrepend} is required, ${errorAppend}`\n    }\n  } else if (types && !required) {\n    /* if value is not defined and is not required then there should be no need to validate the type */\n    if (value !== undefined && !types.includes(typeofValue)) {\n      error = `${errorPrepend} must be of type(s) ${joinedTypes}, ${errorAppend}`\n    }\n  } else if (required && types) {\n    if (!value || !types.includes(typeofValue)) {\n      error = `${errorPrepend} is required and must be of type(s) ${joinedTypes}, ${errorAppend}`\n    }\n  }\n\n  if (error.length) {\n    if (errorMode === 'boolean') return false\n    else throw Error(error)\n  }\n\n  return true\n}\n","import { getTypeof } from '.'\n\nexport const isError = (error: unknown): boolean => {\n  return getTypeof(error) === 'error'\n}\n\nexport const handleError = (error: unknown): Error => {\n  let message = 'an unknown error occurred.'\n  if (isError(error)) {\n    return error as Error\n  }\n  if (getTypeof(error) === 'string') {\n    message = error as string\n  }\n  return Error(message)\n}\n\nexport const rejectWithError = async (error: unknown): Promise<never> => {\n  if (!isError(error)) {\n    error = handleError(error)\n  }\n  return Promise.reject(error)\n}\n","/**\n * @module utils/getTypeof\n * @category Utils\n */\n\n/**\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\n *\n * Why? Because `typeof` is not reliable for all types of values.\n *\n * Object.prototype.toString gives more accurate results in the case someone has used an object wrapper\n * for primitive data types such as `new Number()` or `new String()`.\n * It will also accurately recognize any Error types, Error, TypeError, etc., as 'error'.\n *\n * @param {any} value - Any kind of value (string, object, array, function, etc).\n *\n * @returns {string} - Type of value, normalized to a lowercase string.\n */\nexport const getTypeof = (value: unknown): string => {\n  const toString: string = Object.prototype.toString\n    .call(value)\n    .toLowerCase() /* ex: => '[object string]' or '[object array], etc. */\n\n  /* return only the type, ex: 'string' or 'array' */\n  return toString.slice(8, toString.length - 1)\n}\n","/**\n * @module utils/isValidVin\n * @category Utils\n */\n\n/*\n * There will need to be some way to translate vin digits that are alphabetic\n * into their number value in the VIN algorithm transliteration table.\n * Later, during the creation of the checksum variable, those digits will be\n * multiplied against their corresponding weight (by index) in the WEIGHTS_ARRAY.\n * This transliteration table is a key part of the VIN validation algorithm.\n */\nconst TRANSLITERATION_TABLE: Record<string, number> = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4,\n  E: 5,\n  F: 6,\n  G: 7,\n  H: 8,\n  J: 1,\n  K: 2,\n  L: 3,\n  M: 4,\n  N: 5,\n  P: 7,\n  R: 9,\n  S: 2,\n  T: 3,\n  U: 4,\n  V: 5,\n  W: 6,\n  X: 7,\n  Y: 8,\n  Z: 9,\n}\n\n/*\n * Later, during the creation of the 'checksum' variable, these weights will be\n * multiplied by the value of their mirrored index vin digits.\n * The array index of each weight corresponds to the same index of each\n * digit in the 'vin'.\n */\nconst WEIGHTS_ARRAY: number[] = [\n  8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2,\n]\n\n/**\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\n *\n * @param {string} vin - Vehicle Identification Number.\n * @returns {boolean} True for a valid VIN, false for an invalid VIN.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const isValid = NHTSA.isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n * @example <caption>When loaded as a module</caption>\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\n * const isValid = isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n */\nexport function isValidVin(vin: string): boolean {\n  /* A valid VIN must be a string and is always exactly 17 digits */\n  if (typeof vin !== 'string' || vin.length != 17) {\n    return false\n  }\n\n  /* Normalize the vin to all uppercase letters */\n  vin = vin.toUpperCase()\n\n  /* split the vin digits into an array */\n  const vinArray: string[] = vin.split('')\n\n  /* checkDigit will be tested against the checkSum later */\n  const checkDigit: string = vinArray[8]\n\n  /*\n   * In a valid VIN, the checkDigit can either be:\n   * a number, 0-9 inclusive OR the character 'X'\n   */\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\n    return false\n  }\n\n  /*\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\n   * to be converted as such.\n   */\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit)\n\n  /*\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\n   * into numbers, using the TRANSLITERATION_TABLE.\n   * Then these numbers are multiplied against their corresponding weight\n   * in the WEIGHTS_ARRAY, matched by index position.\n   * All 17 of those digitValues are then added together and divided by 11.\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\n   */\n  const checksum: number =\n    vinArray\n      .map((digit: string, index: number) => {\n        let digitValue: number\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\n        isNaN(parseInt(digit))\n          ? (digitValue = TRANSLITERATION_TABLE[digit])\n          : (digitValue = parseInt(digit))\n\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\n        const weight: number = WEIGHTS_ARRAY[index]\n\n        /* The final step for each digit is to multiply the digit by it's corresponding weight */\n        return digitValue * weight\n      })\n      /* Finally, get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\n      .reduce((acc, currValue) => acc + currValue, 0) % 11\n\n  /*\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\n   * we return true, otherwise the VIN is invalid and we return false.\n   */\n  return checksum === checkValue\n}\n","export const NHTSA_BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles'\nexport const NHTSA_RESPONSE_FORMAT = 'json'\n","import { createQueryString, rejectWithError, catchInvalidArguments } from '.'\nimport { NHTSA_BASE_URL, NHTSA_RESPONSE_FORMAT } from '../constants'\nimport type { QueryStringParams, NhtsaResponse } from '../types'\n\n/**\n * `useFetch` is a composable function that returns an object containing methods for making HTTP\n * requests to the NHTSA API. All request methods return a Promise that resolves to an object\n * containing the response data, see [NhtsaApiResponse](#TODO-LINK-TO-DOCS) type.\n *\n * The exported methods are:\n * - createUrl() - Builds the URL string and stores it in an internal instance variable\n * - get() - Makes a GET request, uses the internal url variable if no URL is provided\n * - post() - Makes a POST request, uses the internal url variable if no URL is provided\n *\n * ---\n *\n * **Important!** This composable uses the native fetch method to make requests with no polyfills\n * included. You may need to polyfill the fetch() method if you expect this package to be used in\n * older browsers or Node.js versions < 18. See root package README for more info on polyfilling\n * native fetch in your project.\n *\n * ---\n *\n * An explanation of how this composable works:\n *\n * When you call useFetch(), it returns an object containing the methods you can use to interact\n * with the NHTSA API. Each time you call useFetch(), a new instance of the composable is created\n * and returned. This means you can call useFetch() multiple times and each instance will have\n * its own internal state. This is why you must call createUrl() before making a request, so that\n * the URL is stored in the instance's internal state. For example:\n *\n * ```javascript\n * const { createUrl, get } = useFetch()\n * createUrl({...options})\n * get()\n * ```\n *\n * In the example, a url is stored as private variable inside the composable instance created by\n * calling createFetch(). This is done so that the URL can be accessed by all methods after setting\n * it when using the same instance. This is also why, in the example, the URL is not passed to the\n * get() method.\n *\n * After the first createUrl(), any of the other methods in the same instance can access the\n * stored URL. This means you can call createUrl() multiple times from the same instance and it\n * will overwrite the previous URL, then you can make a new get() call using the newest URL.\n *\n * Note that createUrl() is not called automatically by any of the other methods. You must call it\n * yourself before making a request or provide get and post methods with the pre-built URL as an\n * argument. If you call get() or post() without first calling createUrl() or providing the URL as\n * an argument, an error will be thrown. For example:\n *\n * ```javascript\n * const { get } = useFetch()\n * get() // throws an error, URL is undefined because createUrl() was never called first\n * ```\n *\n * All composable methods will also set the internal URL variable if you pass them a URL\n * string. This will always overwrite the current URL stored in the composable instance and\n * immediately make the request with the new URL. The only exception to this is when providing\n * option of `saveUrl: false` to instance methods, see _Options_ section below for more info.\n *\n * For example you could do this if you don't need to build the URL first:\n *\n * ```javascript\n * const { get, post } = useFetch()\n * get('https://vpic.nhtsa.dot.gov/api/vehicles/GetVehicleVariableValuesList/1?format=json')\n * post('https://some.other.api.com/api/endpoint', { body: 'some data' })\n * get() // fetches 'https://some.other.api.com/api/endpoint'\n * ```\n *\n * In the example above, get uses the provided URL, saves it in the composable instance, and makes\n * the request. Then, the post method is called with a url, it uses that new URL, saves it,\n * and makes the request. Finally, the get method is called again without a URL, it uses the URL\n * saved by the preceding post method, and makes the request with that same URL.\n *\n * If you make another request with get() or post() without first calling createUrl() or providing\n * the URL as an argument, it will use the most recently stored URL value. For example:\n *\n * ```javascript\n * const { get, post, createUrl } = useFetch()\n * createUrl({...options}) // initializes and saves the first url\n * get() // uses url initialized with createUrl()\n * get() // uses same url as preceding get()\n * get('https://some.other.api.com/api/endpoint') // uses and sets a new url\n * post(undefined, { body: 'some data' }) // uses same url as preceding get()\n * get() // uses same url as two preceding requests\n * createUrl({...options}) // saves a new url\n * get() // uses url saved with preceding createUrl()\n * ```\n *\n * The above example shows how `useFetch` can be used to make multiple requests\n * with different URLs using only one instance of the composable. This is useful if you need to\n * make multiple requests to the same API with different endpoints or query string parameters.\n *\n * ---\n *\n * ### Options\n *\n * All of the above is default behavior, but you can also pass option `{ saveUrl: false }` to all\n * composable methods to prevent them from saving the URL in the composable instance. This is\n * useful if you need to make a request with a URL and you don't want to save or overwrite the\n * current URL stored in the composable instance.\n *\n * In this example all of the code is using the same composable instance:\n *\n * ```javascript\n * const { get, post, createUrl } = useFetch()\n *\n * // save url in a local variable only, not in the composable instance\n * const url = createUrl({ ...options, saveUrl: false })\n * get(url, { saveUrl: false })\n * get() // Error, url still undefined\n *\n * // These work as expected but the url is not saved in the composable instance\n * get('https://some.other.api.com/api/endpoint', { saveUrl: false })\n * post('https://some.other.api.com/api/endpoint', {\n *   body: 'some data',\n *   saveUrl: false\n * })\n *\n * // this has no effect, the url is never saved nor used\n * createUrl({ ...options, saveUrl: false })\n *\n * get() // Error, url still undefined\n * get(url) // uses url saved in the local variable above and saves it in the composable instance\n * get() // uses url saved in the composable instance during the preceding get() call\n * ```\n */\nexport const useFetch = () => {\n  /**\n   * Private variable to store the URL string in the composable instance\n   * @private\n   * */\n  let _url: string\n\n  /**\n   * Builds the URL string and sets it as a private variable if saveUrl is true.\n   *\n   * @param options Object containing the following properties:\n   * @param {string} options.endpointName - Name of the endpoint to use in the URL (required)\n   * @param {boolean} [options.includeQueryString=true] - Whether to include the query string in\n   * the built URL string (default: true). Set to false if making a POST request.\n   * @param {string} [options.path=''] - Path to append to the URL (default: '')\n   * @param {object} [options.params] - Query string parameters to build into the URL. Default\n   * query \"format=json\" is always included unless options.includeQueryString is false.\n   * @returns {string} URL string\n   */\n  const createUrl = ({\n    endpointName,\n    allowEmptyParams = false,\n    includeQueryString = true,\n    path = '',\n    params,\n    saveUrl = true,\n  }: {\n    endpointName: string\n    allowEmptyParams?: boolean\n    includeQueryString?: boolean\n    path?: string\n    params?: QueryStringParams\n    saveUrl?: boolean\n  }): string => {\n    if (!endpointName) {\n      throw Error('Endpoint name is required to create URL string')\n    }\n\n    const queryString = includeQueryString\n      ? createQueryString(params, allowEmptyParams)\n      : ''\n\n    const url = encodeURI(\n      `${NHTSA_BASE_URL}/${endpointName}/${path}${queryString}`\n    )\n\n    if (saveUrl) {\n      _url = url\n    }\n\n    return url\n  }\n\n  /**\n   * Uses native fetch() to make a GET or POST request to the NHTSA API.\n   *\n   * When called from post(), you should set includeQueryString to false in the options object as\n   * the query string is not allowed in a POST request. In POST requests, the \"format=json\"\n   * parameter is added to the POST body string instead of in the query string. Any endpoints that\n   * require a POST request will have have to add this to end of the body string manually, before\n   * calling post() and subsequently this method.\n   *\n   * _NOTE:_ All POST requests should use the post() method of this composable, which sets specific\n   * POST fetch options before calling this method. You can pass the body for a POST request as a\n   * string in 'body' key of the options object. The NHTSA API requires the POST body to be in a\n   * specific format so it is not formatted by this function. See `DecodeVinValuesBatch` endpoint\n   * for an example of the required format of a POST body for the NHTSA API.\n   *\n   * @param options Object containing the following properties:\n   * @param {string} options.endpointName - Name of the endpoint to use in the URL (required)\n   * @param {boolean} [options.includeQueryString=true] - Whether to include the query string in\n   * the built URL string (default: true). Set to false if making a POST request.\n   * @param {string} [options.path=''] - Path to append to the URL (default: '')\n   * @param {object} [options.params] - Query string parameters to build into the URL. Default\n   * query \"format=json\" is always included unless options.includeQueryString is false.\n   * @returns {string} URL string\n   */\n  const get = async <T>(\n    url?: string,\n    options: RequestInit & { saveUrl?: boolean } = { saveUrl: true }\n  ): Promise<NhtsaResponse<T>> => {\n    url = url ?? _url\n\n    catchInvalidArguments({\n      args: [\n        {\n          name: 'url',\n          value: url,\n          required: true,\n          types: ['string'],\n        },\n        {\n          name: 'options',\n          value: options,\n          types: ['object'],\n        },\n      ],\n    })\n\n    if (options.saveUrl) {\n      _url = url\n    }\n\n    const nhtsaResponse: NhtsaResponse<T> = await fetch(url, options)\n      .then(async (response) => {\n        if (!response.ok) {\n          throw Error(`${response.status} ${response.url}`)\n        }\n\n        const contentType = response.headers.get('content-type')\n        const jsonTypes = ['application/json', 'text/json']\n        const isJson = jsonTypes.some((type) => contentType?.includes(type))\n        const responseDetails =\n          `content-type: ${contentType},` +\n          `responseStatus: ${response.status},` +\n          `responseUrl: ${response.url}`\n\n        if (!isJson) {\n          throw Error(\n            `API response is not in JSON format, got ${responseDetails}`\n          )\n        }\n\n        const data: NhtsaResponse<T> = await response.json()\n\n        if (!data) {\n          throw Error(\n            `API responded but returned no data, got ${responseDetails}`\n          )\n        }\n\n        return data\n      })\n      .catch((error: Error) => {\n        error.message = `There was an error fetching API data: ${error.message}`\n        return rejectWithError(error)\n      })\n\n    /* Return the completed ApiResponse */\n    return nhtsaResponse\n  }\n\n  const post = async <T>(\n    url?: string,\n    options: RequestInit & { saveUrl?: boolean } = { saveUrl: true }\n  ): Promise<NhtsaResponse<T>> => {\n    url = url ?? _url\n\n    catchInvalidArguments({\n      args: [\n        {\n          name: 'url',\n          value: url,\n          required: true,\n          types: ['string'],\n        },\n        {\n          name: 'options',\n          value: options,\n          types: ['object'],\n        },\n        {\n          name: 'options.body',\n          value: options,\n          types: ['string'],\n        },\n      ],\n    })\n\n    return await get(url, {\n      ...options,\n      method: 'POST',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n      body: encodeURI(`${options?.body}&format=${NHTSA_RESPONSE_FORMAT}`),\n    })\n  }\n\n  return {\n    createUrl,\n    get,\n    post,\n  }\n}\n","/**\n * @module utils/createQueryString\n * @category Internal Utility Functions\n */\n\nimport { NHTSA_RESPONSE_FORMAT } from '../constants'\nimport { getTypeof, validateArgument } from '.'\n\n/** Valid URI component types */\nexport type QueryStringTypes = string | number | boolean\n/** Object to build the query string with */\nexport type QueryStringParams = Record<string, QueryStringTypes>\n/** Object returned by encodeQueryStringParams() */\nexport type QueryStringParamsEncoded<T> = { [key in keyof T]: string }\n\n/**\n * Utility function to generate a query string conforming to URI component standards. Takes an an\n * optional object of search parameters and returns an encoded query string.\n *\n * The paramater { format: 'json' } is hardcoded and cannot be overridden, this package provides\n * no support for CSV or XML formats at this time. The default query string will be \"?format=json\"\n * even if no `params` are provided by user.\n *\n * - Ignores parameters that are not strings, numbers, or booleans, and also ignores empty strings\n *   by default.\n * - If first argument is not an object then it will be ignored.\n * - If second argument `allowEmptyParams` is set to `true`, the function will include keys with\n *   empty string values, e.g. 'emptyKey='\n *\n * @param {QueryStringParams} params - An object of search parameters to be converted to a query string.\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to include keys with empty string values, e.g. 'emptyKey='.\n * @returns {string} - A query string of search parameters for use in a final fetch URL.\n */\nexport const createQueryString = (\n  params?: QueryStringParams,\n  allowEmptyParams = false\n): string => {\n  /* Static (hardcoded) params are 'format=json' */\n  const staticParams = { format: NHTSA_RESPONSE_FORMAT }\n\n  /* Merge with valid user params but override with static params */\n  const _params =\n    getTypeof(params) === 'object'\n      ? { ...params, ...staticParams }\n      : staticParams\n\n  /* Create query string from params */\n  const queryString =\n    '?' +\n    Object.entries(encodeQueryStringParams(_params))\n      .map(([key, value], index, array) => {\n        return value.length || (allowEmptyParams && value === '')\n          ? `${key}=${value}${index < array.length - 1 ? '&' : ''}`\n          : ''\n      })\n      .join('')\n\n  /* default: ?format=json */\n  return queryString\n}\n\n/**\n * Utility function to perform URI component encoding on all values in an object, for use in URL query strings.\n *\n * In it's current implementation, this function assumes that invalid types have already been filtered out, and that all values are valid.\n * If you need to be sure that all keys are present in the returned object, you can use the `validateArgument()` function\n * to check the types of all values are valid before calling this function.\n *\n * - Returns an object of valid URI encoded parameters with same keys as the original object.\n * - Will silently filter out parameters with values that are not type string, number, or boolean.\n *   It filters invalid key/values so that encodeURIComponent() does not throw an error.\n *\n * @param {QueryStringParams} params - An object of search parameters to be encoded.\n * @returns {QueryStringParamsEncoded} - A new object of same keys as the original object with values converted to URI component strings.\n *   Any keys with values not a string, number, or boolean are filtered out of final object.\n */\nexport const encodeQueryStringParams = <T extends QueryStringParams>(\n  params: T\n): QueryStringParamsEncoded<T> => {\n  return Object.entries(params)\n    .filter(([key, value]) =>\n      validateArgument({\n        name: key,\n        types: ['string', 'number', 'boolean'],\n        value,\n        errorMode: 'boolean',\n      })\n    )\n    .reduce((acc, [key, value]) => {\n      /* can expect only strings, numbers, and booleans after filtering */\n      acc[key as keyof T] = encodeURIComponent(value)\n      return acc\n    }, {} as QueryStringParamsEncoded<T>)\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeVin` decodes a Vehicle Identification Number (VIN) and returns useful information about\n * the vehicle.\n *\n * In the return object, `Results` will be an array with multiple objects containing 'key:value'\n * results. Each object will contain:\n * - \"Variable\" (variable name) and \"Value\" (variable value)\n * - \"VariableID\" and \"ValueID\" (unique ID associated with the variable/value)\n * - In case of text variables, the \"ValueID\" is not applicable\n *\n * Providing `params.modelYear` allows for the decoding to specifically be done in the current, or\n * older (pre-1980), model year ranges. It is recommended to always provide `params.modelYear` if\n * the model year is known at the time of decoding, but it is not required.\n *\n * This endpoint also supports partial VIN decoding (VINs that are less than 17 characters).\n *   - Ex: 5UXWX7C5*BA\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a `*` could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *\n * NOTE: Unless you have a specific need to obtain \"ValueID\" or \"VariableID\" for each variable\n * in a decoded VIN, this package recommends using one of the `DecodeVinValues*` endpoints\n * instead. This is because they will return a single flat format object of key/value pairs,\n * where key is the name of the variable. `DecodeVinValuesBatch` will return multple flat format\n * objects, one for each VIN you search. The flat format is more efficient and easier to work with\n * as you won't have to iterate through a bunch of objects just to get all variable names/values.\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinResults>>)} - Api Response object\n */\nexport const DecodeVin = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinResults>> => {\n  const endpointName = 'DecodeVin'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, path: vin, params })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects returned in the NhtsaResponse 'Results' array of DecodeVin endpoint\n *\n * @alias DecodeVinResults\n */\nexport type DecodeVinResults = {\n  Value: string | null\n  ValueId: string | null\n  Variable: string\n  VariableId: number\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeVinExtended` decodes a Vehicle Identification Number (VIN) and returns useful information\n * about the vehicle.\n *\n * This endpoint is similar to `DecodeVin` but returns additional information on variables related\n * to other NHTSA programs like the\n * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa).\n *\n * In the return object, `Results` will be an array with multiple objects containing 'key:value'\n * results. Each object will contain:\n * - \"Variable\" (variable name) and \"Value\" (variable value)\n * - \"VariableID\" and \"ValueID\" (unique ID associated with the variable/value)\n * - In case of text variables, the \"ValueID\" is not applicable\n *\n * Providing `params.modelYear` allows for the decoding to specifically be done in the current, or\n * older (pre-1980), model year ranges. It is recommended to always provide `params.modelYear` if\n * the model year is known at the time of decoding, but it is not required.\n *\n * This endpoint also supports partial VIN decoding (VINs that are less than 17 characters).\n *   - Ex: 5UXWX7C5*BA\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a `*` could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *\n * NOTE: Unless you have a specific need to obtain `ValueID` or `VariableID` for each variable\n * in a decoded VIN, this package recommends using one of the `DecodeVinValues*` endpoints\n * instead. This is because they will return a single flat format object of key/value pairs,\n * where key is the name of the variable. `DecodeVinValuesBatch` will return multple flat format\n * objects, one for each VIN you search. The flat format is more efficient and easier to work with\n * as you won't have to iterate through a bunch of objects just to get all variable names/values.\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinExtendedResults>>)} - Api Response object\n */\nexport const DecodeVinExtended = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinExtendedResults>> => {\n  const endpointName = 'DecodeVinExtended'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, path: vin, params })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects returned in the NhtsaResponse 'Results' array of DecodeVinExtended endpoint\n *\n * @alias DecodeVinExtendedResults\n */\nexport type DecodeVinExtendedResults = {\n  Value: string | null\n  ValueId: string | null\n  Variable: string\n  VariableId: number\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeVinValues` decodes a Vehicle Identification Number (VIN) and returns useful information\n * about the vehicle in in a _flat format_. This means the endpoint will return an array with a\n * single object of results. Each key in the object is the name of a variable.\n *\n * Providing `params.modelYear` allows for the decoding to specifically be done in the current, or\n * older (pre-1980), model year ranges. It is recommended to always provide `params.modelYear` if\n * the model year is known at the time of decoding, but it is not required.\n *\n * This endpoint also supports partial VIN decoding (VINs that are less than 17 characters).\n *   - Ex: \"5UXWX7C5*BA\"\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a `*` could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *\n * The variable names and values in the flat format object are equivalent to \"Variable\" and \"Value\"\n * keys found in objects returned from _nested format_ endpoints such as `DecodeVin` and\n * `DecodeVinExtended`.\n *\n * *NOTE:* For decoding VINs this package recommends using `DecodeVinValues*` endpoints such as\n * this one. The flat format is more efficient and easier to work with as you won't have to iterate\n * through a bunch of objects just to get all variable names/values as is the case with\n * _nested format_. Unless you need to obtain \"ValueID\" and/or \"VariableID\" for each variable in a\n * decoded VIN. In that case, you should use either `DecodeVin` or `DecodeVinExtended` endpoints to\n * obtain the values in a _nested format_ where each variable is an object containing individual\n * \"Variable\", \"Value\", \"ValueID\" and \"VariableID\" properties.\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinValuesResults>>)} Api Response object\n */\nexport const DecodeVinValues = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinValuesResults>> => {\n  const endpointName = 'DecodeVinValues'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, path: vin, params })\n\n    return await get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects returned in the NhtsaResponse 'Results' array of DecodeVinValues endpoint\n *\n * @alias DecodeVinValuesResults\n */\nexport type DecodeVinValuesResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeVinValuesBatch` decodes a batch of Vehicle Identification Numbers (VINs) and returns\n * useful information about the vehicles in in a _flat format_. This means the endpoint will return\n * an array with multiple objects of results. Each object represents a VIN from the `inputString`\n * and the key:value pairs in the objects are variables and their values for each particular VIN.\n *\n * For this particular API you just have to provide a string of VINs, `inputString`, that are\n * separated by a `;` char. You can also indicate the model year after the vin, preceded by a `,`\n * char.\n *\n * The `inputString` parameter should be in the following format:\n * - ex: `5UXWX7C5\\*BA,2011; 5YJSA3DS\\*EF`\n * - no modelYear: `vin; vin; vin`\n * - with modelYear: `vin, modelYear; vin, modelYear; vin, modelYear`\n * - mix of with/without modelYear: `vin; vin, modelYear`\n * - _vin_ and _modelYear_ are placeholders for real values in these examples\n * - all spaces between `;` and `,` are used in these examples for readability ard are optional\n * - _Max 50 VINs per batch_\n *\n * Providing the modelYear in the input string allows for the decoding to specifically be done in\n * the current, or older (pre-1980), model year ranges. It is recommended to always provide\n * the model year if it is known at the time of decoding, but it is not required.\n *\n * The variable names and values in the flat format objects are equivalent to \"Variable\" and \"Value\"\n * keys found in objects returned from _nested format_ endpoints such as `DecodeVin` and\n * `DecodeVinExtended`.\n *\n * *NOTE:* For decoding VINs this package recommends using `DecodeVinValues*` endpoints such as\n * this one. The flat format is more efficient and easier to work with as you won't have to iterate\n * through a bunch of objects just to get all variable names/values as is the case with\n * _nested format_. Unless you need to obtain \"ValueID\" and/or \"VariableID\" for each variable in a\n * decoded VIN. In that case, you should use either `DecodeVin` or `DecodeVinExtended` endpoints to\n * obtain the values in a _nested format_ where each variable is an object containing individual\n * \"Variable\", \"Value\", \"ValueID\" and \"VariableID\" properties.\n *\n * *NOTE:* This endpoint is the only one to use a POST request instead of a GET request. We want to\n * ensure that response format is always set to 'json' in all requests, even POST requests. Due to\n * the way this particular endpoint operates, we can't set the response format to 'json' in a query\n * string like every other endpoint, as POST requests do not allow query strings. Therefore, we\n * have to set the response format in the body of the request before sending it. This is performed\n * internally by the post function in `useFetch` composable but it is worth noting here.  We also\n * set `includeQueryString` to `false` in `createUrl` function here because we don't want to\n * include the default query string when building the url for this endpoint.\n *\n * @async\n * @param {string} inputString - A string of Vehicle Identification Numbers (full or partial)\n * following the format listed in the description\n * @returns {(Promise<DecodeVINValuesBatchResponse>)} - Api Response object\n */\nexport const DecodeVinValuesBatch = async (\n  inputString: string\n): Promise<NhtsaResponse<DecodeVinValuesBatchResults>> => {\n  const endpointName = 'DecodeVinValuesBatch'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'inputString',\n        value: inputString,\n        required: true,\n        types: ['string'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const body = `DATA=${inputString}`\n    const { createUrl, post } = useFetch()\n    createUrl({ endpointName, includeQueryString: false })\n\n    return post(undefined, { body })\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects returned in the NhtsaResponse 'Results' array of DecodeVinValuesBatch endpoint\n *\n * @alias DecodeVINValuesBatchResults\n */\nexport type DecodeVinValuesBatchResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeVinValuesExtended` decodes a Vehicle Identification Number (VIN) and returns useful\n * information about the vehicle in in a _flat format_. This means the endpoint will return an\n * array with a single object of results. Each key in the object is the name of a variable.\n *\n * This endpoint is similar to `DecodeVinValues` but returns additional information on variables\n * related to other NHTSA programs like\n * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n *\n * Providing `params.modelYear` allows for the decoding to specifically be done in the current, or\n * older (pre-1980), model year ranges. It is recommended to always provide `params.modelYear` if\n * the model year is known at the time of decoding, but it is not required.\n *\n * This endpoint also supports partial VIN decoding (VINs that are less than 17 characters).\n *   - Ex: \"5UXWX7C5*BA\"\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a `*` could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *\n * The variable names and values in the flat format object are equivalent to \"Variable\" and \"Value\"\n * keys found in objects returned from _nested format_ endpoints such as `DecodeVin` and\n * `DecodeVinExtended`.\n *\n * *NOTE:* For decoding VINs this package recommends using `DecodeVinValues*` endpoints such as\n * this one. The flat format is more efficient and easier to work with as you won't have to iterate\n * through a bunch of objects just to get all variable names/values as is the case with\n * _nested format_. Unless you need to obtain \"ValueID\" and/or \"VariableID\" for each variable in a\n * decoded VIN. In that case, you should use either `DecodeVin` or `DecodeVinExtended` endpoints to\n * obtain the values in a _nested format_ where each variable is an object containing individual\n * \"Variable\", \"Value\", \"ValueID\" and \"VariableID\" properties.\n *\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinExtendedResults>>)} - Api Response object\n */\nexport const DecodeVinValuesExtended = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinValuesExtendedResults>> => {\n  const endpointName = 'DecodeVinValuesExtended'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, path: vin, params })\n\n    return await get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects returned in the NhtsaResponse 'Results' array of DecodeVinValuesExtended endpoint\n *\n * @alias DecodeVinValuesExtendedResults\n */\nexport type DecodeVinValuesExtendedResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `DecodeWMI` provides information on the World Manufacturer Identifier for a specific `WMI` code.\n *\n * `WMI` may provided as either 3 characters representing VIN position 1-3 _or_ 6 characters\n * representing VIN positions 1-3 & 12-14.\n * - Examples: \"JTD\" \"1T9131\"\n *\n * A list of WMI codes can be found\n * [here](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/World_Manufacturer_Identifier_(WMI))\n * but keep in mind that not all of the listed WMIs are registered with NHTSA and therefore may not\n * be available in vPIC data sets.\n *\n * @async\n * @param {string} WMI - World Manufacturer Identifier\n * @returns {(Promise<NhtsaResponse<DecodeWMIResults>>)} - Api Response object\n */\n\nexport const DecodeWMI = async (\n  WMI: string\n): Promise<NhtsaResponse<DecodeWMIResults>> => {\n  const endpointName = 'DecodeWMI'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'WMI',\n        value: WMI,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, path: WMI })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of DecodeWMI endpoint\n *\n * @alias DecodeWMIResults\n */\nexport type DecodeWMIResults = {\n  CommonName: string\n  CreatedOn: string\n  DateAvailableToPublic: string\n  Make: string\n  ManufacturerName: string\n  ParentCompanyName: string\n  URL: string\n  UpdatedOn: string | null\n  VehicleType: string\n}\n","/* Utility Functions */\nimport { rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { NhtsaResponse } from '../../types'\n\n/**\n * `GetAllMakes` provides a list of all the Makes available in the vPIC Dataset.\n * Each object in the `Results` array represents the `Make_ID` and the `Make_Name` of\n * an individual vehicle Make.\n *\n * - FYI there are over 10,000 registered makes in the database!\n *\n * @async\n * @returns {(Promise<NhtsaResponse<GetAllMakesResults>>)} - Api Response object\n */\nexport const GetAllMakes = async (): Promise<\n  NhtsaResponse<GetAllMakesResults>\n> => {\n  const endpointName = 'GetAllMakes'\n\n  try {\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetAllMakes endpoint\n *\n * @alias GetAllMakesResults\n */\nexport type GetAllMakesResults = {\n  Make_ID: number\n  Make_Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetAllManufacturers` provides a list of all the Manufacturers available in the vPIC Dataset.\n *\n * `params.manufacturerType` is optional but allows the user to filter the list based on\n * manufacturer type. Types include 'Incomplete Vehicles', 'Completed Vehicle Manufacturer',\n * 'Incomplete Vehicle Manufacturer', 'Intermediate Manufacturer', 'Final-Stage Manufacturer',\n * 'Alterer', or any partial match of those strings.\n *\n * `params.page` is optional and used to specify (n)th page of results. Results are provided in\n * pages of 100 items.\n *\n * @async\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {string} [params.manufacturerType] - See endpoint description\n * @param {(string|number)} [params.page] - Specify page number (results returned 100 at a time)\n * @returns {(Promise<NhtsaResponse<GetAllManufacturersResults>>)} - Api Response object\n */\n\nexport const GetAllManufacturers = async (params?: {\n  manufacturerType?: string\n  page?: string | number\n}): Promise<NhtsaResponse<GetAllManufacturersResults>> => {\n  const endpointName = 'GetAllManufacturers'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'manufacturerType',\n        value: params?.manufacturerType,\n        types: ['string'],\n      },\n      {\n        name: 'page',\n        value: params?.page,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({ endpointName, params })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetAllManufacturers endpoint\n *\n * @alias GetAllManufacturersResults\n */\nexport type GetAllManufacturersResults = {\n  Country: string\n  Mfr_CommonName: string | null\n  Mfr_ID: number\n  Mfr_Name: string\n  VehicleTypes: Array<{ IsPrimary?: boolean; Name?: string }>\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetCanadianVehicleSpecifications` returns data from the Canadian Vehicle Specifications (CVS).\n * The CVS consists of a database of original vehicle dimensions, used primarily in\n * collision investigation and reconstruction, combined with a search engine.\n *\n * The CVS database is compiled annually by the Collision Investigation and Research Division of\n * Transport Canada. Visit official\n * [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\n * page for more details.\n *\n * `params.year` is the only required query parameter, all others are optional but will still be included\n * in the query string as blank values even if not provided by the user. See below Note for more\n * details.\n *\n * _NOTE:_ This endpoint does not like missing query keys and will return a 404 error if any of\n * them are omitted from the query string. Therefore, we must set default values to empty strings\n * for any query keys that are not provided by the user. This means keys not provided by user will\n * always show up as \"something=\" in the query string. `year` is the only key user must provide,\n * no default value is set for it so that an error will be thrown if not provided by user.\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL (required)\n * @param {(string|number)} params.year - Model year of the vehicle (required) - year >= 1971 (required)\n * @param {string} [params.make=''] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\n * @param {string} [params.model=''] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\n * @param {string} [params.units=''] - \"Metric\" (default), or \"US\" for United States customary units\n * @returns {(Promise<NhtsaResponse<GetCanadianVehicleSpecificationsResults>>)} - Api Response object\n */\n\nexport const GetCanadianVehicleSpecifications = async (params: {\n  year: string | number\n  make?: string\n  model?: string\n  units?: string\n}): Promise<NhtsaResponse<GetCanadianVehicleSpecificationsResults>> => {\n  const endpointName = 'GetCanadianVehicleSpecifications'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n      { name: 'make', value: params.make, types: ['string'] },\n      { name: 'model', value: params.model, types: ['string'] },\n      { name: 'units', value: params.units, types: ['string'] },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      params: {\n        make: '',\n        model: '',\n        units: '',\n        ...params,\n      },\n      allowEmptyParams: true,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetCanadianVehicleSpecifications endpoint\n *\n * @alias GetCanadianVehicleSpecificationsResults\n */\nexport type GetCanadianVehicleSpecificationsResults = {\n  Specs: Array<{\n    Name:\n      | 'Make'\n      | 'Model'\n      | 'MYR'\n      | 'OL'\n      | 'OW'\n      | 'OH'\n      | 'WB'\n      | 'CW'\n      | 'A'\n      | 'B'\n      | 'C'\n      | 'D'\n      | 'E'\n      | 'F'\n      | 'G'\n      | 'TWF'\n      | 'TWR'\n      | 'WD'\n    Value: string\n  }>\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetEquipmentPlantCodes` returns assigned Equipment Plant Codes. Can be filtered by Year,\n * Equipment Type and Report Type.\n *\n * ALL parameters are required and endpoint will return 404 if there are any undefined keys and/or\n * values in the query string.\n *\n * `params.year`:\n * - year >= 2016\n * - NOTE: It seems API will still respond with years < 2016 but api docs state only years >= 2016\n *   are supported\n *\n * `params.equipmentType`:\n * - 1 (Tires)\n * - 3 (Brake Hoses)\n * - 13 (Glazing)\n * - 16 (Retread)\n *\n * `params.reportType`:\n * - 'New' (The Equipment Plant Code was assigned during the selected year)\n * - 'Updated' (The Equipment Plant data was modified during the selected year)\n * - 'Closed' (The Equipment Plant is no longer Active)\n * - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed))\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.year - Year >= 2016 (required)\n * @param {(string|number)} params.equipmentType - Number equal to 1, 3, 13, or 16 (required)\n * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All' (required)\n * @returns {(Promise<NhtsaResponse<GetEquipmentPlantCodesResults>>)} - Api Response object\n */\nexport const GetEquipmentPlantCodes = async (params: {\n  year: string | number\n  equipmentType: '1' | '3' | '13' | '16' | 1 | 3 | 13 | 16\n  reportType: 'New' | 'Updated' | 'Closed' | 'All'\n}): Promise<NhtsaResponse<GetEquipmentPlantCodesResults>> => {\n  const endpointName = 'GetEquipmentPlantCodes'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'equipmentType',\n        value: params.equipmentType,\n        required: true,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'reportType',\n        value: params.reportType,\n        required: true,\n        types: ['string'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      params,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetEquipmentPlantCodes endpoint\n *\n * @alias GetEquipmentPlantCodesResults\n */\nexport type GetEquipmentPlantCodesResults = {\n  Address: string | null\n  City: string | null\n  Country: string\n  DOTCode: string\n  Name: string\n  OldDotCode: string\n  PostalCode: string | null\n  StateProvince: string | null\n  Status: string | null\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetMakeForManufacturer` returns all the Makes in the vPIC dataset for a specified manufacturer\n * that is requested. Multiple results are returned in case of multiple matches.\n *\n * `manufacturer` name can be a partial name, or a full name for more specificity, e.g. \"988\",\n * \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.\n *\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the\n *   provided name. It accepts a partial manufacturer name as an input.\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name or ID\n * @returns {(Promise<NhtsaResponse<GetMakeForManufacturerResults>>)} - Api Response object\n */\nexport const GetMakeForManufacturer = async (\n  manufacturer: string | number\n): Promise<NhtsaResponse<GetMakeForManufacturerResults>> => {\n  const endpointName = 'GetMakeForManufacturer'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: manufacturer.toString(),\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetMakeForManufacturer endpoint\n *\n * @alias GetMakeForManufacturerResults\n */\nexport type GetMakeForManufacturerResults = {\n  Make_ID: number\n  Make_Name: string\n  Mfr_Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetMakesForManufacturerAndYear` returns all the Makes in the vPIC dataset for a specified\n * `manufacturer`, and whose \"Year From\" and \"Year To\" range cover the specified `year`. Multiple\n * results are returned in case of multiple matches.\n *\n * Both `manufacturer` and `params.year` are required.\n *\n * `manufacturer` name can be a partial name, or a full name for more specificity, e.g. \"988\",\n * \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.\n *\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the\n *   provided name. It accepts a partial manufacturer name as an input.\n *\n * `params.year` must be a number > 2016, years prior to 2016 are not supported according to the\n * NHTSA API.\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name (string) or Manufacturer ID (number)\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.year - Model year of the vehicle - Number, >= 2016\n * @returns {(Promise<NhtsaResponse<GetMakesForManufacturerAndYearResults>>)} - Api Response object\n */\nexport const GetMakesForManufacturerAndYear = async (\n  manufacturer: string,\n  params: {\n    year: string | number\n  }\n): Promise<NhtsaResponse<GetMakesForManufacturerAndYearResults>> => {\n  const endpointName = 'GetMakesForManufacturerAndYear'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: manufacturer.toString(),\n      params,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetMakesForManufacturerAndYear endpoint\n *\n * @alias GetMakesForManufacturerAndYearResults\n */\nexport type GetMakesForManufacturerAndYearResults = {\n  MakeId: number\n  MakeName: string\n  MfrId: number\n  MfrName: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetMakesForVehicleType` returns all the Makes in the vPIC dataset for a specified vehicle type\n * (`typeName`), whose name is LIKE the vehicle type name in vPIC Dataset.\n *\n * `typeName` can be a partial name, or a full name for more specificity, e.g., \"Vehicle\", \"Moto\",\n * \"Low Speed Vehicle\", etc.\n *\n * @async\n * @param {string} typeName - A partial or full vehicle type name\n * @returns {(Promise<NhtsaResponse<GetMakesForVehicleTypeResults>>)} - Api Response object\n */\nexport const GetMakesForVehicleType = async (\n  typeName: string\n): Promise<NhtsaResponse<GetMakesForVehicleTypeResults>> => {\n  const endpointName = 'GetMakesForVehicleType'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'typeName',\n        value: typeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: typeName,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetMakesForVehicleType endpoint\n *\n * @alias GetMakesForVehicleTypeResults\n */\nexport type GetMakesForVehicleTypeResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetManufacturerDetails` provides the details for a specific manufacturer that is requested.\n * Multiple results are returned in case of multiple matches.\n *\n * `manufacturer` name can be a partial name, or a full name for more specificity, e.g. \"988\",\n * \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.\n *\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the\n *   provided name. It accepts a partial manufacturer name as an input.\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name or ID\n * @returns {(Promise<NhtsaResponse<GetManufacturerDetailsResults>>)} - Api Response object\n */\nexport const GetManufacturerDetails = async (\n  manufacturer: string | number\n): Promise<NhtsaResponse<GetManufacturerDetailsResults>> => {\n  const endpointName = 'GetManufacturerDetails'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: manufacturer.toString(),\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetManufacturerDetails endpoint\n *\n * @alias GetManufacturerDetailsResults\n */\nexport type GetManufacturerDetailsResults = {\n  Address: string | null\n  Address2: string | null\n  City: string | null\n  ContactEmail: string | null\n  ContactFax: string | null\n  ContactPhone: string | null\n  Country: string | null\n  DBAs: string | null\n  EquipmentItems: Array<unknown>\n  LastUpdated: string\n  ManufacturerTypes: Array<{\n    Name: string\n  }>\n  Mfr_CommonName: string | null\n  Mfr_ID: number | null\n  Mfr_Name: string | null\n  OtherManufacturerDetails: string | null\n  PostalCode: string | null\n  PrimaryProduct: string | null\n  PrincipalFirstName: string | null\n  PrincipalLastName: string | null\n  PrincipalPosition: string | null\n  StateProvince: string | null\n  SubmittedName: string | null\n  SubmittedOn: string\n  SubmittedPosition: string | null\n  VehicleTypes: Array<{\n    GVWRFrom: string\n    GVWRTo: string\n    IsPrimary: boolean\n    Name: string\n  }>\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetModelsForMake` returns the Models in the vPIC dataset for a specified `makeName`\n * whose Name is LIKE the Make in vPIC Dataset.\n *\n * `makeName` can be a partial, or a full for more specificity, e.g., \"Harley\",\n * \"Harley Davidson\", etc.\n *\n * @async\n * @param {string} makeName - Vehicle make name\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeResults>>)} - Api Response object\n */\nexport const GetModelsForMake = async (\n  makeName: string\n): Promise<NhtsaResponse<GetModelsForMakeResults>> => {\n  const endpointName = 'GetModelsForMake'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeName',\n        value: makeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: makeName,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetModelsForMake endpoint\n *\n * @alias GetModelsForMakeResults\n */\nexport type GetModelsForMakeResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetModelsForMakeId` returns the Models in the vPIC dataset for a specified Make whose ID is\n * equal to the `makeID` in the vPIC Dataset.\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints.\n * One of the objects in the `Results` array will contain both `Variable: \"Make\"` and\n * `VariableId: 26`. The `ValueId` key in that same object is the `makeID` for use in this\n * endpoint.\n * - `DecodeVin`\n * - `DecodeVinExtended`\n *\n * @async\n * @param {(string|number)} makeId - Make ID to search\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeIdResults>>)} - Api Response object\n */\nexport const GetModelsForMakeId = async (\n  makeId: string | number\n): Promise<NhtsaResponse<GetModelsForMakeIdResults>> => {\n  const endpointName = 'GetModelsForMakeId'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeId',\n        value: makeId,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: makeId.toString(),\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetModelsForMakeId endpoint\n *\n * @alias GetModelsForMakeIdResults\n */\nexport type GetModelsForMakeIdResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  encodeQueryStringParams,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse, AtLeastOne } from '../../types'\n\n/**\n * `GetModelsForMakeIdYear` returns the Models in the vPIC dataset for a specified Model Year\n * and Make whose name is LIKE the Make in the vPIC Dataset.\n *\n * `params.makeId` is required\n *\n * A minimum of one of the following are also required (or a combination of both):\n * - `params.modelYear` year you want to search for (years >= 1995 are supported according to NHTSA\n *   docs)\n * - `params.vehicleType` can be a partial name, or a full name for more specificity, e.g.,\n *   \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints.\n * One of the objects in the `Results` array will contain both `Variable: \"Make\"` and\n * `VariableId: 26`. The `ValueId` key in that same object is the `makeID` for use in this\n * endpoint.\n * - `DecodeVin`\n * - `DecodeVinExtended`\n *\n * _NOTE:_ This endpoint requires special handling of the params object, such that none of the\n * params are used in the query string and are instead used as part of the URL path for the\n * endpoint. To account for this, we pass the params object to the `createUrl` function as the\n * `path`, after encoding the params object key:values into a url path string.\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.makeId - Make ID to search\n * @param {(string|number)} [params.modelYear] - A number representing the model year to search\n * @param {string} [params.vehicleType] - String representing the vehicle type to search\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeIdYearResults>>)} Api Response object\n */\nexport const GetModelsForMakeIdYear = async (\n  params: {\n    makeId: string | number\n  } & AtLeastOne<{\n    modelYear?: string | number\n    vehicleType?: string\n  }>\n): Promise<NhtsaResponse<GetModelsForMakeIdYearResults>> => {\n  const endpointName = 'GetModelsForMakeIdYear'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'modelYear',\n        value: params.modelYear,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params.vehicleType,\n        types: ['string'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'makeId',\n        value: params.makeId,\n        required: true,\n        types: ['string'],\n      },\n      ...atLeastOne,\n    ]\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    /*\n     * Params for this endpoint are not part of the query string, instead they are part of the URL\n     * path. This means params are never run through createQueryString() and won't be URI component\n     * encoded without this.\n     */\n    const { makeId, modelYear, vehicleType } = encodeQueryStringParams(params)\n\n    /* Build the URL */\n    let path = `/make/${makeId}/`\n    path += modelYear ? `modelYear/${modelYear}` : ''\n    path += vehicleType\n      ? `${modelYear ? '/' : ''}vehicleType/${vehicleType}/`\n      : ''\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetModelsForMakeIdYear endpoint\n *\n * @alias GetModelsForMakeIdYearResults\n */\nexport type GetModelsForMakeIdYearResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  encodeQueryStringParams,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { NhtsaResponse, IArgToValidate, AtLeastOne } from '../../types'\n\n/**\n * `GetModelsForMakeYear` returns the Models in the vPIC dataset for a specified Model Year and\n * Make whose name is LIKE the Make in the vPIC Dataset.\n *\n * `params.make` is required. It can be a partial, or a full name for more specificity, e.g.,\n * \"Harley\", \"Harley Davidson\", etc.\n *\n * A minimum of one of the following are also required (or a combination of both):\n * - `params.modelYear` year you want to search for (years >= 1995 are supported according to NHTSA\n *   docs)\n * - `params.vehicleType` can be a partial name, or a full name for more specificity, e.g.,\n *   \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.\n *\n * _NOTE:_ This endpoint requires special handling of the params object, such that none of the\n * params are used in the query string and are instead used as part of the URL path for the\n * endpoint. To account for this, we pass the params object to the `createUrl` function as the\n * `path`, after encoding the params object key:values into a url path string.\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {string} params.make - Make name to search\n * @param {(string|number)} [params.modelYear] - A number representing the model year to search\n * (required if !vehicleType)\n * @param {string} [params.vehicleType] - String representing the vehicle type to search\n * (required if !modelYear)\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeYearResults>>)} Api Response object\n */\nexport const GetModelsForMakeYear = async (\n  params: { make: string } & AtLeastOne<{\n    modelYear?: string | number\n    vehicleType?: string\n  }>\n): Promise<NhtsaResponse<GetModelsForMakeYearResults>> => {\n  const endpointName = 'GetModelsForMakeYear'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'modelYear',\n        value: params.modelYear,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params.vehicleType,\n        types: ['string'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      { name: 'make', value: params.make, required: true, types: ['string'] },\n      ...atLeastOne,\n    ]\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    /*\n     * Params for this endpoint are not part of the query string, instead they are part of the URL\n     * path. This means params are never run through createQueryString() and won't be URI component\n     * encoded without this.\n     */\n    const { make, modelYear, vehicleType } = encodeQueryStringParams(params)\n\n    /* Build the URL */\n    let path = `/make/${make}/`\n    path += modelYear ? `modelYear/${modelYear}` : ''\n    path += vehicleType\n      ? `${modelYear ? '/' : ''}vehicleType/${vehicleType}/`\n      : ''\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetModelsForMakeYear endpoint\n *\n * @alias GetModelsForMakeYearResults\n */\nexport type GetModelsForMakeYearResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetParts` provides a list of ORGs with letter date in the given range of the dates and with\n * specified Type (`params.type`) of ORG.\n *\n * - Up to 1000 results will be returned at a time.\n * - Get the next page by incrementing the `params.page` query parameter.\n *\n * All query `params` are optional.\n *\n * `params.type`:\n * - (optional) number, 565 (Vehicle Identification Number Guidance, based on 49 CFR Part 565)\n *   or 566 (Manufacturer Identification – Reporting Requirements based on 49 CFR Part 566)\n * `params.fromDate`:\n * - (optional) ORG's Letter Date should be on or after this date\n * `params.manufacturer`:\n * - (optional) if supplied value is a number - method will do exact match on Manufacturer's Id\n * - if supplied value is a string - it will look for manufacturers whose name is LIKE the provided\n *   name\n * - it accepts a partial manufacturer name as an input\n * - multiple results are returned in case of multiple matches\n * - manufacturer name can be a partial name, or a full name for more specificity, e.g., \"988\",\n *   \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.\n * `params.page`:\n *  - (optional) number, 1 (default) first 1000 records, 2 - next 1000 records, etc\n *\n * @async\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.type] - Specified type of ORG to search\n * @param {string} [params.fromDate] - Start date of search query\n * @param {string} [params.toDate] - End date of search query\n * @param {(string|number)} [params.page] - Which page number of results to request (100 results per page)\n * @returns {(Promise<NhtsaResponse<GetPartsResults>>)} - Api Response object\n */\nexport const GetParts = async (params?: {\n  type?: string | number\n  fromDate?: string\n  toDate?: string\n  page?: string | number\n}): Promise<NhtsaResponse<GetPartsResults>> => {\n  const endpointName = 'GetParts'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, types: ['object'] },\n      { name: 'type', value: params?.type, types: ['string', 'number'] },\n      { name: 'fromDate', value: params?.fromDate, types: ['string'] },\n      { name: 'toDate', value: params?.toDate, types: ['string'] },\n      { name: 'page', value: params?.page, types: ['string', 'number'] },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      params,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetParts endpoint\n *\n * @alias GetPartsResults\n */\nexport type GetPartsResults = {\n  CoverLetterURL: string\n  LetterDate: string\n  ManufacturerId: number\n  ManufacturerName: string\n  ModelYearFrom: number | null\n  ModelYearTo: number | null\n  Name: string\n  Type: string\n  URL: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetVehicleTypesForMake` returns all the Vehicle Types in the vPIC dataset for a specified Make,\n * whose name is LIKE the make name in the vPIC Dataset.\n *\n * `makeName` can be a partial name, or a full name for more specificity, e.g., \"Merc\",\n * \"Mercedes Benz\", etc.\n *\n * @async\n * @param {string} makeName - Name of the vehicle make to search\n * @returns {(Promise<NhtsaResponse<GetVehicleTypesForMakeResults>>)} - Api Response object\n */\nexport const GetVehicleTypesForMake = async (\n  makeName: string\n): Promise<NhtsaResponse<GetVehicleTypesForMakeResults>> => {\n  const endpointName = 'GetVehicleTypesForMake'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeName',\n        value: makeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: makeName,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetVehicleTypesForMake endpoint\n *\n * @alias GetVehicleTypesForMakeResults\n */\nexport type GetVehicleTypesForMakeResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetVehicleTypesForMakeId` returns the Models in the vPIC dataset for a specified Make\n * whose ID is equal to the `makeID` in the vPIC Dataset.\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints.\n * One of the objects in the `Results` array will contain both `Variable: \"Make\"` and\n * `VariableId: 26`. The `ValueId` key in that same object is the `makeID` for use in this\n * endpoint.\n * - `DecodeVin`\n * - `DecodeVinExtended`\n *\n * @async\n * @param {(string|number)} makeId - Make ID to search\n * @returns {(Promise<NhtsaResponse<GetVehicleTypesForMakeIdResults>>)} - Api Response object\n */\nexport const GetVehicleTypesForMakeId = async (\n  makeId: string | number\n): Promise<NhtsaResponse<GetVehicleTypesForMakeIdResults>> => {\n  const endpointName = 'GetVehicleTypesForMakeId'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeId',\n        value: makeId,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: makeId.toString(),\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetVehicleTypesForMakeId endpoint\n *\n * @alias GetVehicleTypesForMakeIdResults\n */\nexport type GetVehicleTypesForMakeIdResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Utility Functions */\nimport { rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { NhtsaResponse } from '../../types'\n\n/**\n * `GetVehicleVariableList` provides a list of all the Vehicle related variables that are in the\n * vPIC dataset. Information on the name, description and the type of the variable is provided.\n *\n * @async\n * @returns {(Promise<NhtsaResponse<GetVehicleVariableListResults>>)} - Api Response object\n */\nexport const GetVehicleVariableList = async (): Promise<\n  NhtsaResponse<GetVehicleVariableListResults>\n> => {\n  const endpointName = 'GetVehicleVariableList'\n\n  try {\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetVehicleVariableList endpoint\n *\n * @alias GetVehicleVariableListResults\n */\nexport type GetVehicleVariableListResults = {\n  DataType: 'string' | 'int' | 'decimal' | 'lookup'\n  Description: string\n  GroupName: string | null\n  ID: number\n  Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetVehicleVariableValuesList` provides a list of all the accepted values for a given variable\n * that are stored in the vPIC dataset.\n *\n * If `variableValue` is a string, it must use full name, not just part of it, e.g.,\n * \"Battery Type\", not \"Battery\"\n *\n * `variableValue` can be also be a number, which is the ID of the variable, e.g., 1, 2, 3, etc.\n *\n * @async\n * @param {(string|number)} variableValue - The variable you want to get a values list of\n * @returns {(Promise<NhtsaResponse<GetVehicleVariableValuesListResults>>)} - Api Response object\n */\nexport const GetVehicleVariableValuesList = async (\n  variableValue: number | string\n): Promise<NhtsaResponse<GetVehicleVariableValuesListResults>> => {\n  const endpointName = 'GetVehicleVariableValuesList'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'variableValue',\n        value: variableValue,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n    catchInvalidArguments({ args })\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: variableValue.toString(),\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetVehicleVariableValuesList endpoint\n *\n * @alias GetVehicleVariableValuesListResults\n */\nexport type GetVehicleVariableValuesListResults = {\n  ElementName: string\n  Id: number\n  Name: string\n}\n","/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { AtLeastOne, IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * `GetWMIsForManufacturer` provides information on the World Manufacturer Identifier (WMI) for a\n * specified `manufacturer`. Only WMIs registered in vPICList are displayed. Multiple results are\n * returned in case of multiple matches.\n *\n * Both `params.manufacturer` and `params.vehicleType` are optional but at least one must be\n * provided.\n *\n * `manufacturer` can be a partial name, or a full name for more specificity, or WMI ID number,\n *  e.g., \"Merc\", \"Mercedes Benz\", 987, etc.\n * - If `manufacturer` is a number - method will do exact match on Manufacturer's Id\n * - If `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided\n *   name (it accepts a partial Manufacturer name as an input)\n *\n * `vehicleType` can be a string or number, e.g., \"car\", 1, etc.\n * - If `vehicleType` is a number - method will do exact match on VehicleType's Id\n * - If `vehicleType` is a string - it will look for VehicleType whose name is LIKE the provided\n *   name (it accepts a partial VehicleType name as an input).\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL.\n * @param {(string|number)} [params.manufacturer] - Manufacturer Name, or Manufacturer ID, or WMI ID\n * (required if !vehicleType)\n * @param {(string|number)} [params.vehicleType] - Optional Vehicle Type search parameter\n * (required if !manufacturer)\n * @returns {(Promise<NhtsaResponse<GetWMIsForManufacturerResults>>)} - Api Response object\n */\nexport const GetWMIsForManufacturer = async (\n  params: AtLeastOne<{\n    manufacturer?: string | number\n    vehicleType?: string | number\n  }>\n): Promise<NhtsaResponse<GetWMIsForManufacturerResults>> => {\n  const endpointName = 'GetWMIsForManufacturer'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: params?.manufacturer,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params?.vehicleType,\n        types: ['string', 'number'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      ...atLeastOne,\n    ]\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    /*\n     * manufacturer and vehicleType are optional but at least one must be provided.\n     * `manufacturer` is actually part of the path for this endpoint and not a query param.\n     * We include `manufacturer` in params as it's easier to type the function using 'AtLeastOne'\n     * type if they are placed in the same object.\n     */\n    const manufacturer = params?.manufacturer\n      ? encodeURIComponent(params.manufacturer)\n      : ''\n    const vehicleType = params?.vehicleType || ''\n\n    const { createUrl, get } = useFetch()\n    createUrl({\n      endpointName,\n      path: manufacturer,\n      params: { vehicleType },\n    })\n\n    return get()\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Objects found in the NhtsaResponse 'Results' array of GetWMIsForManufacturer endpoint\n *\n * @alias GetWMIsForManufacturerResults\n */\nexport type GetWMIsForManufacturerResults = {\n  Country: string | null\n  CreatedOn: string\n  DateAvailableToPublic: string\n  Id: number\n  Name: string\n  UpdatedOn: string\n  VehicleType: string\n  WMI: string\n}\n"],"names":["catchInvalidArguments","args","mode","getTypeof","arg","validateArgument","name","value","required","types","errorMode","error","typeofValue","errorPrepend","errorAppend","joinedTypes","isError","handleError","message","rejectWithError","toString","TRANSLITERATION_TABLE","WEIGHTS_ARRAY","isValidVin","vin","vinArray","checkDigit","checkValue","digit","index","digitValue","weight","acc","currValue","NHTSA_BASE_URL","NHTSA_RESPONSE_FORMAT","useFetch","_url","createUrl","endpointName","allowEmptyParams","includeQueryString","path","params","saveUrl","queryString","createQueryString","url","get","options","response","contentType","isJson","type","responseDetails","data","staticParams","_params","encodeQueryStringParams","key","array","DecodeVin","DecodeVinExtended","DecodeVinValues","DecodeVinValuesBatch","inputString","body","post","DecodeVinValuesExtended","DecodeWMI","WMI","GetAllMakes","GetAllManufacturers","GetCanadianVehicleSpecifications","GetEquipmentPlantCodes","GetMakeForManufacturer","manufacturer","GetMakesForManufacturerAndYear","GetMakesForVehicleType","typeName","GetManufacturerDetails","GetModelsForMake","makeName","GetModelsForMakeId","makeId","GetModelsForMakeIdYear","atLeastOne","modelYear","vehicleType","GetModelsForMakeYear","make","GetParts","GetVehicleTypesForMake","GetVehicleTypesForMakeId","GetVehicleVariableList","GetVehicleVariableValuesList","variableValue","GetWMIsForManufacturer"],"mappings":"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"}