{"version":3,"file":"DecodeVinExtended.js","sources":["../../src/api/actions/DecodeVinExtended.ts"],"sourcesContent":["/**\n * @module api/actions/DecodeVinExtended\n * @category Actions\n * @description DecodeVinExtended NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVinExtended](module-api_actions_DecodeVinExtended.DecodeVinExtended.html)\n * >\n * > **Types**\n * > - Type: [DecodeVinExtendedResponse](#DecodeVinExtendedResponse)\n * > - Type: [DecodeVinExtendedResults](#DecodeVinExtendedResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVinExtended extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This is exactly like the DecodeVin method but provides additional information on variables\n   * related to other NHTSA programs like\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n   * - This will decode the VIN and the decoded output will be made available\n   *   in the format of Key-value pairs.\n   * - In the returned 'Results` object:\n   *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value.\n   *   - In case of text variables, the ValueID is not applicable.\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n   *   or older (pre-1980), model year ranges.\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\n   *   - In this case, the VIN will be decoded partially with the available characters.\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\n   *   - The 9th digit is not necessary.\n   *\n   * @async\n   * @param {string} vin - Vehicle Identification Number (full or partial).\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\n   * @returns {(Promise<DecodeVinExtendedResponse>)} - Api Response object.\n   */\n  async DecodeVinExtended(\n    vin: string,\n    params?: {\n      modelYear?: string | number;\n    }\n  ): Promise<DecodeVinExtendedResponse> {\n    const action = 'DecodeVinExtended';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofVin = getTypeof(vin);\n    if (typeofVin !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\n            `<${typeofVin}> ${vin}`\n        )\n      );\n    }\n\n    const typeofModelYear = getTypeof(params?.modelYear);\n    if (params?.modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\n            `<${typeofModelYear}> ${params.modelYear}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVinExtendedResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVinExtended\n * @alias DecodeVinExtendedResults\n */\nexport type DecodeVinExtendedResults = {\n  Value: string | null;\n  ValueId: string | null;\n  Variable: string;\n  VariableId: number;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVinExtended API Action.\n *\n * @memberof module:api/actions/DecodeVinExtended\n * @alias DecodeVinExtendedResponse\n */\nexport type DecodeVinExtendedResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<DecodeVinExtendedResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["DecodeVinExtended","Fetch","constructor","userConfig","super","vin","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofVin","typeofModelYear","modelYear","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAA0BC,EACrCC,YAAYC,GACVC,MAAMD,GA0BFH,kBACJK,EACAC,4CAIA,MAAMC,EAAS,oBAGTC,EAAeC,EAAUH,GAC/B,GAAIA,GAA2B,WAAjBE,EACZ,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGL,sDACGC,MAAiBF,MAK7B,MAAMO,EAAYJ,EAAUJ,GAC5B,GAAkB,WAAdQ,EACF,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGL,mEACGM,MAAcR,MAK1B,MAAMS,EAAkBL,EAAUH,MAAAA,SAAAA,EAAQS,WAC1C,IAAIT,MAAAA,SAAAA,EAAQS,YAAiC,WAApBD,EACvB,OAAOJ,QAAQC,OACb,IAAIC,MACF,GAAGL,0FACGO,MAAoBR,EAAOS,cAMvC,MAAMC,QAAoBC,KAAKC,iBAAiBZ,GAAQa,OAAOC,GAC7DV,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCa,QAKnDC,EAAM,GAAGJ,KAAKK,WAAWf,KAAUF,IAAMW,IAG/C,aAAaC,KAAKM,IAAIF,GACnBG,MAAMC,GAAaA,IACnBN,OAAOC,GACNV,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8Ba"}