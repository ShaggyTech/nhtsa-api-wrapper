import{_ as r}from"./tslib.es6-e8a9b979.js";import{F as t,g as e}from"./Fetch-980165d1.js";class o extends t{constructor(r){super(r)}GetParts(t){var o,s,n,i;return r(this,void 0,void 0,(function*(){const r=null===(o=t)||void 0===o?void 0:o.type,a=null===(s=t)||void 0===s?void 0:s.fromDate,m=null===(n=t)||void 0===n?void 0:n.toDate,u=null===(i=t)||void 0===i?void 0:i.page,c=e(t);if(t&&"object"!==c)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${c}> ${t}`));const g=e(r);if(r&&"number"!==g)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${g}> ${r}`));const p=e(a);if(a&&"string"!==p)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${p}> ${a}`));const b=e(m);if(m&&"string"!==b)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${b}> ${m}`));const d=e(u);if(u&&"number"!==d)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${d}> ${u}`));const P=yield this.buildQueryString(t).catch(r=>Promise.reject(new Error(`GetParts, Error building query string: ${r}`))),f=`${this.baseUrl}/GetParts${P}`;return yield this.get(f).then(r=>r).catch(r=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${r}`)))}))}}export{o as GetParts};
//# sourceMappingURL=GetParts.js.map
