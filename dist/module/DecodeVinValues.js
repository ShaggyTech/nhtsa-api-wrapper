import{F as e,_ as r,g as t}from"./Fetch-d5a8e004.js";class o extends e{constructor(e){super(e)}DecodeVinValues(e,o){return r(this,void 0,void 0,(function*(){const r="DecodeVinValues",n=t(o);if(o&&"object"!==n)return Promise.reject(new Error(`DecodeVinValues, "params" argument must be of type object, got: <${n}> ${o}`));const s=t(e);if("string"!==s)return Promise.reject(new Error(`DecodeVinValues, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=t(null==o?void 0:o.modelYear);if((null==o?void 0:o.modelYear)&&"string"!==i&&"number"!==i)return Promise.reject(new Error(`DecodeVinValues, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${o.modelYear}`));const u=yield this.buildQueryString(o).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}export{o as DecodeVinValues};
//# sourceMappingURL=DecodeVinValues.js.map
