import{_ as r}from"./isValidVin-a63c6e15.js";import{F as t,g as e}from"./Fetch-3b3744ac.js";class s extends t{constructor(r){super(r)}GetParts(t){return r(this,void 0,void 0,(function*(){const r=null==t?void 0:t.type,s=null==t?void 0:t.fromDate,o=null==t?void 0:t.toDate,n=null==t?void 0:t.page,a=e(t);if(t&&"object"!==a)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${a}> ${t}`));const i=e(r);if(r&&"number"!==i)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${i}> ${r}`));const m=e(s);if(s&&"string"!==m)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${m}> ${s}`));const u=e(o);if(o&&"string"!==u)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${u}> ${o}`));const c=e(n);if(n&&"number"!==c)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${c}> ${n}`));const g=yield this.buildQueryString(t).catch(r=>Promise.reject(new Error(`GetParts, Error building query string: ${r}`))),p=`${this.baseUrl}/GetParts${g}`;return yield this.get(p).then(r=>r).catch(r=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${r}`)))}))}}export{s as GetParts};
//# sourceMappingURL=GetParts.js.map
