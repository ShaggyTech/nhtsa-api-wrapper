{"version":3,"file":"GetMakesForManufacturerAndYear.js","sources":["../../src/api/actions/GetMakesForManufacturerAndYear.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetMakesForManufacturerAndYear\r\n * @category Actions\r\n * @description GetMakesForManufacturerAndYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakesForManufacturerAndYear](module-api_actions_GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakesForManufacturerAndYearResponse](#GetMakesForManufacturerAndYearResponse)\r\n * > - Type: [GetMakesForManufacturerAndYearResults](#GetMakesForManufacturerAndYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakesForManufacturerAndYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer,\r\n   * and whose Year From and Year To range cover the specified year.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   * - Manufacturer can be idenfitied by Id, a partial name, or a full name\r\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   *\r\n   * @returns {(Promise<GetMakesForManufacturerAndYearResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetMakesForManufacturerAndYear(\r\n    manufacturer: string | number,\r\n    params: {\r\n      year: number;\r\n    }\r\n  ): Promise<GetMakesForManufacturerAndYearResponse | Error> {\r\n    const action = 'GetMakesForManufacturerAndYear';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument is required and must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakesForManufacturerAndYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResults\r\n */\r\nexport type GetMakesForManufacturerAndYearResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  MfrId: number;\r\n  MfrName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakesForManufacturerAndYear API Action.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResponse\r\n */\r\nexport type GetMakesForManufacturerAndYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakesForManufacturerAndYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["Fetch","getTypeof"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;AAwBA;;;;;;;;MAQa,8BAA+B,SAAQA,WAAK;IACvD,YAAY,UAAwB;QAClC,KAAK,CAAC,UAAU,CAAC,CAAC;KACnB;;;;;;;;;;;;;;;;;;IAmBY,8BAA8B,CACzC,YAA6B,EAC7B,MAEC;;YAED,MAAM,MAAM,GAAG,gCAAgC,CAAC;;YAGhD,MAAM,kBAAkB,GAAGC,eAAS,CAAC,YAAY,CAAC,CAAC;YACnD,IAAI,kBAAkB,KAAK,QAAQ,IAAI,kBAAkB,KAAK,QAAQ,EAAE;gBACtE,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,mFAAmF;oBAC1F,IAAI,kBAAkB,KAAK,YAAY,EAAE,CAC5C,CACF,CAAC;aACH;YAED,MAAM,YAAY,GAAGA,eAAS,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,YAAY,KAAK,QAAQ,EAAE;gBAC7B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,mEAAmE;oBAC1E,IAAI,YAAY,KAAK,MAAM,EAAE,CAChC,CACF,CAAC;aACH;YAED,MAAM,UAAU,GAAGA,eAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,UAAU,KAAK,QAAQ,EAAE;gBAC3B,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,GAAG,MAAM,wEAAwE;oBAC/E,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE,CACnC,CACF,CAAC;aACH;;YAGD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,IAC/D,OAAO,CAAC,MAAM,CACZ,IAAI,KAAK,CAAC,GAAG,MAAM,kCAAkC,GAAG,EAAE,CAAC,CAC5D,CACF,CAAC;;YAGF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,IAAI,YAAY,GAAG,WAAW,EAAE,CAAC;;YAGtE,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;iBACvB,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC;iBAC1B,KAAK,CAAC,GAAG,IACR,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,MAAM,wBAAwB,GAAG,EAAE,CAAC,CAAC,CAClE,CAAC;SACL;KAAA;;;;;"}