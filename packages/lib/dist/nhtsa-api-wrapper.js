"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const c=({args:e,mode:r="default"})=>{if($(e)!=="array"&&!e.length)throw Error('catchInvalidArguments requires "args" that must be an array of IArgToValidate objects');if(r==="default")e.forEach(t=>{f(t)});else if(r==="atLeast"&&!e.find(n=>!!n.value))throw Error(`must provide at least one of the following arguments: ${e.map(n=>n.name).join(", ")}`)},f=({name:e,value:r,required:t,types:n,mode:o="error"})=>{if($(e)!=="string")throw Error("'name', is required and must be of type string");const s=$(r);let d="";const a=`error validating argument named "${e}",`,g=`received value: ${r} - of type: <${s}>`;if(n&&$(n)!=="array"&&!n.length)throw Error(`${a} 'types' must be an array of strings`);const h=n?`<${n.join(" | ")}>`:"";if(t&&!n?r||(d=`${a} is required, ${g}`):n&&!t?r&&!n.includes(s)&&(d=`${a} must be of type(s) ${h}, ${g}`):t&&n&&(!r||!n.includes(s))&&(d=`${a} is required and must be of type(s) ${h}, ${g}`),d.length){if(o==="boolean")return!1;if(o==="error")throw Error(d)}return!0},i="https://vpic.nhtsa.dot.gov/api/vehicles",p="json",y=(e,r=!1)=>{const t={format:p},n=$(e)==="object"?{...e,...t}:t;return"?"+Object.entries(m(n)).map(([s,d],a,g)=>d.length||r&&d===""?`${s}=${d}${a<g.length-1?"&":""}`:"").join("")},m=e=>Object.entries(e).filter(([r,t])=>f({name:r,types:["string","number","boolean"],value:t,mode:"boolean"})).reduce((r,[t,n])=>(r[t]=encodeURIComponent(n),r),{}),v=e=>$(e)==="error",V=e=>{let r="an unknown error occurred.";return v(e)?e:($(e)==="string"&&(r=e),Error(r))},u=async e=>(v(e)||(e=V(e)),Promise.reject(e)),$=e=>{const r=Object.prototype.toString.call(e).toLowerCase();return r.slice(8,r.length-1)},b={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9},q=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2];function G(e){if(typeof e!="string"||e.length!=17)return!1;e=e.toUpperCase();const r=e.split(""),t=r[8];if(isNaN(parseInt(t))&&t!=="X")return!1;const n=t==="X"?10:parseInt(t);return r.map((s,d)=>{let a;isNaN(parseInt(s))?a=b[s]:a=parseInt(s);const g=q[d];return a*g}).reduce((s,d)=>s+d,0)%11===n}const l=()=>{const e=async(t,n={})=>await fetch(t,n).then(async s=>{if(!s.ok)throw Error(`${s.status} ${s.url}`);const d=["application/json","text/json"],a=s.headers.get("content-type");if(!d.some(M=>a==null?void 0:a.includes(M)))throw Error(`API response is not in JSON format; got content-type: ${a}, responseStatus: ${s.status}}, responseUrl: ${s.url}`);const h=await s.json();if(!h)throw Error(`API responded but returned no data; got content-type: ${a}, responseStatus: ${s.status}}, responseUrl: ${s.url}`);return h}).catch(s=>(s.message=`API error fetching data: ${s.message}`,u(s)));return{get:e,post:async(t,n={method:"POST",headers:{"content-type":"application/x-www-form-urlencoded"}})=>await e(t,n)}},k=async(e,r)=>{const t="DecodeVin";try{const n=[{name:"vin",value:e,required:!0,types:["string"]},{name:"params",value:r,types:["object"]},{name:"modelYear",value:r==null?void 0:r.modelYear,types:["string","number"]}];c({args:n});const o=y(r),s=`${i}/${t}/${e}${o}`;return await l().get(s)}catch(n){return u(n)}},S=async(e,r)=>{const t="DecodeVinExtended";try{const n=[{name:"vin",value:e,required:!0,types:["string"]},{name:"params",value:r,types:["object"]},{name:"modelYear",value:r==null?void 0:r.modelYear,types:["string","number"]}];c({args:n});const o=y(r),s=`${i}/${t}/${e}${o}`;return await l().get(s)}catch(n){return u(n)}},w=async(e,r)=>{const t="DecodeVinValues";try{const n=[{name:"vin",value:e,required:!0,types:["string"]},{name:"params",value:r,types:["object"]},{name:"modelYear",value:r==null?void 0:r.modelYear,types:["string","number"]}];c({args:n});const o=y(r),s=`${i}/${t}/${e}${o}`;return await l().get(s)}catch(n){return u(n)}},T=async e=>{const r="DecodeVinValuesBatch";try{c({args:[{name:"inputString",value:e,required:!0,types:["string"]}]});const n=`${i}/${r}/`,o=encodeURI(`DATA=${e}&format=${p}`);return await l().post(n,{body:o})}catch(t){return u(t)}},N=async(e,r)=>{const t="DecodeVinValuesExtended";try{const n=[{name:"vin",value:e,required:!0,types:["string"]},{name:"params",value:r,types:["object"]},{name:"modelYear",value:r==null?void 0:r.modelYear,types:["string","number"]}];c({args:n});const o=y(r),s=`${i}/${t}/${e}${o}`;return await l().get(s)}catch(n){return u(n)}},I=async e=>{const r="DecodeWMI";try{c({args:[{name:"WMI",value:e,required:!0,types:["string"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},F=async()=>{const e="GetAllMakes";try{const r=y(),t=`${i}/${e}${r}`;return await l().get(t)}catch(r){return u(r)}},A=async e=>{const r="GetAllManufacturers";try{const t=[{name:"params",value:e,types:["object"]},{name:"manufacturerType",value:e==null?void 0:e.manufacturerType,types:["string"]},{name:"page",value:e==null?void 0:e.page,types:["string","number"]}];c({args:t});const n=y(e),o=`${i}/${r}${n}`;return await l().get(o)}catch(t){return u(t)}},j=async e=>{const r="GetCanadianVehicleSpecifications";try{const t=[{name:"params",value:e,required:!0,types:["object"]},{name:"year",value:e.year,required:!0,types:["string","number"]},{name:"make",value:e.make,types:["string"]},{name:"model",value:e.model,types:["string"]},{name:"units",value:e.units,types:["string"]}];c({args:t});const n=y({make:"",model:"",units:"",...e},!0),o=`${i}/${r}/${n}`;return await l().get(o)}catch(t){return u(t)}},E=async e=>{const r="GetEquipmentPlantCodes";try{const t=[{name:"params",value:e,required:!0,types:["object"]},{name:"year",value:e.year,required:!0,types:["string","number"]},{name:"equipmentType",value:e.equipmentType,required:!0,types:["string","number"]},{name:"reportType",value:e.reportType,required:!0,types:["string"]}];c({args:t});const n=y(e),o=`${i}/${r}${n}`;return await l().get(o)}catch(t){return u(t)}},D=async e=>{const r="GetMakeForManufacturer";try{c({args:[{name:"manufacturer",value:e,required:!0,types:["string","number"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},Y=async(e,r)=>{const t="GetMakesForManufacturerAndYear";try{const n=[{name:"manufacturer",value:e,required:!0,types:["string","number"]},{name:"params",value:r,required:!0,types:["object"]},{name:"year",value:r.year,required:!0,types:["string","number"]}];c({args:n});const o=y(r),s=`${i}/${t}/${e}${o}`;return await l().get(s)}catch(n){return u(n)}},L=async e=>{const r="GetMakesForVehicleType";try{c({args:[{name:"typeName",value:e,required:!0,types:["string"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},P=async e=>{const r="GetManufacturerDetails";try{c({args:[{name:"manufacturer",value:e,required:!0,types:["string","number"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},R=async e=>{const r="GetModelsForMake";try{c({args:[{name:"makeName",value:e,required:!0,types:["string"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},O=async e=>{const r="GetModelsForMakeId";try{c({args:[{name:"makeId",value:e,required:!0,types:["string","number"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},C=async e=>{const r="GetModelsForMakeIdYear";try{const t=[{name:"modelYear",value:e.modelYear,types:["string","number"]},{name:"vehicleType",value:e.vehicleType,types:["string"]}],n=[{name:"params",value:e,required:!0,types:["object"]},{name:"makeId",value:e.makeId,required:!0,types:["string"]},...t];c({args:n}),c({args:t,mode:"atLeast"});const{makeId:o,modelYear:s,vehicleType:d}=m(e);let a=`${i}/${r}/make/${o}/`;return s&&(a+=`modelYear/${s}`),d&&(a+=`${s?"/":""}vehicleType/${d}`),a+=y(),await l().get(a)}catch(t){return u(t)}},W=async e=>{const r="GetModelsForMakeYear";try{const t=[{name:"modelYear",value:e.modelYear,types:["string","number"]},{name:"vehicleType",value:e.vehicleType,types:["string"]}],n=[{name:"params",value:e,required:!0,types:["object"]},{name:"make",value:e.make,required:!0,types:["string"]},...t];c({args:n}),c({args:t,mode:"atLeast"});const{make:o,modelYear:s,vehicleType:d}=m(e);let a=`${i}/${r}/make/${o}/`;return s&&(a+=`modelYear/${s}`),d&&(a+=`${s?"/":""}vehicleType/${d}`),a+=y(),await l().get(a)}catch(t){return u(t)}},x=async e=>{const r="GetParts";try{const t=[{name:"params",value:e,types:["object"]},{name:"type",value:e==null?void 0:e.type,types:["string","number"]},{name:"fromDate",value:e==null?void 0:e.fromDate,types:["string"]},{name:"toDate",value:e==null?void 0:e.toDate,types:["string"]},{name:"page",value:e==null?void 0:e.page,types:["string","number"]}];c({args:t});const n=y(e),o=`${i}/${r}${n}`;return await l().get(o)}catch(t){return u(t)}},U=async e=>{const r="GetVehicleTypesForMake";try{c({args:[{name:"makeName",value:e,required:!0,types:["string"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},_=async e=>{const r="GetVehicleTypesForMakeId";try{c({args:[{name:"makeId",value:e,required:!0,types:["string","number"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},B=async()=>{const e="GetVehicleVariableList";try{const r=y(),t=`${i}/${e}${r}`;return await l().get(t)}catch(r){return u(r)}},H=async e=>{const r="GetVehicleVariableValuesList";try{c({args:[{name:"variableValue",value:e,required:!0,types:["string","number"]}]});const n=y(),o=`${i}/${r}/${e}${n}`;return await l().get(o)}catch(t){return u(t)}},J=async e=>{const r="GetWMIsForManufacturer";try{const t=[{name:"manufacturer",value:e==null?void 0:e.manufacturer,types:["string","number"]},{name:"vehicleType",value:e==null?void 0:e.vehicleType,types:["string","number"]}],n=[{name:"params",value:e,types:["object"]},...t];c({args:n}),c({args:t,mode:"atLeast"});const o=e!=null&&e.manufacturer?encodeURIComponent(e.manufacturer):"",s=(e==null?void 0:e.vehicleType)||"",d=y({vehicleType:s}),a=`${i}/${r}/${o}${d}`;return await l().get(a)}catch(t){return u(t)}};exports.DecodeVin=k;exports.DecodeVinExtended=S;exports.DecodeVinValues=w;exports.DecodeVinValuesBatch=T;exports.DecodeVinValuesExtended=N;exports.DecodeWMI=I;exports.GetAllMakes=F;exports.GetAllManufacturers=A;exports.GetCanadianVehicleSpecifications=j;exports.GetEquipmentPlantCodes=E;exports.GetMakeForManufacturer=D;exports.GetMakesForManufacturerAndYear=Y;exports.GetMakesForVehicleType=L;exports.GetManufacturerDetails=P;exports.GetModelsForMake=R;exports.GetModelsForMakeId=O;exports.GetModelsForMakeIdYear=C;exports.GetModelsForMakeYear=W;exports.GetParts=x;exports.GetVehicleTypesForMake=U;exports.GetVehicleTypesForMakeId=_;exports.GetVehicleVariableList=B;exports.GetVehicleVariableValuesList=H;exports.GetWMIsForManufacturer=J;exports.isValidVin=G;
//# sourceMappingURL=nhtsa-api-wrapper.js.map
