{"version":3,"file":"GetCanadianVehicleSpecifications.js","sources":["../../src/api/actions/GetCanadianVehicleSpecifications.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetCanadianVehicleSpecifications\r\n * @category Actions\r\n * @description GetCanadianVehicleSpecifications NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetCanadianVehicleSpecifications](module-api_actions_GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetCanadianVehicleSpecificationsResponse](#GetCanadianVehicleSpecificationsResponse)\r\n * > - Type: [GetCanadianVehicleSpecificationsResults](#GetCanadianVehicleSpecificationsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */,\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetCanadianVehicleSpecifications extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\r\n   * used primarily in collision investigation and reconstruction, combined with a search engine.\r\n   *\r\n   * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\r\n   * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\r\n   * page for more details.\r\n   *\r\n   * This API action will return a 404 html error if any of the query parameters in params\r\n   * are missing from the query string. This is the only API action with this behaviour. Therefore,\r\n   * parameters are inserted into the query string as empty strings if not provided by the user.\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle (required) - Number, >= 1971.\r\n   * @param {string} [params.make] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\r\n   * @param {string} [params.model] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\r\n   * @param {string} [params.units] - \"Metric\" (default), or \"US\" for United States customary units.\r\n   * @returns {(Promise<GetCanadianVehicleSpecificationsResponse>)} Api Response object.\r\n   */\r\n  async GetCanadianVehicleSpecifications(params: {\r\n    year: number;\r\n    make?: string;\r\n    model?: string;\r\n    units?: string;\r\n  }): Promise<GetCanadianVehicleSpecificationsResponse> {\r\n    const action = 'GetCanadianVehicleSpecifications';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofMake = getTypeof(params.make);\r\n    if (params.make && typeofMake !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.make\" argument must be of type string, got: ` +\r\n            `<${typeofMake}> ${params.make}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModel = getTypeof(params.model);\r\n    if (params.model && typeofModel !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.model\" argument must be of type string, got: ` +\r\n            `<${typeofModel}> ${params.model}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofUnits = getTypeof(params.units);\r\n    if (params.units && typeofUnits !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.units\" argument must be of type string, got: ` +\r\n            `<${typeofUnits}> ${params.units}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Set default query parameters to empty strings if not provided by the user */\r\n    const make = params.make || '';\r\n    const model = params.model || '';\r\n    const units = params.units || '';\r\n\r\n    const params_ = {\r\n      year: params.year,\r\n      make,\r\n      model,\r\n      units,\r\n    };\r\n\r\n    /*\r\n     * Build the 'default' query string to be appended to the URL.\r\n     *\r\n     * Additionally, sets the allowEmptyStringValues option (2nd argument) to true because\r\n     * this API action will return a 404 error if any of the query parameters are missing from the query string.\r\n     * This is the only API action with this behaviour (\"year\" is the only param the user must provide).\r\n     */\r\n    const queryString = await this.buildQueryString(\r\n      params_,\r\n      true\r\n    ).catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then((response) => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetCanadianVehicleSpecificationsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResults\r\n */\r\nexport type GetCanadianVehicleSpecificationsResults = {\r\n  Specs: Array<{\r\n    Name: string;\r\n    Value: string;\r\n  }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetCanadianVehicleSpecifications API Action.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResponse\r\n */\r\nexport type GetCanadianVehicleSpecificationsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetCanadianVehicleSpecificationsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["GetCanadianVehicleSpecifications","Fetch","[object Object]","userConfig","super","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofYear","year","typeofMake","make","typeofModel","model","typeofUnits","units","params_","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAAyCC,EACpDC,YAAYC,GACVC,MAAMD,GAuBFD,iCAAiCG,4CAMrC,MAAMC,EAAS,mCAGTC,EAAeC,EAAUH,GAC/B,GAAqB,WAAjBE,EACF,OAAOE,QAAQC,OACb,IAAIC,MAEA,qFAAIJ,MAAiBF,MAK7B,MAAMO,EAAaJ,EAAUH,EAAOQ,MACpC,GAAmB,WAAfD,EACF,OAAOH,QAAQC,OACb,IAAIC,MAEA,0GAAIC,MAAeP,EAAOQ,SAKlC,MAAMC,EAAaN,EAAUH,EAAOU,MACpC,GAAIV,EAAOU,MAAuB,WAAfD,EACjB,OAAOL,QAAQC,OACb,IAAIC,MAEA,0FAAIG,MAAeT,EAAOU,SAKlC,MAAMC,EAAcR,EAAUH,EAAOY,OACrC,GAAIZ,EAAOY,OAAyB,WAAhBD,EAClB,OAAOP,QAAQC,OACb,IAAIC,MAEA,2FAAIK,MAAgBX,EAAOY,UAKnC,MAAMC,EAAcV,EAAUH,EAAOc,OACrC,GAAId,EAAOc,OAAyB,WAAhBD,EAClB,OAAOT,QAAQC,OACb,IAAIC,MAEA,2FAAIO,MAAgBb,EAAOc,UAMnC,MAAMJ,EAAOV,EAAOU,MAAQ,GACtBE,EAAQZ,EAAOY,OAAS,GACxBE,EAAQd,EAAOc,OAAS,GAExBC,EAAU,CACdP,KAAMR,EAAOQ,KACbE,KAAAA,EACAE,MAAAA,EACAE,MAAAA,GAUIE,QAAoBC,KAAKC,iBAC7BH,GACA,GACAI,MAAOC,GACPhB,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCmB,OAKnDC,EAAM,GAAGJ,KAAKK,WAAWrB,IAASe,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,KAAMC,GAAaA,GACnBN,MAAOC,GACNhB,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8BmB"}