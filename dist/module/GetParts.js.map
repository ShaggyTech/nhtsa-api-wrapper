{"version":3,"file":"GetParts.js","sources":["../../src/api/actions/GetParts.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetParts\r\n * @category Actions\r\n * @description GetParts NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetParts](module-api_actions_GetParts.GetParts.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetPartsResponse](#GetPartsResponse)\r\n * > - Type: [GetPartsResults](#GetPartsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetParts extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of ORGs with letter date in the given range of the dates\r\n   * and with specified Type (`params.type`) of ORG.\r\n   * - Up to 1000 results will be returned at a time.\r\n   * - Get the next page by incrementing the `params.page` query parameter.\r\n   * - All query `params` are optional.\r\n   *\r\n   * @async\r\n   * @param {object} [params] - Query Search Parameters to append to the URL.\r\n   * @param {number} [params.type] - Specified type of ORG to search.\r\n   * @param {string} [params.fromDate] - Start date of search query.\r\n   * @param {string} [params.toDate] - End date of search query.\r\n   * @param {number} [params.page] - Which page number of results to request (100 results per page).\r\n   * @returns {(Promise<GetPartsResponse | Error>)} Api Response object.\r\n   */\r\n  async GetParts(params?: {\r\n    type?: number;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    page?: number;\r\n  }): Promise<GetPartsResponse | Error> {\r\n    const action = 'GetParts';\r\n\r\n    const type: number | undefined = params?.type;\r\n    const fromDate: string | undefined = params?.fromDate;\r\n    const toDate: string | undefined = params?.toDate;\r\n    const page: number | undefined = params?.page;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: <${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.type of type number */\r\n    const typeofType = getTypeof(type);\r\n    if (type && typeofType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.type\" argument must be of type number, got: <${typeofType}> ${type}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.fromDate of type string */\r\n    const typeofFromDate = getTypeof(fromDate);\r\n    if (fromDate && typeofFromDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.fromDate\" argument must be of type string, got: <${typeofFromDate}> ${fromDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.toDate of type number */\r\n    const typeofToDate = getTypeof(toDate);\r\n    if (toDate && typeofToDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.toDate\" argument must be of type string, got: <${typeofToDate}> ${toDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.page of type number */\r\n    const typeofPage = getTypeof(page);\r\n    if (page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: <${typeofPage}> ${page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetPartsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResults\r\n */\r\nexport type GetPartsResults = {\r\n  CoverLetterURL: string;\r\n  LetterDate: string;\r\n  ManufacturerId: number;\r\n  ManufacturerName: string;\r\n  ModelYearFrom: string;\r\n  ModelYearTo: string;\r\n  Name: string;\r\n  Type: string;\r\n  URL: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetParts API Action.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResponse\r\n */\r\nexport type GetPartsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetPartsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["GetParts","Fetch","[object Object]","userConfig","super","params","type","fromDate","toDate","page","typeofParams","getTypeof","Promise","reject","Error","typeofType","typeofFromDate","typeofToDate","typeofPage","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"iGAgCaA,UAAiBC,EAC5BC,YAAYC,GACVC,MAAMD,GAkBFD,SAASG,wDAMb,MAEMC,YAA2BD,wBAAQC,KACnCC,YAA+BF,wBAAQE,SACvCC,YAA6BH,wBAAQG,OACrCC,YAA2BJ,wBAAQI,KAGnCC,EAAeC,EAAUN,GAC/B,GAAIA,GAA2B,WAAjBK,EACZ,OAAOE,QAAQC,OACb,IAAIC,MACF,6DAA8DJ,MAAiBL,MAMrF,MAAMU,EAAaJ,EAAUL,GAC7B,GAAIA,GAAuB,WAAfS,EACV,OAAOH,QAAQC,OACb,IAAIC,MACF,kEAAmEC,MAAeT,MAMxF,MAAMU,EAAiBL,EAAUJ,GACjC,GAAIA,GAA+B,WAAnBS,EACd,OAAOJ,QAAQC,OACb,IAAIC,MACF,sEAAuEE,MAAmBT,MAMhG,MAAMU,EAAeN,EAAUH,GAC/B,GAAIA,GAA2B,WAAjBS,EACZ,OAAOL,QAAQC,OACb,IAAIC,MACF,oEAAqEG,MAAiBT,MAM5F,MAAMU,EAAaP,EAAUF,GAC7B,GAAIA,GAAuB,WAAfS,EACV,OAAON,QAAQC,OACb,IAAIC,MACF,kEAAmEI,MAAeT,MAMxF,MAAMU,QAAoBC,KAAKC,iBAAiBhB,GAAQiB,MAAMC,GAC5DX,QAAQC,OACN,IAAIC,MAAM,0CAA2CS,OAKnDC,EAAM,GAAGJ,KAAKK,mBAAoBN,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,KAAKC,GAAYA,GACjBN,MAAMC,GACLX,QAAQC,OAAO,IAAIC,MAAM,gCAAiCS"}