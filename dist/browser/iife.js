var NHTSA=function(e){"use strict";var r=Object.freeze({__proto__:null});function t(e,r,t,o){return new(t||(t=Promise))((function(n,s){function i(e){try{c(o.next(e))}catch(e){s(e)}}function a(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){e.done?n(e.value):new t((function(r){r(e.value)})).then(i,a)}c((o=o.apply(e,r||[])).next())}))}function o(e){const r=Object.prototype.toString.call(e).toLowerCase();return r.slice(8,r.length-1)}const n={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9},s=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2];function i(e){if("string"!=typeof e||17!=e.length)return!1;const r=(e=e.toUpperCase()).split(""),t=r[8];if(isNaN(parseInt(t))&&"X"!==t)return!1;const o="X"===t?10:parseInt(t);return r.map((e,r)=>{let t;t=isNaN(parseInt(e))?n[e]:parseInt(e);return t*s[r]}).reduce((e,r)=>e+r,0)%11===o}const a={apiResponseFormat:"json",baseUrl:"https://vpic.nhtsa.dot.gov/api/vehicles",options:{}};class c{constructor(e){let r;r=e&&"object"===o(e)?Object.assign(Object.assign(Object.assign({},a),e),{options:Object.assign(Object.assign({},a.options),e.options)}):Object.assign({},a),this.apiResponseFormat="json",this.baseUrl=r.baseUrl,this.options=r.options}buildQueryString(e,r=!1){return t(this,void 0,void 0,(function*(){return e=e&&"object"===o(e)?Object.assign(Object.assign({},e),{format:this.apiResponseFormat}):{format:this.apiResponseFormat},yield function(e={},r=!1){if("object"!==o(e))return Promise.reject(new Error("queryString(params) - expected params in the form of an object, got: "+e));const t=Object.entries(e),n=t.length;if(n<1)return Promise.resolve("");let s=!1;const i=t.map(([e,t],i)=>{let a="",c="";const u=o(t);if(t&&"number"===u&&(t=t.toString()),(t||r)&&("string"===u||"number"===u))return s||(a="?",s=!0),i<n-1&&(c="&"),`${a}${e}=${t}${c}`});return Promise.resolve(encodeURI(i.join("")))}(e,r)}))}get(e,r={}){return t(this,void 0,void 0,(function*(){const t=o(e);if("string"!==t)return Promise.reject(new Error("Fetch.get(url) - url argument must be of type string, got: "+t));const n=o(r);if("object"!==n)return Promise.reject(new Error("Fetch.get(url, options) - options argument must be of type object, got: "+n));const s=Object.assign(Object.assign({},this.options),r),i=yield fetch(e,s).then(e=>{if(!(null==e?void 0:e.status)||e.status>=400)throw new Error(`Bad response from server, code: ${null==e?void 0:e.status}, text: ${null==e?void 0:e.statusText}, headers: ${null==e?void 0:e.headers}`);return e}).catch(e=>Promise.reject(new Error("Fetch.get() http error: "+e))),a=yield i.json().then(e=>e),c=Object.assign(Object.assign({},a),{FetchResponse:{headers:i.headers,ok:i.ok,redirected:i.redirected,status:i.status,statusText:i.statusText,url:i.url}});return Promise.resolve(c)}))}}class u extends c{constructor(e){super(e)}DecodeVin(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVin",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`DecodeVin, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`DecodeVin, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==i)return Promise.reject(new Error(`DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class d extends c{constructor(e){super(e)}DecodeVinExtended(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinExtended",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`DecodeVinExtended, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`DecodeVinExtended, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==i)return Promise.reject(new Error(`DecodeVinExtended, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class l extends c{constructor(e){super(e)}DecodeVinValues(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinValues",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`DecodeVinValues, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`DecodeVinValues, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"string"!==i&&"number"!==i)return Promise.reject(new Error(`DecodeVinValues, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class m extends c{constructor(e){super(e)}DecodeVINValuesBatch(e){return t(this,void 0,void 0,(function*(){const r="DecodeVINValuesBatch",t=o(e);if("string"!==t)return Promise.reject(new Error(`DecodeVINValuesBatch, "inputString" argument is required and must be of type string, got: <${t}> ${e}`));const n=`${this.baseUrl}/${r}/`,s=encodeURI(`DATA=${e}&format=json`);return yield this.get(n,{method:"POST",headers:{"content-type":"application/x-www-form-urlencoded"},body:s}).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class g extends c{constructor(e){super(e)}DecodeVinValuesExtended(e,r){return t(this,void 0,void 0,(function*(){const t="DecodeVinValuesExtended",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`DecodeVinValuesExtended, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error(`DecodeVinValuesExtended, "vin" argument is required and must be of type string, got: <${s}> ${e}`));const i=o(null==r?void 0:r.modelYear);if((null==r?void 0:r.modelYear)&&"number"!==i)return Promise.reject(new Error(`DecodeVinValuesExtended, "params.modelYear" argument is required and must be of type string or number, got: <${i}> ${r.modelYear}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class h extends c{constructor(e){super(e)}DecodeWMI(e){return t(this,void 0,void 0,(function*(){const r="DecodeWMI",t=o(e);if("string"!==t)return Promise.reject(new Error(`DecodeWMI, "WMI" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class $ extends c{constructor(e){super(e)}GetAllMakes(){return t(this,void 0,void 0,(function*(){const e=yield this.buildQueryString().catch(e=>Promise.reject(new Error("GetAllMakes, Error building query string: "+e))),r=`${this.baseUrl}/GetAllMakes${e}`;return yield this.get(r).then(e=>e).catch(e=>Promise.reject(new Error("GetAllMakes, Fetch.get() error: "+e)))}))}}class p extends c{constructor(e){super(e)}GetAllManufacturers(e={}){return t(this,void 0,void 0,(function*(){const r="GetAllManufacturers",t=o(e);if("object"!==t)return Promise.reject(new Error(`GetAllManufacturers, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.manufacturerType);if(e.manufacturerType&&"string"!==n)return Promise.reject(new Error(`GetAllManufacturers, "params.manufacturerType" argument must be of type string, got: <${n}> ${e.manufacturerType}`));const s=o(e.page);if(e.page&&"number"!==s)return Promise.reject(new Error(`GetAllManufacturers, "params.page" argument must be of type number, got: <${s}> ${e.page}`));const i=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}${i}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class y extends c{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return t(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",t=o(e);if("object"!==t)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.year" argument is required and must be of type number, got: <${n}> ${e.year}`));const s=o(e.make);if(e.make&&"string"!==s)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.make" argument must be of type string, got: <${s}> ${e.make}`));const i=o(e.model);if(e.model&&"string"!==i)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.model" argument must be of type string, got: <${i}> ${e.model}`));const a=o(e.units);if(e.units&&"string"!==a)return Promise.reject(new Error(`GetCanadianVehicleSpecifications, "params.units" argument must be of type string, got: <${a}> ${e.units}`));const c=e.make||"",u=e.model||"",d=e.units||"",l={year:e.year,make:c,model:u,units:d},m=yield this.buildQueryString(l,!0).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),g=`${this.baseUrl}/${r}${m}`;return yield this.get(g).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class b extends c{constructor(e){super(e)}GetEquipmentPlantCodes(e){return t(this,void 0,void 0,(function*(){const r="GetEquipmentPlantCodes",t=o(e);if("object"!==t)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params" argument must be of type object, got: <${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.year" argument is required and must be of type number, got: <${n}> ${e.year}`));const s=o(e.equipmentType);if("number"!==s)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.equipmentType" argument is required and must be of type number, got: <${s}> ${e.equipmentType}`));const i=o(e.reportType);if("string"!==i)return Promise.reject(new Error(`GetEquipmentPlantCodes, "params.reportType" argument is required and must be of type string, got: <${i}> ${e.reportType}`));const a=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),c=`${this.baseUrl}/${r}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class f extends c{constructor(e){super(e)}GetMakeForManufacturer(e){return t(this,void 0,void 0,(function*(){const r="GetMakeForManufacturer",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`GetMakeForManufacturer, "manufacturer" argument is required and must be of type string or number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class j extends c{constructor(e){super(e)}GetMakesForManufacturerAndYear(e,r){return t(this,void 0,void 0,(function*(){const t="GetMakesForManufacturerAndYear",n=o(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "manufacturer" argument is required and must be of type string or number, got: <${n}> ${e}`));const s=o(r);if("object"!==s)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "params" argument is required and must be of type object, got: <${s}> ${r}`));const i=o(r.year);if("number"!==i)return Promise.reject(new Error(`GetMakesForManufacturerAndYear, "params.year" argument is required and must be of type number, got: <${i}> ${r.year}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class E extends c{constructor(e){super(e)}GetMakesForVehicleType(e){return t(this,void 0,void 0,(function*(){const r="GetMakesForVehicleType",t=o(e);if("string"!==t)return Promise.reject(new Error(`GetMakesForVehicleType, "typeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class M extends c{constructor(e){super(e)}GetManufacturerDetails(e){return t(this,void 0,void 0,(function*(){const r="GetManufacturerDetails",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`GetManufacturerDetails, "manufacturer" argument is required and must be of type string or number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class G extends c{constructor(e){super(e)}GetModelsForMake(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`GetModelsForMake, "makeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class P extends c{constructor(e){super(e)}GetModelsForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`GetModelsForMakeId, "makeId" argument is required and must be of type number, got: <${t}> ${e}`));const n=yield this.buildQueryString({}).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class V extends c{constructor(e){super(e)}GetModelsForMakeIdYear(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeIdYear",t=null==e?void 0:e.makeId,n=null==e?void 0:e.modelYear,s=null==e?void 0:e.vehicleType,i=o(e);if("object"!==i)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params" argument must be of type object, got: <${i}> ${e}`));const a=o(t);if("number"!==a)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.makeId" argument is required and must be of type number, got: <${a}> ${t}`));if(!n&&!s)return Promise.reject(new Error(`GetModelsForMakeIdYear, either one of "params.modelYear" or "params.vehicleType" is required, got: ${n} | ${s}`));const c=o(n);if(n&&"number"!==c)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.modelYear" must be of type number, got: <${c}> ${n}`));const u=o(s);if(s&&"string"!==u)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.vehicleType" must be of type string, got: <${u}> ${s}`));let d=`${r}/makeId/${t}/`;d+=n&&s?`modelYear/${n}/vehicleType/${s}`:n?"modelYear/"+n:"vehicleType/"+s;const l=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),m=`${this.baseUrl}/${d}${l}`;return yield this.get(m).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class w extends c{constructor(e){super(e)}GetModelsForMakeYear(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeYear",t=null==e?void 0:e.make,n=null==e?void 0:e.modelYear,s=null==e?void 0:e.vehicleType,i=o(e);if("object"!==i)return Promise.reject(new Error(`GetModelsForMakeYear, "params" argument must be of type object, got: <${i}> ${e}`));const a=o(t);if("string"!==a)return Promise.reject(new Error(`GetModelsForMakeYear, "params.make" argument is required and must be of type string, got: <${a}> ${t}`));if(!n&&!s)return Promise.reject(new Error(`GetModelsForMakeYear, either one of "params.modelYear" or "params.vehicleType" is required, got: ${n} | ${s}`));const c=o(n);if(n&&"number"!==c)return Promise.reject(new Error(`GetModelsForMakeYear, "params.modelYear" must be of type number, got: <${c}> ${n}`));const u=o(s);if(s&&"string"!==u)return Promise.reject(new Error(`GetModelsForMakeYear, "params.vehicleType" must be of type string, got: <${u}> ${s}`));let d=`${r}/make/${e.make}/`;d+=n&&s?`modelYear/${n}/vehicleType/${s}`:n?"modelYear/"+n:"vehicleType/"+s;const l=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),m=`${this.baseUrl}/${d}${l}`;return yield this.get(m).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class v extends c{constructor(e){super(e)}GetParts(e){return t(this,void 0,void 0,(function*(){const r="GetParts",t=null==e?void 0:e.type,n=null==e?void 0:e.fromDate,s=null==e?void 0:e.toDate,i=null==e?void 0:e.page,a=o(e);if(e&&"object"!==a)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: <${a}> ${e}`));const c=o(t);if(t&&"number"!==c)return Promise.reject(new Error(`${r}, "params.type" argument must be of type number, got: <${c}> ${t}`));const u=o(n);if(n&&"string"!==u)return Promise.reject(new Error(`${r}, "params.fromDate" argument must be of type string, got: <${u}> ${n}`));const d=o(s);if(s&&"string"!==d)return Promise.reject(new Error(`${r}, "params.toDate" argument must be of type string, got: <${d}> ${s}`));const l=o(i);if(i&&"number"!==l)return Promise.reject(new Error(`${r}, "params.page" argument must be of type number, got: <${l}> ${i}`));const m=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),g=`${this.baseUrl}/${r}${m}`;return yield this.get(g).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class F extends c{constructor(e){super(e)}GetVehicleTypesForMake(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`GetVehicleTypesForMake, "makeName" argument is required and must be of type string, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class k extends c{constructor(e){super(e)}GetVehicleTypesForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`GetVehicleTypesForMakeId, "makeId" argument is required and must be of type number, got: <${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class q extends c{constructor(e){super(e)}GetVehicleVariableList(){return t(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class D extends c{constructor(e){super(e)}GetVehicleVariableValuesList(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleVariableValuesList",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`GetVehicleVariableValuesList, "variableValue" argument is required and must be of type string or number, got: <${t}> ${e}`));"string"===t&&(e=encodeURI(e));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),s=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(s).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class I extends c{constructor(e){super(e)}GetWMIsForManufacturer(e,r){return t(this,void 0,void 0,(function*(){const t="GetWMIsForManufacturer",n=o(r);if(r&&"object"!==n)return Promise.reject(new Error(`GetWMIsForManufacturer, "params" argument must be of type object, got: <${n}> ${r}`));const s=o(e);if("string"!==s&&"number"!==s)return Promise.reject(new Error(`GetWMIsForManufacturer, "manufacturer" argument is required and must be of type string or number, got: <${s}> ${e}`));const i=o(null==r?void 0:r.vehicleType);if((null==r?void 0:r.vehicleType)&&"string"!==i&&"number"!==i)return Promise.reject(new Error(`GetWMIsForManufacturer, "vehicleType" argument must be of type string or number, got: <${i}> ${r.vehicleType}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),c=`${this.baseUrl}/${t}/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class Y extends c{constructor(e){super(e),this.DecodeVin=u.prototype.DecodeVin,this.DecodeVinExtended=d.prototype.DecodeVinExtended,this.DecodeVinValues=l.prototype.DecodeVinValues,this.DecodeVINValuesBatch=m.prototype.DecodeVINValuesBatch,this.DecodeVinValuesExtended=g.prototype.DecodeVinValuesExtended,this.DecodeWMI=h.prototype.DecodeWMI,this.GetAllMakes=$.prototype.GetAllMakes,this.GetAllManufacturers=p.prototype.GetAllManufacturers,this.GetCanadianVehicleSpecifications=y.prototype.GetCanadianVehicleSpecifications,this.GetEquipmentPlantCodes=b.prototype.GetEquipmentPlantCodes,this.GetMakeForManufacturer=f.prototype.GetMakeForManufacturer,this.GetMakesForManufacturerAndYear=j.prototype.GetMakesForManufacturerAndYear,this.GetMakesForVehicleType=E.prototype.GetMakesForVehicleType,this.GetManufacturerDetails=M.prototype.GetManufacturerDetails,this.GetModelsForMake=G.prototype.GetModelsForMake,this.GetModelsForMakeId=P.prototype.GetModelsForMakeId,this.GetModelsForMakeIdYear=V.prototype.GetModelsForMakeIdYear,this.GetModelsForMakeYear=w.prototype.GetModelsForMakeYear,this.GetParts=v.prototype.GetParts,this.GetVehicleTypesForMake=F.prototype.GetVehicleTypesForMake,this.GetVehicleTypesForMakeId=k.prototype.GetVehicleTypesForMakeId,this.GetVehicleVariableList=q.prototype.GetVehicleVariableList,this.GetVehicleVariableValuesList=D.prototype.GetVehicleVariableValuesList,this.GetWMIsForManufacturer=I.prototype.GetWMIsForManufacturer,this.isValidVin=i}}const T=new Y;return e.ActionTypes=r,e.Client=T,e.DecodeVINValuesBatch=m,e.DecodeVin=u,e.DecodeVinExtended=d,e.DecodeVinValues=l,e.DecodeVinValuesExtended=g,e.DecodeWMI=h,e.Fetch=c,e.GetAllMakes=$,e.GetAllManufacturers=p,e.GetCanadianVehicleSpecifications=y,e.GetEquipmentPlantCodes=b,e.GetMakeForManufacturer=f,e.GetMakesForManufacturerAndYear=j,e.GetMakesForVehicleType=E,e.GetManufacturerDetails=M,e.GetModelsForMake=G,e.GetModelsForMakeId=P,e.GetModelsForMakeIdYear=V,e.GetModelsForMakeYear=w,e.GetParts=v,e.GetVehicleTypesForMake=F,e.GetVehicleTypesForMakeId=k,e.GetVehicleVariableList=q,e.GetVehicleVariableValuesList=D,e.GetWMIsForManufacturer=I,e.NHTSA=Y,e.isValidVin=i,e}({});
