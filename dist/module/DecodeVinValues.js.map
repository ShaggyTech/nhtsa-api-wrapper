{"version":3,"file":"DecodeVinValues.js","sources":["../../src/api/actions/DecodeVinValues.ts"],"sourcesContent":["/**\r\n * @module api/actions/DecodeVinValues\r\n * @category Actions\r\n * @description DecodeVinValues NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinValues](module-api_actions_DecodeVinValues.DecodeVinValues.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinValuesResponse](#DecodeVinValuesResponse)\r\n * > - Type: [DecodeVinValuesResults](#DecodeVinValuesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinValues extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The DecodeVinValues API Action will decode the VIN with the Results returned in a _flat file_ format.\r\n   * - The Results will be made available in a flat file format of a single object containing\r\n   *   'key<string>: value<string>' results.\r\n   * - Providing params.modelYear allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinValuesResponse | Error>)} Api Response object.\r\n   */\r\n  async DecodeVinValues(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: number;\r\n    }\r\n  ): Promise<DecodeVinValuesResponse | Error> {\r\n    const action = 'DecodeVinValues';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (\r\n      params?.modelYear &&\r\n      typeofModelYear !== 'string' &&\r\n      typeofModelYear !== 'number'\r\n    ) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinValuesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResults\r\n */\r\nexport type DecodeVinValuesResults = {\r\n  /** Flat file format, single object containing keys and values of type string */\r\n  [name: string]: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinValues API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResponse\r\n */\r\nexport type DecodeVinValuesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /**\r\n   * The search results returned by the NHSTA API request.\r\n   * Flat file format, single object containing keys and values of type string\r\n   * */\r\n  Results: Array<DecodeVinValuesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["DecodeVinValues","Fetch","[object Object]","userConfig","super","vin","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofVin","typeofModelYear","modelYear","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"iGAgCaA,UAAwBC,EACnCC,YAAYC,GACVC,MAAMD,GAoBFD,gBACJG,EACAC,oDAIA,MAAMC,EAAS,kBAGTC,EAAeC,EAAUH,GAC/B,GAAIA,GAA2B,WAAjBE,EACZ,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGL,qDACD,IAAIC,MAAiBF,MAK7B,MAAMO,EAAYJ,EAAUJ,GAC5B,GAAkB,WAAdQ,EACF,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGL,kEACD,IAAIM,MAAcR,MAK1B,MAAMS,EAAkBL,YAAUH,wBAAQS,WAC1C,cACET,wBAAQS,YACY,WAApBD,GACoB,WAApBA,EAEA,OAAOJ,QAAQC,OACb,IAAIC,MACF,GAAGL,yFACD,IAAIO,MAAoBR,EAAOS,cAMvC,MAAMC,QAAoBC,KAAKC,iBAAiBZ,GAAQa,MAAMC,GAC5DV,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCa,OAKnDC,EAAM,GAAGJ,KAAKK,WAAWf,KAAUF,IAAMW,IAG/C,aAAaC,KAAKM,IAAIF,GACnBG,KAAKC,GAAYA,GACjBN,MAAMC,GACLV,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8Ba"}