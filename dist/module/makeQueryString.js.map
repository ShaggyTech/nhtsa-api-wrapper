{"version":3,"file":"makeQueryString.js","sources":["../../src/utils/makeQueryString.ts"],"sourcesContent":["import { getTypeof } from '../utils';\r\n\r\n/**\r\n * @module utils/makeQueryString\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Utility method to generate a query string compatible with the NHSTA API, for use in an API URL string.\r\n *\r\n * @async\r\n *\r\n * @param {object} params - Object of Type [QueryStringParameters](module-makeQueryString.QueryStringParameters.html).\r\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\r\n * - Given params of `{ paramName: \"\" }` , setting this to true will use 'paramName=' in the final query string.\r\n * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\r\n *\r\n * @returns {Promise<string>|Error} A query string of search parameters for use in a final Fetch.get URL.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const qs = await NHTSA.makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { makeQueryString } from '@shaggytools/nhtsa-api-wrapper'\r\n * const qs = await makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>Single Param:</caption>\r\n * const qs = await makeQueryString({\r\n *   modelYear: 2019\r\n * }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2019\"\r\n *\r\n * @example <caption>Multiple Params:</caption>\r\n * const qs = await makeQueryString({\r\n *   whatever: 'some value',\r\n *   modelYear: 2006,\r\n *   page: \"2\"\r\n * }).catch(error => error)\r\n *\r\n * console.log(qs) // \"?whatever=some%20value&modelYear=2006&page=2\"\r\n *\r\n * @example <caption>Empty Params Object:</caption>\r\n * const qs = await makeQueryString({}).catch(error => error)\r\n *\r\n * console.log(qs) // \"\"\r\n *\r\n * @example <caption>Using allowEmptyStringValues option:</caption>\r\n * const qs = await makeQueryString({\r\n *   year: 2016,\r\n *   vehicleType: '',\r\n *   make: 'Audi'\r\n * }, true).catch(error => error)\r\n *\r\n * console.log(qs) // \"?year=2016&vehicleType=&make=Audi\"\r\n *\r\n */\r\nexport function makeQueryString(\r\n  params: import('./types').QueryStringParameters = {},\r\n  allowEmptyStringValues = false\r\n): Promise<string | Error> {\r\n  /* Beginning of error message string */\r\n  const errorBase =\r\n    'queryString(params) - expected params in the form of an object, got:';\r\n\r\n  /* Runtime type guard params argument, must be of type object */\r\n  if (Object.prototype.toString.call(params) !== '[object Object]') {\r\n    return Promise.reject(new Error(`${errorBase} ${params}`));\r\n  }\r\n\r\n  /* Setup QueryString for Array mapping */\r\n  const entries = Object.entries(params);\r\n  const paramsLength = entries.length;\r\n\r\n  /* Return an empty string if params are an empty object */\r\n  if (paramsLength < 1) return Promise.resolve('');\r\n\r\n  /* Used to check if we've already prepended a valid query param */\r\n  let isPrepended = false;\r\n\r\n  /* Map [key]:value entries to \"key=value\" strings in an array */\r\n  const queryStringArray = entries.map(([key, value], index) => {\r\n    let prepend = '';\r\n    let append = '';\r\n\r\n    const typeofValue = getTypeof(value);\r\n\r\n    /* Convert any number values to a string */\r\n    if (value && typeofValue === 'number') {\r\n      value = value.toString();\r\n    }\r\n\r\n    /* Skip any invalid values, only string and number value types are valid */\r\n    if (\r\n      (value || allowEmptyStringValues) &&\r\n      (typeofValue === 'string' || typeofValue === 'number')\r\n    ) {\r\n      /* if this is the first param we need to prepend the '?' char */\r\n      if (!isPrepended) {\r\n        prepend = '?';\r\n        isPrepended = true;\r\n      }\r\n      /* if there is another param coming after this one we need to append the '&' char */\r\n      if (index < paramsLength - 1) {\r\n        append = '&';\r\n      }\r\n\r\n      /* Add the completed partial query string to queryStringArray */\r\n      return `${prepend}${key}=${value}${append}`;\r\n    }\r\n    return;\r\n  });\r\n\r\n  /* Join and return the completed query string after URI encoding */\r\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\r\n}\r\n"],"names":["makeQueryString","params","allowEmptyStringValues","Object","prototype","toString","call","Promise","reject","Error","errorBase","entries","paramsLength","length","resolve","isPrepended","queryStringArray","map","_a","index","key","value","prepend","append","typeofValue","getTypeof","encodeURI","join"],"mappings":"qHA2DgBA,EACdC,EACAC,gBADAD,mBACAC,MAOA,GAA+C,oBAA3CC,OAAOC,UAAUC,SAASC,KAAKL,GACjC,OAAOM,QAAQC,OAAO,IAAIC,MAASC,wEAAaT,IAIlD,IAAMU,EAAUR,OAAOQ,QAAQV,GACzBW,EAAeD,EAAQE,OAG7B,GAAID,EAAe,EAAG,OAAOL,QAAQO,QAAQ,IAG7C,IAAIC,GAAc,EAGZC,EAAmBL,EAAQM,KAAI,SAACC,EAAcC,OAAbC,OAAKC,OACtCC,EAAU,GACVC,EAAS,GAEPC,EAAcC,EAAUJ,GAQ9B,GALIA,GAAyB,WAAhBG,IACXH,EAAQA,EAAMhB,aAKbgB,GAASnB,KACO,WAAhBsB,GAA4C,WAAhBA,GAa7B,OAVKT,IACHO,EAAU,IACVP,GAAc,GAGZI,EAAQP,EAAe,IACzBW,EAAS,KAIJ,GAAGD,EAAUF,MAAOC,EAAQE,KAMvC,OAAOhB,QAAQO,QAAQY,UAAUV,EAAiBW,KAAK"}