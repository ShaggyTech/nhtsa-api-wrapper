import{F as e,_ as r,g as t}from"./Fetch-86b867a6.js";import"./isValidVin.js";class o extends e{constructor(e){super(e)}DecodeVin(e,o){return r(this,void 0,void 0,(function*(){const r=t(o);if(o&&"object"!==r)return Promise.reject(new Error('DecodeVin, "params" argument must be of type object, got: '+`<${r}> ${o}`));const i=t(e);if("string"!==i)return Promise.reject(new Error('DecodeVin, "vin" argument is required and must be of type string, got: '+`<${i}> ${e}`));const n=t(null==o?void 0:o.modelYear);if((null==o?void 0:o.modelYear)&&"number"!==n)return Promise.reject(new Error('DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: '+`<${n}> ${o.modelYear}`));const s=yield this.buildQueryString(o).catch(e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`))),c=`${this.baseUrl}/DecodeVin/${e}${s}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`)))}))}}export{o as DecodeVin};
//# sourceMappingURL=DecodeVin.js.map
