{"version":3,"file":"iife.js","sources":["../../src/utils/getTypeof.ts","../../src/utils/isValidVin.ts","../../src/api/Fetch.ts","../../src/utils/makeQueryString.ts","../../src/api/actions/DecodeVin.ts","../../src/api/actions/DecodeVinExtended.ts","../../src/api/actions/DecodeVinValues.ts","../../src/api/actions/DecodeVinValuesExtended.ts","../../src/api/actions/DecodeWMI.ts","../../src/api/actions/GetAllMakes.ts","../../src/api/actions/GetAllManufacturers.ts","../../src/api/actions/GetCanadianVehicleSpecifications.ts","../../src/api/actions/GetEquipmentPlantCodes.ts","../../src/api/actions/GetMakeForManufacturer.ts","../../src/api/actions/GetMakesForManufacturerAndYear.ts","../../src/api/actions/GetMakesForVehicleType.ts","../../src/api/actions/GetManufacturerDetails.ts","../../src/api/actions/GetModelsForMake.ts","../../src/api/actions/GetModelsForMakeId.ts","../../src/api/actions/GetModelsForMakeIdYear.ts","../../src/api/actions/GetModelsForMakeYear.ts","../../src/api/actions/GetParts.ts","../../src/api/actions/GetVehicleTypesForMake.ts","../../src/api/actions/GetVehicleTypesForMakeId.ts","../../src/api/actions/GetVehicleVariableList.ts","../../src/api/actions/GetVehicleVariableValuesList.ts","../../src/api/actions/GetWMIsForManufacturer.ts","../../src/api/NHTSA.ts","../../src/api/Client.ts"],"sourcesContent":["/**\r\n * @module utils/getTypeof\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\r\n *\r\n * @param {any} value - Any kind of value (string, object, array, function, etc).\r\n *\r\n * @returns {string} - Type of value, normalized to a lowercase string.\r\n */\r\nexport function getTypeof(value: any): string {\r\n  const toString: string = Object.prototype.toString\r\n    .call(value)\r\n    .toLowerCase(); /* ex: => '[object string]' or '[object array], etc. */\r\n  return toString.slice(8, toString.length - 1);\r\n}\r\n","/**\r\n * @module utils/isValidVin\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\r\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\r\n *\r\n * @param {string} vin - Vehicle Identification Number.\r\n *\r\n * @returns {Promise<boolean>} True for a valid VIN, false for an invalid VIN.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const isValid = await NHTSA.isValidVin('3VWD07AJ5EM388202').catch(error => error)\r\n * console.log(isValid) // true\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\r\n * const isValid = await isValidVin('3VWD07AJ5EM388202').catch(error => error)\r\n * console.log(isValid) // true\r\n *\r\n */\r\nexport async function isValidVin(vin: string): Promise<boolean> {\r\n  /* A valid VIN must be a string and is always exactly 17 digits */\r\n  if (typeof vin !== 'string' || vin.length != 17) {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  /* Normalize the vin to all uppercase letters */\r\n  vin = vin.toUpperCase();\r\n\r\n  /* split the vin digits into an array */\r\n  const vinArray: string[] = vin.split('');\r\n\r\n  /* checkDigit will be tested against the checkSum later */\r\n  const checkDigit: string = vinArray[8];\r\n\r\n  /*\r\n   * In a valid VIN, the checkDigit can either be:\r\n   * a number, 0-9 inclusive OR the character 'X'\r\n   */\r\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  /*\r\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\r\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\r\n   * to be converted as such.\r\n   */\r\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit);\r\n\r\n  /*\r\n   * There will need to be some way to translate vin digits that are alphabetic\r\n   * into their number value in the VIN algorithm transliteration table.\r\n   * Later, during the creation of the checkusm variable, those digits will be\r\n   * multiplied against their corresponding weight (by index) in the weightsArray.\r\n   * This transliteration table is a key part of the VIN validation algorithm.\r\n   */\r\n  const transliterationTable: object = {\r\n    A: 1,\r\n    B: 2,\r\n    C: 3,\r\n    D: 4,\r\n    E: 5,\r\n    F: 6,\r\n    G: 7,\r\n    H: 8,\r\n    J: 1,\r\n    K: 2,\r\n    L: 3,\r\n    M: 4,\r\n    N: 5,\r\n    P: 7,\r\n    R: 9,\r\n    S: 2,\r\n    T: 3,\r\n    U: 4,\r\n    V: 5,\r\n    W: 6,\r\n    X: 7,\r\n    Y: 8,\r\n    Z: 9\r\n  };\r\n\r\n  /*\r\n   * Later, during the creation of the 'checksum' variable, these weights will be\r\n   * multilplied by the value of their mirrored index vin digits.\r\n   * The array index of each weight corresponds to the same index of each\r\n   * digit in the 'vin'.\r\n   */\r\n  const weightsArray: number[] = [\r\n    8,\r\n    7,\r\n    6,\r\n    5,\r\n    4,\r\n    3,\r\n    2,\r\n    10,\r\n    0,\r\n    9,\r\n    8,\r\n    7,\r\n    6,\r\n    5,\r\n    4,\r\n    3,\r\n    2\r\n  ];\r\n\r\n  /*\r\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\r\n   * into numbers, using the above transliteration table.\r\n   * Then these numbers are multiplied against their corresponding weight\r\n   * in the weights array, matched by index position.\r\n   * All 17 of those digitValues are then added together and divided by 11.\r\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\r\n   */\r\n  const checksum: number =\r\n    vinArray\r\n      .map((digit: string, index: number) => {\r\n        let digitValue: number;\r\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\r\n        isNaN(parseInt(digit))\r\n          ? (digitValue = transliterationTable[digit])\r\n          : (digitValue = parseInt(digit));\r\n\r\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\r\n        const weight: number = weightsArray[index];\r\n\r\n        /* The final step for each digit is to multiply it by it's corresponding weight */\r\n        return digitValue * weight;\r\n      })\r\n      /* Then get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\r\n      .reduce((acc, currValue) => acc + currValue, 0) % 11;\r\n\r\n  /*\r\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\r\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\r\n   * we return true, otherwise the VIN is invalid and we return false.\r\n   */\r\n  return Promise.resolve(checksum === checkValue);\r\n}\r\n","/**\r\n * @module api/Fetch\r\n * @category API\r\n * @description API Fetch Logic.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [Fetch](module-api_Fetch.Fetch.html)\r\n * > - Constant: [BASE_URL](#~BASE_URL)\r\n * > - Constant: [DEFAULT_CONFIG](#~DEFAULT_CONFIG)\r\n * >\r\n * > **Types**\r\n * > - Type: [ApiResponse](#ApiResponse)\r\n * > - Type: [FetchConfig](#FetchConfig)\r\n * > - Type: [FetchRequestOptions](#FetchRequestOptions)\r\n * > - Type: [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body)\r\n * > - Type: [FetchResponse](#FetchResponse)\r\n * > - Type: [NhtsaResponse](#NhtsaResponse)\r\n */\r\n\r\n/* Module Dependencies */\r\nimport fetch from 'cross-fetch';\r\n/* Utilities */\r\nimport { getTypeof, makeQueryString } from '../utils';\r\n/* Types */\r\nimport { QueryStringParameters } from '../utils/types';\r\n\r\n/*****************\r\n * CONSTANTS\r\n ****************/\r\n\r\n/**\r\n * @constant {string} BASE_URL Default Fetch base URL string\r\n * @default 'https://vpic.nhtsa.dot.gov/api/vehicles'\r\n */\r\nexport const BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles';\r\n\r\n/**\r\n * @constant {module:api/Fetch.FetchConfig} DEFAULT_CONFIG Default Fetch configuration options\r\n * @property {string} apiResponseFormat=json\r\n * @property {string} baseUrl=BASE_URL Default: [BASE_URL](module-api_Fetch.html#~BASE_URL)\r\n * @property {FetchRequestOptions} options={method:\"GET\"}\r\n */\r\nexport const DEFAULT_CONFIG: FetchConfig = {\r\n  apiResponseFormat: 'json',\r\n  baseUrl: BASE_URL,\r\n  options: {}\r\n};\r\n\r\n/*****************\r\n * Fetch Class\r\n ****************/\r\n\r\n/**\r\n * Class wrapper containing API wrapper HTTP Fetch logic.\r\n *\r\n * > **Static Methods**:\r\n * > - [buildQueryString](#buildQueryString)\r\n * > - [get](#get)\r\n *\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n * @category API\r\n */\r\nexport class Fetch {\r\n  apiResponseFormat: string;\r\n  baseUrl?: string;\r\n  options?: FetchRequestOptions;\r\n\r\n  constructor(userConfig?: FetchConfig) {\r\n    let finalConfig: FetchConfig;\r\n\r\n    /* userConfig takes precedence over DEFAULT_CONFIG */\r\n    if (userConfig && getTypeof(userConfig) === 'object') {\r\n      finalConfig = {\r\n        ...DEFAULT_CONFIG,\r\n        ...userConfig,\r\n        options: { ...DEFAULT_CONFIG.options, ...userConfig.options }\r\n      };\r\n    } else {\r\n      finalConfig = { ...DEFAULT_CONFIG };\r\n    }\r\n\r\n    /** @private */\r\n    this.apiResponseFormat = 'json';\r\n    /** @private */\r\n    this.baseUrl = finalConfig.baseUrl;\r\n    /** @private */\r\n    this.options = finalConfig.options;\r\n  }\r\n\r\n  /**\r\n   * Builds a query string from QueryStringParameters.\r\n   *\r\n   * @param {QueryStringParameters} params - Object containing Key:Value pairs to build the URL query string with.\r\n   * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\r\n   * - Given params of `{paramName: \"\"}` , setting this to true will use 'paramName=' in the final query string.\r\n   * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\r\n   * @returns {(Promise<string | Error>)} A formatted NHSTA.dot.gov Vehicles API query string.\r\n   */\r\n  async buildQueryString(\r\n    params?: QueryStringParameters,\r\n    allowEmptyStringValues = false\r\n  ): Promise<string | Error> {\r\n    /*\r\n     * Make sure we're always using 'format=json' in the url Query parameters\r\n     * If the user provides a 'format' key in the params, during class instantiation we want to override it to 'json'\r\n     * This package may provide support for the other formats (CSV and XML) if requested.\r\n     */\r\n    if (!params || getTypeof(params) !== 'object') {\r\n      params = {\r\n        format: this.apiResponseFormat\r\n      };\r\n    } else {\r\n      params = { ...params, format: this.apiResponseFormat };\r\n    }\r\n\r\n    /* Return the completed query string */\r\n    return await makeQueryString(params, allowEmptyStringValues);\r\n  }\r\n\r\n  /**\r\n   * Uses the `cross-fetch` npm package to send HTTP requests and retrieve data from an API.\r\n   * - In browser environments, [whatwg-fetch](https://github.com/github/fetch/) window.fetch is used.\r\n   * - In node environments, [node-fetch](https://github.com/bitinn/node-fetch/) NPM package is used.\r\n   *\r\n   * @param {string} url - URL to fetch data from.\r\n   * @param {FetchRequestOptions} [options] - [Fetch options](https://github.github.io/fetch/#options).\r\n   * @returns {(Promise<module:api/Fetch.ApiResponse | Error>)} Response from the API.\r\n   */\r\n  async get(\r\n    url: string,\r\n    options: FetchRequestOptions = {}\r\n  ): Promise<ApiResponse | Error> {\r\n    /* Runtime typechecking */\r\n    const typeofUrl = getTypeof(url);\r\n    if (typeofUrl !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `Fetch.get(url) - url argument must be of type string, got: ${typeofUrl}`\r\n        )\r\n      );\r\n    }\r\n    const typeofOptions = getTypeof(options);\r\n    if (typeofOptions !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `Fetch.get(url, options) - options argument must be of type object, got: ${typeofOptions}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Combine user provided 'options' and class property 'this.options', user options overwrite class options */\r\n    const combinedOptions = { ...this.options, ...options };\r\n\r\n    /* Use the cross-fetch package to perform an HTTP request */\r\n    const response: Response = await fetch(url, combinedOptions)\r\n      .then(result => {\r\n        if (!result?.status || result.status >= 400) {\r\n          throw new Error(\r\n            `Bad response from server, code: ${result?.status}, text: ${result?.statusText}, headers: ${result?.headers}`\r\n          );\r\n        } else return result;\r\n      })\r\n      .catch(err =>\r\n        Promise.reject(new Error(`Fetch.get() http error: ${err}`))\r\n      );\r\n\r\n    /* Convert the NHTSA API data to JSON */\r\n    const NhtsaResponse: NhtsaResponse = await response\r\n      .json()\r\n      .then((json: NhtsaResponse): NhtsaResponse => json);\r\n\r\n    /* Add the fetch response information to the returned NHSTA API data */\r\n    const finalResult: ApiResponse = {\r\n      ...NhtsaResponse,\r\n      FetchResponse: {\r\n        headers: response.headers,\r\n        ok: response.ok,\r\n        redirected: response.redirected,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        url: response.url\r\n      }\r\n    };\r\n\r\n    /* Return the completed ApiResponse */\r\n    return Promise.resolve(finalResult);\r\n  }\r\n}\r\n\r\n/*****************\r\n * Types\r\n ****************/\r\n\r\n/**\r\n * Various fetch request body types.\r\n *\r\n * @typedef FetchRequestBodyTypes\r\n * @type {URLSearchParams | FormData | Blob | ArrayBuffer | DataView}\r\n *\r\n * @memberof module:api/Fetch\r\n */\r\nexport type FetchRequestBodyTypes =\r\n  | URLSearchParams\r\n  | FormData\r\n  | Blob\r\n  | ArrayBuffer\r\n  | DataView;\r\n\r\n/**\r\n * Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchRequestOptions\r\n */\r\nexport type FetchRequestOptions = {\r\n  /**HTTP request method - Default: \"GET\". */\r\n  method?: string;\r\n  /** HTTP request body - [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body). */\r\n  body?: string | FetchRequestBodyTypes;\r\n  /** [Object, Headers](https://github.github.io/fetch/#Headers) - Default: {}. */\r\n  headers?: {} | Headers;\r\n  /**\r\n   * Default: \"omit\" - Authentication credentials mode.\r\n   * - \"omit\" - don't include authentication credentials (e.g. Cookies) in the request.\r\n   * - \"same-origin\" - include credentials in requests to the same site\r\n   * - \"include\" - include credentials in requests to all sites.\r\n   */\r\n  credentials?: 'omit' | 'same-origin' | 'include';\r\n};\r\n\r\n/**\r\n * Used when instantiating a Fetch class or related subclass.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchConfig\r\n */\r\nexport type FetchConfig = {\r\n  /** Requested response format from the NHSTA API (hardcoded to 'json' for now). */\r\n  apiResponseFormat?: string;\r\n  /** Base of the URL to build fetch URLs from. */\r\n  baseUrl?: string;\r\n  /** Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}. */\r\n  options?: FetchRequestOptions;\r\n};\r\n\r\n/**\r\n * [Fetch API Response](https://github.github.io/fetch/#Response) properties.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias FetchResponse\r\n */\r\nexport type FetchResponse = {\r\n  /** The [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object associated with the response. */\r\n  headers: Headers;\r\n  /** A boolean indicating whether the response was successful (status in the range 200–299) or not. */\r\n  ok: boolean;\r\n  /** Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry). */\r\n  redirected: boolean;\r\n  /** The status code of the response. (This will be 200 for a success). */\r\n  status: number;\r\n  /** The status message corresponding to the status code. (e.g., OK for 200). */\r\n  statusText: string;\r\n  /** The URL of the response. */\r\n  url: string;\r\n};\r\n\r\n/**\r\n * Response data returned from the NHSTA API.\r\n *\r\n * @memberof module:api/Fetch\r\n * @alias NhtsaResponse\r\n */\r\nexport type NhtsaResponse = {\r\n  /** The number of items returned in the Results object. */\r\n  Count: number;\r\n  /** A message describing the Results. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\r\n  Results: Array<any>;\r\n};\r\n\r\n/**\r\n * Complete response returned by {@link module:api/Fetch.Fetch#get}.\r\n *\r\n * @see {@link module:api/Fetch.NhtsaResponse}\r\n * @see {@link module:api/Fetch.FetchResponse}\r\n * @memberof module:api/Fetch\r\n * @alias ApiResponse\r\n */\r\nexport type ApiResponse = {\r\n  /** The number of items returned in the Results object. */\r\n  Count: number;\r\n  /** A message describing the Results. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\r\n  Results: Array<any>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) Properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","import { getTypeof } from './getTypeof';\r\n\r\n/**\r\n * @module utils/makeQueryString\r\n * @category Utils\r\n */\r\n\r\n/**\r\n * Utility method to generate a query string compatible with the NHSTA API, for use in an API URL string.\r\n *\r\n * @async\r\n *\r\n * @param {object} params - Object of Type [QueryStringParameters](module-utils_makeQueryString.html#.QueryStringParameters).\r\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\r\n * - Given params of `{ paramName: \"\" }` , setting this to true will use 'paramName=' in the final query string.\r\n * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\r\n *\r\n * @returns {Promise<string>|Error} A query string of search parameters for use in a final Fetch.get URL.\r\n *\r\n * @example <caption>When loaded from the browser via html script tags</caption>\r\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\r\n * const qs = await NHTSA.makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>When loaded as a module</caption>\r\n * import { makeQueryString } from '@shaggytools/nhtsa-api-wrapper'\r\n * const qs = await makeQueryString({ modelYear: 2010 }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2010\"\r\n *\r\n * @example <caption>Single Param:</caption>\r\n * const qs = await makeQueryString({\r\n *   modelYear: 2019\r\n * }).catch(error => error)\r\n * console.log(qs) // \"?modelYear=2019\"\r\n *\r\n * @example <caption>Multiple Params:</caption>\r\n * const qs = await makeQueryString({\r\n *   whatever: 'some value',\r\n *   modelYear: 2006,\r\n *   page: \"2\"\r\n * }).catch(error => error)\r\n *\r\n * console.log(qs) // \"?whatever=some%20value&modelYear=2006&page=2\"\r\n *\r\n * @example <caption>Empty Params Object:</caption>\r\n * const qs = await makeQueryString({}).catch(error => error)\r\n *\r\n * console.log(qs) // \"\"\r\n *\r\n * @example <caption>Using allowEmptyStringValues option:</caption>\r\n * const qs = await makeQueryString({\r\n *   year: 2016,\r\n *   vehicleType: '',\r\n *   make: 'Audi'\r\n * }, true).catch(error => error)\r\n *\r\n * console.log(qs) // \"?year=2016&vehicleType=&make=Audi\"\r\n *\r\n */\r\nexport function makeQueryString(\r\n  params: QueryStringParameters = {},\r\n  allowEmptyStringValues = false\r\n): Promise<string | Error> {\r\n  /* Beginning of error message string */\r\n  const errorBase =\r\n    'queryString(params) - expected params in the form of an object, got:';\r\n\r\n  /* Runtime type guard params argument, must be of type object */\r\n  if (getTypeof(params) !== 'object') {\r\n    return Promise.reject(new Error(`${errorBase} ${params}`));\r\n  }\r\n\r\n  /* Setup QueryString for Array mapping */\r\n  const entries = Object.entries(params);\r\n  const paramsLength = entries.length;\r\n\r\n  /* Return an empty string if params are an empty object */\r\n  if (paramsLength < 1) return Promise.resolve('');\r\n\r\n  /* Used to check if we've already prepended a valid query param */\r\n  let isPrepended = false;\r\n\r\n  /* Map [key]:value entries to \"key=value\" strings in an array */\r\n  const queryStringArray = entries.map(([key, value], index) => {\r\n    let prepend = '';\r\n    let append = '';\r\n\r\n    const typeofValue = getTypeof(value);\r\n\r\n    /* Convert any number values to a string */\r\n    if (value && typeofValue === 'number') {\r\n      value = value.toString();\r\n    }\r\n\r\n    /* Skip any invalid values, only string and number value types are valid */\r\n    if (\r\n      (value || allowEmptyStringValues) &&\r\n      (typeofValue === 'string' || typeofValue === 'number')\r\n    ) {\r\n      /* if this is the first param we need to prepend the '?' char */\r\n      if (!isPrepended) {\r\n        prepend = '?';\r\n        isPrepended = true;\r\n      }\r\n      /* if there is another param coming after this one we need to append the '&' char */\r\n      if (index < paramsLength - 1) {\r\n        append = '&';\r\n      }\r\n\r\n      /* Add the completed partial query string to queryStringArray */\r\n      return `${prepend}${key}=${value}${append}`;\r\n    }\r\n    return;\r\n  });\r\n\r\n  /* Join and return the completed query string after URI encoding */\r\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\r\n}\r\n\r\n/**\r\n * Object containing Key:Value pairs to build the URL query string with.\r\n * - Parameter values may be either strings or numbers.\r\n *\r\n * @memberof module:utils/makeQueryString\r\n * @alias QueryStringParameters\r\n * @example\r\n * {\r\n * modelYear: 2009,\r\n * whatever: 'something'\r\n * }\r\n *\r\n */\r\nexport type QueryStringParameters = {\r\n  [propName: string]: string | number | undefined;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVin\r\n * @category Actions\r\n * @description DecodeVin NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVin](module-api_actions_DecodeVin.DecodeVin.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinResponse](#DecodeVinResponse)\r\n * > - Type: [DecodeVinResults](#DecodeVinResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVin extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The DecodeVin API Action will decode the VIN and the decoded output will be made available in the format of Key-value pairs.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This API also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *   - The 9th digit is not necessary.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinResponse | Error>)} - Api Response object.\r\n   */\r\n  async DecodeVin(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: number;\r\n    }\r\n  ): Promise<DecodeVinResponse | Error> {\r\n    const action = 'DecodeVin';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVin\r\n * @alias DecodeVinResults\r\n */\r\nexport type DecodeVinResults = {\r\n  Value: string | null;\r\n  ValueId: string | null;\r\n  Variable: string;\r\n  VariableId: number;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVin API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVin\r\n * @alias DecodeVinResponse\r\n */\r\nexport type DecodeVinResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeVinResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinExtended\r\n * @category Actions\r\n * @description DecodeVinExtended NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinExtended](module-api_actions_DecodeVinExtended.DecodeVinExtended.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinExtendedResponse](#DecodeVinExtendedResponse)\r\n * > - Type: [DecodeVinExtendedResults](#DecodeVinExtendedResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinExtended extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This is exactly like the DecodeVin method but provides additional information on variables\r\n   * related to other NHTSA programs like\r\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\r\n   * - This will decode the VIN and the decoded output will be made available\r\n   *   in the format of Key-value pairs.\r\n   * - In the returned 'Results` object:\r\n   *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value.\r\n   *   - In case of text variables, the ValueID is not applicable.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *   - The 9th digit is not necessary.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinExtendedResponse | Error>)} - Api Response object.\r\n   */\r\n  async DecodeVinExtended(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: string | number;\r\n    }\r\n  ): Promise<DecodeVinExtendedResponse | Error> {\r\n    const action = 'DecodeVinExtended';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinExtendedResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinExtended\r\n * @alias DecodeVinExtendedResults\r\n */\r\nexport type DecodeVinExtendedResults = {\r\n  Value: string | null;\r\n  ValueId: string | null;\r\n  Variable: string;\r\n  VariableId: number;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinExtended API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinExtended\r\n * @alias DecodeVinExtendedResponse\r\n */\r\nexport type DecodeVinExtendedResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeVinExtendedResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinValues\r\n * @category Actions\r\n * @description DecodeVinValues NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinValues](module-api_actions_DecodeVinValues.DecodeVinValues.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinValuesResponse](#DecodeVinValuesResponse)\r\n * > - Type: [DecodeVinValuesResults](#DecodeVinValuesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinValues extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The DecodeVinValues API Action will decode the VIN with the Results returned in a _flat file_ format.\r\n   * - The Results will be made available in a flat file format of a single object containing\r\n   *   'key<string>: value<string>' results.\r\n   * - Providing params.modelYear allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinValuesResponse | Error>)} Api Response object.\r\n   */\r\n  async DecodeVinValues(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: number;\r\n    }\r\n  ): Promise<DecodeVinValuesResponse | Error> {\r\n    const action = 'DecodeVinValues';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (\r\n      params?.modelYear &&\r\n      typeofModelYear !== 'string' &&\r\n      typeofModelYear !== 'number'\r\n    ) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinValuesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResults\r\n */\r\nexport type DecodeVinValuesResults = {\r\n  /** Flat file format, single object containing keys and values of type string */\r\n  [name: string]: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinValues API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResponse\r\n */\r\nexport type DecodeVinValuesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /**\r\n   * The search results returned by the NHSTA API request.\r\n   * Flat file format, single object containing keys and values of type string\r\n   * */\r\n  Results: Array<DecodeVinValuesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinValuesExtended\r\n * @category Actions\r\n * @description DecodeVinValuesExtended NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinValuesExtended](module-api_actions_DecodeVinValuesExtended.DecodeVinValuesExtended.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinValuesExtendedResponse](#DecodeVinValuesExtendedResponse)\r\n * > - Type: [DecodeVinValuesExtendedResults](#DecodeVinValuesExtendedResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinValuesExtended extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This is exactly like the DecodeVinValues (flat format Results) method but provides additional information\r\n   * on variables related to other NHTSA programs like\r\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\r\n   * - The Results will be made available in a flat file format of a single object containing\r\n   *   'key<string>: value<string>' results.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinValuesExtendedResponse | Error>)} Api Response object.\r\n   */\r\n  async DecodeVinValuesExtended(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: string | number;\r\n    }\r\n  ): Promise<DecodeVinValuesExtendedResponse | Error> {\r\n    const action = 'DecodeVinValuesExtended';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinValuesExtendedResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinValuesExtended\r\n * @alias DecodeVinValuesExtendedResults\r\n */\r\nexport type DecodeVinValuesExtendedResults = {\r\n  /** Flat file format, single object containing keys and values of type string */\r\n  [name: string]: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinValuesExtended API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinValuesExtended\r\n * @alias DecodeVinValuesExtendedResponse\r\n */\r\nexport type DecodeVinValuesExtendedResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /**\r\n   * The search results returned by the NHSTA API request.\r\n   * Flat file format, single object containing keys and values of type string\r\n   * */\r\n  Results: Array<DecodeVinValuesExtendedResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeWMI\r\n * @category Actions\r\n * @description DecodeWMI NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeWMI](module-api_actions_DecodeWMI.DecodeWMI.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeWMIResponse](#DecodeWMIResponse)\r\n * > - Type: [DecodeWMIResults](#DecodeWMIResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeWMI extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides information on the World Manufacturer Identifier for a specific WMI code.\r\n   * - `WMI` may be put in as either 3 characters representing VIN position 1-3 or 6 characters\r\n   *   representing VIN positions 1-3 & 12-14. Example \"JTD\", \"1T9131\".\r\n   *\r\n   * @async\r\n   * @param {string} WMI - World Manufacturer Identifier.\r\n   * @returns {(Promise<DecodeWMIResults | Error>)} Api Response object.\r\n   */\r\n  async DecodeWMI(WMI: string): Promise<DecodeWMIResponse | Error> {\r\n    const action = 'DecodeWMI';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofWMI = getTypeof(WMI);\r\n    if (typeofWMI !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"WMI\" argument is required and must be of type string, got: ` +\r\n            `<${typeofWMI}> ${WMI}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${WMI}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeWMIResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeWMI\r\n * @alias DecodeWMIResults\r\n */\r\nexport type DecodeWMIResults = {\r\n  CommonName: string;\r\n  CreatedOn: string;\r\n  DateAvailableToPublic: string;\r\n  Make: string;\r\n  ManufacturerName: string;\r\n  ParentCompanyName: string;\r\n  URL: string;\r\n  UpdatedOn: string;\r\n  VehicleType: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeWMI API Action.\r\n *\r\n * @memberof module:api/actions/DecodeWMI\r\n * @alias DecodeWMIResponse\r\n */\r\nexport type DecodeWMIResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeWMIResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetAllMakes\r\n * @category Actions\r\n * @description GetAllMakes NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetAllMakes](module-api_actions_GetAllMakes.GetAllMakes.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetAllMakesResponse](#GetAllMakesResponse)\r\n * > - Type: [GetAllMakesResults](#GetAllMakesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetAllMakes extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Makes available in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @returns {(Promise<GetAllMakesResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetAllMakes(): Promise<GetAllMakesResponse | Error> {\r\n    const action = 'GetAllMakes';\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetAllMakesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetAllMakes\r\n * @alias GetAllMakesResults\r\n */\r\nexport type GetAllMakesResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetAllMakes API Action.\r\n *\r\n * @memberof module:api/actions/GetAllMakes\r\n * @alias GetAllMakesResponse\r\n */\r\nexport type GetAllMakesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetAllMakesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetAllManufacturers\r\n * @category Actions\r\n * @description GetAllManufacturers NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetAllManufacturers](module-api_actions_GetAllManufacturers.GetAllManufacturers.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetAllManufacturersResponse](#GetAllManufacturersResponse)\r\n * > - Type: [GetAllManufacturersResults](#GetAllManufacturersResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetAllManufacturers extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Manufacturers available in vPIC Dataset.\r\n   * - `params.manufacturerType` allows the user to filter the list based on manufacturer type,\r\n   *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\r\n   *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings).\r\n   * - You can get a list of all manufacturer types with the following API Action:\r\n   *   `GetVehicleVariableValuesList('manufacturer type')`\r\n   * - Results are provided in pages of 100 items.\r\n   * - Provide a number value for `params.page` to specify 1st (default), 2nd, 3rd, Nth, etc page.\r\n   *\r\n   * @async\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string} [params.manufacturerType] - See method description.\r\n   * @param {number} [params.page] - Specify the page number (results returned 100 at a time).\r\n   * @returns {(Promise<module:api.ApiResponse | Error>)} Api Response object.\r\n   */\r\n  async GetAllManufacturers(\r\n    params: {\r\n      manufacturerType?: string;\r\n      page?: number;\r\n    } = {}\r\n  ): Promise<GetAllManufacturersResponse | Error> {\r\n    const action = 'GetAllManufacturers';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofManufacturerType = getTypeof(params.manufacturerType);\r\n    if (params.manufacturerType && typeofManufacturerType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.manufacturerType\" argument must be of type string, got: ` +\r\n            `<${typeofManufacturerType}> ${params.manufacturerType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofPage = getTypeof(params.page);\r\n    if (params.page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: ` +\r\n            `<${typeofPage}> ${params.page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetAllManufacturersResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResults\r\n */\r\nexport type GetAllManufacturersResults = {\r\n  Country: string;\r\n  Mfr_CommonName: string;\r\n  Mfr_ID: number;\r\n  Mfr_Name: string;\r\n  VehicleTypes: Array<{ isPrimary?: boolean; name?: string }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetAllManufacturers API Action.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResponse\r\n */\r\nexport type GetAllManufacturersResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetAllManufacturersResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetCanadianVehicleSpecifications\r\n * @category Actions\r\n * @description GetCanadianVehicleSpecifications NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetCanadianVehicleSpecifications](module-api_actions_GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetCanadianVehicleSpecificationsResponse](#GetCanadianVehicleSpecificationsResponse)\r\n * > - Type: [GetCanadianVehicleSpecificationsResults](#GetCanadianVehicleSpecificationsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetCanadianVehicleSpecifications extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\r\n   * used primarily in collision investigation and reconstruction, combined with a search engine.\r\n   *\r\n   * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\r\n   * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\r\n   * page for more details.\r\n   *\r\n   * This API action will return a 404 html error if any of the query parameters in params\r\n   * are missing from the query string. This is the only API action with this behaviour. Therefore,\r\n   * parameters are inserted into the query string as empty strings if not provided by the user.\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle (required) - Number, >= 1971.\r\n   * @param {string} [params.make] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\r\n   * @param {string} [params.model] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\r\n   * @param {string} [params.units] - \"Metric\" (default), or \"US\" for United States customary units.\r\n   * @returns {(Promise<GetCanadianVehicleSpecificationsResponse | Error>)} Api Response object.\r\n   */\r\n  async GetCanadianVehicleSpecifications(params: {\r\n    year: number;\r\n    make?: string;\r\n    model?: string;\r\n    units?: string;\r\n  }): Promise<GetCanadianVehicleSpecificationsResponse | Error> {\r\n    const action = 'GetCanadianVehicleSpecifications';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofMake = getTypeof(params.make);\r\n    if (params.make && typeofMake !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.make\" argument must be of type string, got: ` +\r\n            `<${typeofMake}> ${params.make}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModel = getTypeof(params.model);\r\n    if (params.model && typeofModel !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.model\" argument must be of type string, got: ` +\r\n            `<${typeofModel}> ${params.model}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofUnits = getTypeof(params.units);\r\n    if (params.units && typeofUnits !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.units\" argument must be of type string, got: ` +\r\n            `<${typeofUnits}> ${params.units}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Set default query parameters to empty strings if not provided by the user */\r\n    const make = params.make || '';\r\n    const model = params.model || '';\r\n    const units = params.units || '';\r\n\r\n    const params_ = {\r\n      year: params.year,\r\n      make,\r\n      model,\r\n      units\r\n    };\r\n\r\n    /*\r\n     * Build the 'default' query string to be appended to the URL.\r\n     *\r\n     * Additionally, sets the allowEmptyStringValues option (2nd argument) to true because\r\n     * this API action will return a 404 error if any of the query parameters are missing from the query string.\r\n     * This is the only API action with this behaviour (\"year\" is the only param the user must provide).\r\n     */\r\n    const queryString = await this.buildQueryString(\r\n      params_,\r\n      true\r\n    ).catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetCanadianVehicleSpecificationsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResults\r\n */\r\nexport type GetCanadianVehicleSpecificationsResults = {\r\n  Specs: Array<{\r\n    Name: string;\r\n    Value: string;\r\n  }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetCanadianVehicleSpecifications API Action.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResponse\r\n */\r\nexport type GetCanadianVehicleSpecificationsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetCanadianVehicleSpecificationsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetEquipmentPlantCodes\r\n * @category Actions\r\n * @description GetEquipmentPlantCodes NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetEquipmentPlantCodes](module-api_actions_GetEquipmentPlantCodes.GetEquipmentPlantCodes.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetEquipmentPlantCodesResponse](#GetEquipmentPlantCodesResponse)\r\n * > - Type: [GetEquipmentPlantCodesResults](#GetEquipmentPlantCodesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetEquipmentPlantCodes extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * Returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\r\n   *\r\n   * `params.year`:\r\n   *  - Only years >= 2016 are supported\r\n   *\r\n   * `params.equipmentType`:\r\n   *  - 1 (Tires)\r\n   *  - 3 (Brake Hoses)\r\n   *  - 13 (Glazing)\r\n   *  - 16 (Retread)\r\n   *\r\n   * `params.reportType`:\r\n   *  - 'New' (The Equipment Plant Code was assigned during the selected year).\r\n   *  - 'Updated' (The Equipment Plant data was modified during the selected year).\r\n   *  - 'Closed' (The Equipment Plant is no longer Active).\r\n   *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed)).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   * @param {number} params.equipmentType - Number equal to 1, 3, 13, or 16.\r\n   * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All'.\r\n   * @returns {(Promise<GetEquipmentPlantCodesResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetEquipmentPlantCodes(params: {\r\n    year: number;\r\n    equipmentType: 1 | 3 | 13 | 16;\r\n    reportType: 'New' | 'Updated' | 'Closed' | 'All';\r\n  }): Promise<GetEquipmentPlantCodesResponse | Error> {\r\n    const action = 'GetEquipmentPlantCodes';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofEquipmentType = getTypeof(params.equipmentType);\r\n    if (typeofEquipmentType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.equipmentType\" argument is required and must be of type number, got: ` +\r\n            `<${typeofEquipmentType}> ${params.equipmentType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofReportType = getTypeof(params.reportType);\r\n    if (typeofReportType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.reportType\" argument is required and must be of type string, got: ` +\r\n            `<${typeofReportType}> ${params.reportType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetEquipmentPlantCodesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResults\r\n */\r\nexport type GetEquipmentPlantCodesResults = {\r\n  Address: string;\r\n  City: string;\r\n  Country: string;\r\n  DOTCode: string;\r\n  Name: string;\r\n  OldDotCode: string;\r\n  PostalCode: string;\r\n  StateProvince: string;\r\n  Status: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetEquipmentPlantCodes API Action.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResponse\r\n */\r\nexport type GetEquipmentPlantCodesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetEquipmentPlantCodesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakeForManufacturer\r\n * @category Actions\r\n * @description GetMakeForManufacturer NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakeForManufacturer](module-api_actions_GetMakeForManufacturer.GetMakeForManufacturer.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakeForManufacturerResponse](#GetMakeForManufacturerResponse)\r\n * > - Type: [GetMakeForManufacturerResults](#GetMakeForManufacturerResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakeForManufacturer extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer that is requested.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - `manufacturer` name can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @returns {(Promise<GetMakeForManufacturer | Error>)} Api Response object.\r\n   */\r\n  async GetMakeForManufacturer(\r\n    manufacturer: string | number\r\n  ): Promise<GetMakeForManufacturerResponse | Error> {\r\n    const action = 'GetMakeForManufacturer';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakeForManufacturerResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakeForManufacturer\r\n * @alias GetMakeForManufacturerResults\r\n */\r\nexport type GetMakeForManufacturerResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Mfr_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakeForManufacturer API Action.\r\n *\r\n * @memberof module:api/actions/GetMakeForManufacturer\r\n * @alias GetMakeForManufacturerResponse\r\n */\r\nexport type GetMakeForManufacturerResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakeForManufacturerResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakesForManufacturerAndYear\r\n * @category Actions\r\n * @description GetMakesForManufacturerAndYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakesForManufacturerAndYear](module-api_actions_GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakesForManufacturerAndYearResponse](#GetMakesForManufacturerAndYearResponse)\r\n * > - Type: [GetMakesForManufacturerAndYearResults](#GetMakesForManufacturerAndYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakesForManufacturerAndYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer,\r\n   * and whose Year From and Year To range cover the specified year.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   * - Manufacturer can be idenfitied by Id, a partial name, or a full name\r\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   *\r\n   * @returns {(Promise<GetMakesForManufacturerAndYearResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetMakesForManufacturerAndYear(\r\n    manufacturer: string | number,\r\n    params: {\r\n      year: number;\r\n    }\r\n  ): Promise<GetMakesForManufacturerAndYearResponse | Error> {\r\n    const action = 'GetMakesForManufacturerAndYear';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument is required and must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakesForManufacturerAndYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResults\r\n */\r\nexport type GetMakesForManufacturerAndYearResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  MfrId: number;\r\n  MfrName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakesForManufacturerAndYear API Action.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResponse\r\n */\r\nexport type GetMakesForManufacturerAndYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakesForManufacturerAndYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakesForVehicleType\r\n * @category Actions\r\n * @description GetMakesForVehicleType NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakesForVehicleType](module-api_actions_GetMakesForVehicleType.GetMakesForVehicleType.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakesForVehicleTypeResponse](#GetMakesForVehicleTypeResponse)\r\n * > - Type: [GetMakesForVehicleTypeResults](#GetMakesForVehicleTypeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakesForVehicleType extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified vehicle type (`typeName`),\r\n   * whose name is LIKE the vehicle type name in vPIC Dataset.\r\n   * - Vehicle `typeName` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} typeName - A partial or full vehicle type name.\r\n   * @returns {(Promise<GetMakesForVehicleTypeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetMakesForVehicleType(\r\n    typeName: string\r\n  ): Promise<GetMakesForVehicleTypeResponse | Error> {\r\n    const action = 'GetMakesForVehicleType';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofTypeName = getTypeof(typeName);\r\n    if (typeofTypeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"typeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofTypeName}> ${typeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${typeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakesForVehicleTypeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakesForVehicleType\r\n * @alias GetMakesForVehicleTypeResults\r\n */\r\nexport type GetMakesForVehicleTypeResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakesForVehicleType API Action.\r\n *\r\n * @memberof module:api/actions/GetMakesForVehicleType\r\n * @alias GetMakesForVehicleTypeResponse\r\n */\r\nexport type GetMakesForVehicleTypeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakesForVehicleTypeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetManufacturerDetails\r\n * @category Actions\r\n * @description GetManufacturerDetails NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetManufacturerDetails](module-api_actions_GetManufacturerDetails.GetManufacturerDetails.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetManufacturerDetailsResponse](#GetManufacturerDetailsResponse)\r\n * > - Type: [GetManufacturerDetailsResults](#GetManufacturerDetailsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetManufacturerDetails extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides the details for a specific manufacturer that is requested.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name,\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @returns {(Promise<GetManufacturerDetailsResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetManufacturerDetails(\r\n    manufacturer: string | number\r\n  ): Promise<GetManufacturerDetailsResponse | Error> {\r\n    const action = 'GetManufacturerDetails';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetManufacturerDetailsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetManufacturerDetails\r\n * @alias GetManufacturerDetailsResults\r\n */\r\nexport type GetManufacturerDetailsResults = {\r\n  Address: string;\r\n  Address2: string;\r\n  City: string;\r\n  ContactEmail: string;\r\n  ContactFax: string;\r\n  ContactPhone: string;\r\n  Country: string;\r\n  DBAs: string;\r\n  EquipmentItems: Array<object>;\r\n  LastUpdated: string;\r\n  ManufacturerTypes: Array<{\r\n    Name: string;\r\n  }>;\r\n  Mfr_CommonName: string;\r\n  Mfr_ID: number;\r\n  Mfr_Name: string;\r\n  OtherManufacturerDetails: string;\r\n  PostalCode: string;\r\n  PrimaryProduct: string;\r\n  PrincipalFirstName: string;\r\n  PrincipalLastName: string;\r\n  PrincipalPosition: string;\r\n  StateProvince: string;\r\n  SubmittedName: string;\r\n  SubmittedOn: string;\r\n  SubmittedPosition: string;\r\n  VehicleTypes: Array<{\r\n    GVWRFrom: string;\r\n    GVWRTo: string;\r\n    IsPrimary: boolean;\r\n    Name: string;\r\n  }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetManufacturerDetails API Action.\r\n *\r\n * @memberof module:api/actions/GetManufacturerDetails\r\n * @alias GetManufacturerDetailsResponse\r\n */\r\nexport type GetManufacturerDetailsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetManufacturerDetailsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMake\r\n * @category Actions\r\n * @description GetModelsForMake NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMake](module-api_actions_GetModelsForMake.GetModelsForMake.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeResponse](#GetModelsForMakeResponse)\r\n * > - Type: [GetModelsForMakeResults](#GetModelsForMakeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMake extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified `makeName`\r\n   * whose Name is LIKE the Make in vPIC Dataset.\r\n   * - `makeName` can be a partial, or a full for more specificity\r\n   *   (e.g., \"Harley\", \"Harley Davidson\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} makeName - Vehicle make name.\r\n   * @returns {(Promise<GetModelsForMakeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMake(\r\n    makeName: string\r\n  ): Promise<GetModelsForMakeResponse | Error> {\r\n    const action = 'GetModelsForMake';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeName = getTypeof(makeName);\r\n    if (typeofMakeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMakeName}> ${makeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMake\r\n * @alias GetModelsForMakeResults\r\n */\r\nexport type GetModelsForMakeResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMake API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMake\r\n * @alias GetModelsForMakeResponse\r\n */\r\nexport type GetModelsForMakeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeId\r\n * @category Actions\r\n * @description GetModelsForMakeId NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeId](module-api_actions_GetModelsForMakeId.GetModelsForMakeId.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeIdResponse](#GetModelsForMakeIdResponse)\r\n * > - Type: [GetModelsForMakeIdResults](#GetModelsForMakeIdResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeId extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Make\r\n   * whose Id is equal to the `makeId` in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @param {number} makeID - Vehicle make ID (number).\r\n   * @returns {(Promise<GetModelsForMakeIdResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeId(\r\n    makeID: number\r\n  ): Promise<GetModelsForMakeIdResponse | Error> {\r\n    const action = 'GetModelsForMakeId';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeId = getTypeof(makeID);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeID}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString({}).catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeId\r\n * @alias GetModelsForMakeIdResults\r\n */\r\nexport type GetModelsForMakeIdResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeId API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeId\r\n * @alias GetModelsForMakeIdResponse\r\n */\r\nexport type GetModelsForMakeIdResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeIdResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeIdYear\r\n * @category Actions\r\n * @description GetModelsForMakeIdYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeIdYear](module-api_actions_GetModelsForMakeIdYear.GetModelsForMakeIdYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeIdYearResponse](#GetModelsForMakeIdYearResponse)\r\n * > - Type: [GetModelsForMakeIdYearResults](#GetModelsForMakeIdYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeIdYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Model Year\r\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\r\n   *   - `params.makeId` is a number and is a required query parameter.\r\n   *\r\n   * A minimum of one of the following are required (or a combination of both):\r\n   *   - `params.modelYear` is a number (greater than 1995)\r\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\r\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.makeId - Make ID to search.\r\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\r\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\r\n   * @returns {(Promise<GetModelsForMakeIdYearResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeIdYear(params: {\r\n    makeId: number;\r\n    modelYear?: number;\r\n    vehicleType?: string;\r\n  }): Promise<GetModelsForMakeIdYearResponse | Error> {\r\n    const action = 'GetModelsForMakeIdYear';\r\n\r\n    const makeId: number = params?.makeId;\r\n    const modelYear: number | undefined = params?.modelYear;\r\n    const vehicleType: string | undefined = params?.vehicleType;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n    /* Required makeId param of type number */\r\n    const typeofMakeId = getTypeof(makeId);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeId}`\r\n        )\r\n      );\r\n    }\r\n    /* At least one of modelYear or vehicleType params is required */\r\n    if (!modelYear && !vehicleType) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\r\n            `${modelYear} | ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n    /* valid modelYear param of type number */\r\n    const typeofModelYear = getTypeof(modelYear);\r\n    if (modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\r\n            `<${typeofModelYear}> ${modelYear}`\r\n        )\r\n      );\r\n    }\r\n    /* valid vehicleType param of type string */\r\n    const typeofVehicleType = getTypeof(vehicleType);\r\n    if (vehicleType && typeofVehicleType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\r\n            `<${typeofVehicleType}> ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Beginning of the the actionUrl */\r\n    let actionUrl = `${action}/makeId/${makeId}/`;\r\n\r\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\r\n    if (modelYear && vehicleType) {\r\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\r\n    } else if (modelYear) {\r\n      actionUrl += `modelYear/${modelYear}`;\r\n    } else {\r\n      actionUrl += `vehicleType/${vehicleType}`;\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResults\r\n */\r\nexport type GetModelsForMakeIdYearResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeIdYear API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResponse\r\n */\r\nexport type GetModelsForMakeIdYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeIdYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeYear\r\n * @category Actions\r\n * @description GetModelsForMakeYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeYear](module-api_actions_GetModelsForMakeYear.GetModelsForMakeYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeYearResponse](#GetModelsForMakeYearResponse)\r\n * > - Type: [GetModelsForMakeYearResults](#GetModelsForMakeYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Model Year\r\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\r\n   *   - `params.make` is required. It can be a partial, or a full name for more specificity\r\n   *     (e.g., \"Harley\", \"Harley Davidson\", etc.).\r\n   *\r\n   * A minimum of one of the following are required (or a combination of both):\r\n   *   - `params.modelYear` is a number (greater than 1995)\r\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\r\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   *\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {string} params.make - Make name to search.\r\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\r\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\r\n   *\r\n   * @returns {(Promise<GetModelsForMakeYearResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeYear(params: {\r\n    make: string;\r\n    modelYear?: number;\r\n    vehicleType?: string;\r\n  }): Promise<GetModelsForMakeYearResponse | Error> {\r\n    const action = 'GetModelsForMakeYear';\r\n\r\n    const make: string = params?.make;\r\n    const modelYear: number | undefined = params?.modelYear;\r\n    const vehicleType: string | undefined = params?.vehicleType;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n    /* Required make param of type string */\r\n    const typeofMake = getTypeof(make);\r\n    if (typeofMake !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.make\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMake}> ${make}`\r\n        )\r\n      );\r\n    }\r\n    /* At least one of modelYear or vehicleType params is required */\r\n    if (!modelYear && !vehicleType) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\r\n            `${modelYear} | ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n    /* valid modelYear param of type number */\r\n    const typeofModelYear = getTypeof(modelYear);\r\n    if (modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\r\n            `<${typeofModelYear}> ${modelYear}`\r\n        )\r\n      );\r\n    }\r\n    /* valid vehicleType param of type string */\r\n    const typeofVehicleType = getTypeof(vehicleType);\r\n    if (vehicleType && typeofVehicleType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\r\n            `<${typeofVehicleType}> ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Beginning of the the actionUrl */\r\n    let actionUrl = `${action}/make/${params.make}/`;\r\n\r\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\r\n    if (modelYear && vehicleType) {\r\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\r\n    } else if (modelYear) {\r\n      actionUrl += `modelYear/${modelYear}`;\r\n    } else {\r\n      actionUrl += `vehicleType/${vehicleType}`;\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeYear\r\n * @alias GetModelsForMakeYearResults\r\n */\r\nexport type GetModelsForMakeYearResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeYear API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeYear\r\n * @alias GetModelsForMakeYearResponse\r\n */\r\nexport type GetModelsForMakeYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetParts\r\n * @category Actions\r\n * @description GetParts NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetParts](module-api_actions_GetParts.GetParts.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetPartsResponse](#GetPartsResponse)\r\n * > - Type: [GetPartsResults](#GetPartsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetParts extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of ORGs with letter date in the given range of the dates\r\n   * and with specified Type (`params.type`) of ORG.\r\n   * - Up to 1000 results will be returned at a time.\r\n   * - Get the next page by incrementing the `params.page` query parameter.\r\n   * - All query `params` are optional.\r\n   *\r\n   * @async\r\n   * @param {object} [params] - Query Search Parameters to append to the URL.\r\n   * @param {number} [params.type] - Specified type of ORG to search.\r\n   * @param {string} [params.fromDate] - Start date of search query.\r\n   * @param {string} [params.toDate] - End date of search query.\r\n   * @param {number} [params.page] - Which page number of results to request (100 results per page).\r\n   * @returns {(Promise<GetPartsResponse | Error>)} Api Response object.\r\n   */\r\n  async GetParts(params?: {\r\n    type?: number;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    page?: number;\r\n  }): Promise<GetPartsResponse | Error> {\r\n    const action = 'GetParts';\r\n\r\n    const type: number | undefined = params?.type;\r\n    const fromDate: string | undefined = params?.fromDate;\r\n    const toDate: string | undefined = params?.toDate;\r\n    const page: number | undefined = params?.page;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: <${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.type of type number */\r\n    const typeofType = getTypeof(type);\r\n    if (type && typeofType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.type\" argument must be of type number, got: <${typeofType}> ${type}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.fromDate of type string */\r\n    const typeofFromDate = getTypeof(fromDate);\r\n    if (fromDate && typeofFromDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.fromDate\" argument must be of type string, got: <${typeofFromDate}> ${fromDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.toDate of type number */\r\n    const typeofToDate = getTypeof(toDate);\r\n    if (toDate && typeofToDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.toDate\" argument must be of type string, got: <${typeofToDate}> ${toDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.page of type number */\r\n    const typeofPage = getTypeof(page);\r\n    if (page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: <${typeofPage}> ${page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetPartsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResults\r\n */\r\nexport type GetPartsResults = {\r\n  CoverLetterURL: string;\r\n  LetterDate: string;\r\n  ManufacturerId: number;\r\n  ManufacturerName: string;\r\n  ModelYearFrom: string;\r\n  ModelYearTo: string;\r\n  Name: string;\r\n  Type: string;\r\n  URL: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetParts API Action.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResponse\r\n */\r\nexport type GetPartsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetPartsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleTypesForMake\r\n * @category Actions\r\n * @description GetVehicleTypesForMake NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleTypesForMake](module-api_actions_GetVehicleTypesForMake.GetVehicleTypesForMake.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleTypesForMakeResponse](#GetVehicleTypesForMakeResponse)\r\n * > - Type: [GetVehicleTypesForMakeResults](#GetVehicleTypesForMakeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleTypesForMake extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make,\r\n   * whose name is LIKE the make name in the vPIC Dataset.\r\n   * - `makeName` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} makeName - Name of the vehicle make to search.\r\n   * @returns {(Promise<GetVehicleTypesForMakeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleTypesForMake(\r\n    makeName: string\r\n  ): Promise<GetVehicleTypesForMakeResponse | Error> {\r\n    const action = 'GetVehicleTypesForMake';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeName = getTypeof(makeName);\r\n    if (typeofMakeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMakeName}> ${makeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMake\r\n * @alias GetVehicleTypesForMakeResults\r\n */\r\nexport type GetVehicleTypesForMakeResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleTypesForMake API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMake\r\n * @alias GetVehicleTypesForMakeResponse\r\n */\r\nexport type GetVehicleTypesForMakeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleTypesForMakeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleTypesForMakeId\r\n * @category Actions\r\n * @description GetVehicleTypesForMakeId NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleTypesForMakeId](module-api_actions_GetVehicleTypesForMakeId.GetVehicleTypesForMakeId.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleTypesForMakeIdResponse](#GetVehicleTypesForMakeIdResponse)\r\n * > - Type: [GetVehicleTypesForMakeIdResults](#GetVehicleTypesForMakeIdResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleTypesForMakeId extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make and\r\n   * whose ID equals the make ID in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @param {number} makeID - Vehicle make ID.\r\n   * @returns {(Promise<GetVehicleTypesForMakeIdResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleTypesForMakeId(\r\n    makeID: number\r\n  ): Promise<GetVehicleTypesForMakeIdResponse | Error> {\r\n    const action = 'GetVehicleTypesForMakeId';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeId = getTypeof(makeID);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeID}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeIdResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMakeId\r\n * @alias GetVehicleTypesForMakeIdResults\r\n */\r\nexport type GetVehicleTypesForMakeIdResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleTypesForMakeId API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMakeId\r\n * @alias GetVehicleTypesForMakeIdResponse\r\n */\r\nexport type GetVehicleTypesForMakeIdResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleTypesForMakeIdResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleVariableList\r\n * @category Actions\r\n * @description GetVehicleVariableList NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleVariableList](module-api_actions_GetVehicleVariableList.GetVehicleVariableList.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleVariableListResponse](#GetVehicleVariableListResponse)\r\n * > - Type: [GetVehicleVariableListResults](#GetVehicleVariableListResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleVariableList extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Vehicle related variables that are in the vPIC dataset.\r\n   * - Information on the name, description and the type of the variable is provided.\r\n   *\r\n   * @async\r\n   * @returns {(Promise<GetVehicleVariableListResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetVehicleVariableList(): Promise<\r\n    GetVehicleVariableListResponse | Error\r\n  > {\r\n    const action = 'GetVehicleVariableList';\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleVariableListResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableList\r\n * @alias GetVehicleVariableListResults\r\n */\r\nexport type GetVehicleVariableListResults = {\r\n  DataType: string;\r\n  Description: string;\r\n  ID: number;\r\n  Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleVariableList API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableList\r\n * @alias GetVehicleVariableListResponse\r\n */\r\nexport type GetVehicleVariableListResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleVariableListResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleVariableValuesList\r\n * @category Actions\r\n * @description GetVehicleVariableValuesList NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleVariableValuesList](module-api_actions_GetVehicleVariableValuesList.GetVehicleVariableValuesList.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleVariableValuesListResponse](#GetVehicleVariableValuesListResponse)\r\n * > - Type: [GetVehicleVariableValuesListResults](#GetVehicleVariableValuesListResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleVariableValuesList extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the accepted values for a given variable that are stored in the vPIC dataset.\r\n   *\r\n   * This applies to only \"Look up\" type of variables.\r\n   * - `variableValue` can either be a:\r\n   *   - Variable Name (\"battery type\" in first example, please use full name, not just part of it),\r\n   *   - or Variable ID (number).\r\n   *\r\n   * @async\r\n   * @param {string|number} variableValue - The variable you want to get a values list of.\r\n   * @returns {(Promise<GetVehicleVariableValuesListResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleVariableValuesList(\r\n    variableValue: string | number\r\n  ): Promise<GetVehicleVariableValuesListResponse | Error> {\r\n    const action = 'GetVehicleVariableValuesList';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofVariableValue = getTypeof(variableValue);\r\n    if (typeofVariableValue !== 'string' && typeofVariableValue !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"variableValue\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofVariableValue}> ${variableValue}`\r\n        )\r\n      );\r\n    }\r\n    /* Encode to a valid URI string (space chars, etc.) if variableValue is a string*/\r\n    if (typeofVariableValue === 'string') {\r\n      variableValue = encodeURI(variableValue as string);\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${variableValue}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleVariableValuesListResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableValuesList\r\n * @alias GetVehicleVariableValuesListResults\r\n */\r\nexport type GetVehicleVariableValuesListResults = {\r\n  ElementName: string;\r\n  Id: number;\r\n  Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleVariableValuesList API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableValuesList\r\n * @alias GetVehicleVariableValuesListResponse\r\n */\r\nexport type GetVehicleVariableValuesListResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleVariableValuesListResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetWMIsForManufacturer\r\n * @category Actions\r\n * @description GetWMIsForManufacturer NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetWMIsForManufacturer](module-api_actions_GetWMIsForManufacturer.GetWMIsForManufacturer.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetWMIsForManufacturerResponse](#GetWMIsForManufacturerResponse)\r\n * > - Type: [GetWMIsForManufacturerResults](#GetWMIsForManufacturerResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetWMIsForManufacturer extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * Provides information on the World Manufacturer Identifier (WMI) for a specified `manufacturer`.\r\n   * - Only WMIs registered in vPICList are displayed.\r\n   * - `manufacturer` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name.\r\n   * @returns {(Promise<GetWMIsForManufacturerResponse | Error>)} Api Response object.\r\n   */\r\n  async GetWMIsForManufacturer(\r\n    manufacturer: string\r\n  ): Promise<GetWMIsForManufacturerResponse | Error> {\r\n    const action = 'GetWMIsForManufacturer';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetWMIsForManufacturerResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetWMIsForManufacturer\r\n * @alias GetWMIsForManufacturerResults\r\n */\r\nexport type GetWMIsForManufacturerResults = {\r\n  Country: string;\r\n  CreatedOn: string;\r\n  DateAvailableToPublic: string;\r\n  Id: number;\r\n  Name: string;\r\n  UpdatedOn: string;\r\n  VehicleType: string;\r\n  WMI: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetWMIsForManufacturer API Action.\r\n *\r\n * @memberof module:api/actions/GetWMIsForManufacturer\r\n * @alias GetWMIsForManufacturerResponse\r\n */\r\nexport type GetWMIsForManufacturerResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetWMIsForManufacturerResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/NHTSA\r\n * @category API\r\n * @description Module exporting the main (NHSTA) class for API Actions.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [NHTSA](NHTSA.html#NHTSA) - Class that implements all NHTSA API Actions\r\n */\r\n\r\nimport { Fetch /* Class */, FetchConfig /* Type */ } from './Fetch';\r\n\r\n/* Util Helpers */\r\nimport { isValidVin } from '../utils/isValidVin';\r\n\r\n/* Import implemented API Action classes */\r\nimport {\r\n  DecodeVin,\r\n  DecodeVinExtended,\r\n  DecodeVinValues,\r\n  DecodeVinValuesExtended,\r\n  DecodeWMI,\r\n  GetAllMakes,\r\n  GetAllManufacturers,\r\n  GetCanadianVehicleSpecifications,\r\n  GetEquipmentPlantCodes,\r\n  GetMakeForManufacturer,\r\n  GetMakesForManufacturerAndYear,\r\n  GetMakesForVehicleType,\r\n  GetManufacturerDetails,\r\n  GetModelsForMake,\r\n  GetModelsForMakeId,\r\n  GetModelsForMakeIdYear,\r\n  GetModelsForMakeYear,\r\n  GetParts,\r\n  GetVehicleTypesForMake,\r\n  GetVehicleTypesForMakeId,\r\n  GetVehicleVariableList,\r\n  GetVehicleVariableValuesList,\r\n  GetWMIsForManufacturer\r\n} from './actions';\r\n\r\n/**\r\n * @class NHTSA\r\n * @augments module:api/Fetch.Fetch\r\n * @category API\r\n *\r\n * @param {FetchConfig} [userConfig] - Configuration options to construct the class with.\r\n *\r\n * @implements {module:api/actions/DecodeVin.DecodeVin}\r\n * @implements {module:api/actions/DecodeVinExtended.DecodeVinExtended}\r\n * @implements {module:api/actions/DecodeVinValues.DecodeVinValues}\r\n * @implements {module:api/actions/DecodeVinValuesExtended.DecodeVinValuesExtended}\r\n * @implements {module:api/actions/DecodeWMI.DecodeWMI}\r\n * @implements {module:api/actions/GetAllMakes.GetAllMakes}\r\n * @implements {module:api/actions/GetAllManufacturers.GetAllManufacturers}\r\n * @implements {module:api/actions/GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications}\r\n * @implements {module:api/actions/GetEquipmentPlantCodes.GetEquipmentPlantCodes}\r\n * @implements {module:api/actions/GetMakeForManufacturer.GetMakeForManufacturer}\r\n * @implements {module:api/actions/GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear}\r\n * @implements {module:api/actions/GetMakesForVehicleType.GetMakesForVehicleType}\r\n * @implements {module:api/actions/GetManufacturerDetails.GetManufacturerDetails}\r\n * @implements {module:api/actions/GetModelsForMake.GetModelsForMake}\r\n * @implements {module:api/actions/GetModelsForMakeId.GetModelsForMakeId}\r\n * @implements {module:api/actions/GetModelsForMakeIdYear.GetModelsForMakeIdYear}\r\n * @implements {module:api/actions/GetModelsForMakeYear.GetModelsForMakeYear}\r\n * @implements {module:api/actions/GetParts.GetParts}\r\n * @implements {module:api/actions/GetVehicleTypesForMake.GetVehicleTypesForMake}\r\n * @implements {module:api/actions/GetVehicleTypesForMakeId.GetVehicleTypesForMakeId}\r\n * @implements {module:api/actions/GetVehicleVariableList.GetVehicleVariableList}\r\n * @implements {module:api/actions/GetVehicleVariableValuesList.GetVehicleVariableValuesList}\r\n * @implements {module:api/actions/GetWMIsForManufacturer.GetWMIsForManufacturer}\r\n *\r\n * @example <caption>Node bundle</caption>\r\n * const { NHTSA } = require('@shaggytools/nhtsa-api-wrapper');\r\n *\r\n * const Wrapper = new NHTSA();\r\n *\r\n * // Decode a VIN and return a response of type ApiResponse\r\n * const response = Wrapper.DecodeVinValues('3VWD07AJ5EM388202').catch(error => error)\r\n *\r\n * // or get details about a specific manufacturer, plus 23 other available Actions.\r\n * const hondaDetails = Wrapper.GetManufacturerDetails('Honda').catch(error => error)\r\n *\r\n * @example <caption>Browser bundle</caption>\r\n *   // Change <version> to specific version number \"x.x.xx\",\r\n *   // or remove <version> completely for the most recently published version\r\n *   <script\r\n *     type=\"text/javascript\"\r\n *     src=\"https://cdn.jsdelivr.net/npm/@shaggytools/nhtsa-api-wrapper/<version>/dist/bundle.min.js\"\r\n *   ></script>\r\n *\r\n * <script type=\"text/javascript\">\r\n * // NHSTA is the global browser window exported by this package\r\n * const Decoder = new NHSTA.NHSTA();\r\n *\r\n * const result = await Decoder.DecodeVin('3VWD07AJ5EM388202')\r\n *   .catch(err => err);\r\n * </script>\r\n *\r\n * @example <caption>Module - Node lazy loading</caption>\r\n * const { NHTSA } = await import('@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\r\n *   .catch(err => err);\r\n *\r\n * const ApiClient = new NHTSA();\r\n *\r\n * const results = await ApiClient.DecodeVin('3VWD07AJ5EM388202')\r\n *   .catch(err => err)\r\n *\r\n * @example <caption>Module - Browser lazy loading</caption>\r\n * <script type=\"module\">\r\n *   const { NHSTA } = await import('https://unpkg.com/@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\r\n *    .catch(err => err);\r\n *\r\n *   const ApiClient = new NHSTA();\r\n *\r\n *   const { Results } = await ApiClient.DecodeVin('3VWD07AJ5EM388202')\r\n *    .catch(err => err)\r\n *\r\n *   console.log(Results)\r\n * </script>\r\n */\r\nclass NHTSA extends Fetch\r\n  implements\r\n    DecodeVin,\r\n    DecodeVinExtended,\r\n    DecodeVinValues,\r\n    DecodeVinValuesExtended,\r\n    DecodeWMI,\r\n    GetAllMakes,\r\n    GetAllManufacturers,\r\n    GetCanadianVehicleSpecifications,\r\n    GetEquipmentPlantCodes,\r\n    GetMakeForManufacturer,\r\n    GetMakesForManufacturerAndYear,\r\n    GetMakesForVehicleType,\r\n    GetManufacturerDetails,\r\n    GetModelsForMake,\r\n    GetModelsForMakeId,\r\n    GetModelsForMakeIdYear,\r\n    GetModelsForMakeYear,\r\n    GetParts,\r\n    GetVehicleTypesForMake,\r\n    GetVehicleTypesForMakeId,\r\n    GetVehicleVariableList,\r\n    GetVehicleVariableValuesList,\r\n    GetWMIsForManufacturer {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n  isValidVin = isValidVin;\r\n\r\n  DecodeVin = DecodeVin.prototype.DecodeVin;\r\n\r\n  DecodeVinValues = DecodeVinValues.prototype.DecodeVinValues;\r\n\r\n  DecodeVinExtended = DecodeVinExtended.prototype.DecodeVinExtended;\r\n\r\n  DecodeVinValuesExtended =\r\n    DecodeVinValuesExtended.prototype.DecodeVinValuesExtended;\r\n\r\n  DecodeWMI = DecodeWMI.prototype.DecodeWMI;\r\n\r\n  GetAllMakes = GetAllMakes.prototype.GetAllMakes;\r\n\r\n  GetAllManufacturers = GetAllManufacturers.prototype.GetAllManufacturers;\r\n\r\n  GetCanadianVehicleSpecifications =\r\n    GetCanadianVehicleSpecifications.prototype.GetCanadianVehicleSpecifications;\r\n\r\n  GetEquipmentPlantCodes =\r\n    GetEquipmentPlantCodes.prototype.GetEquipmentPlantCodes;\r\n\r\n  GetMakeForManufacturer =\r\n    GetMakeForManufacturer.prototype.GetMakeForManufacturer;\r\n\r\n  GetMakesForManufacturerAndYear =\r\n    GetMakesForManufacturerAndYear.prototype.GetMakesForManufacturerAndYear;\r\n\r\n  GetMakesForVehicleType =\r\n    GetMakesForVehicleType.prototype.GetMakesForVehicleType;\r\n\r\n  GetManufacturerDetails =\r\n    GetManufacturerDetails.prototype.GetManufacturerDetails;\r\n\r\n  GetModelsForMake = GetModelsForMake.prototype.GetModelsForMake;\r\n\r\n  GetModelsForMakeId = GetModelsForMakeId.prototype.GetModelsForMakeId;\r\n\r\n  GetModelsForMakeIdYear =\r\n    GetModelsForMakeIdYear.prototype.GetModelsForMakeIdYear;\r\n\r\n  GetModelsForMakeYear = GetModelsForMakeYear.prototype.GetModelsForMakeYear;\r\n\r\n  GetParts = GetParts.prototype.GetParts;\r\n\r\n  GetVehicleTypesForMake =\r\n    GetVehicleTypesForMake.prototype.GetVehicleTypesForMake;\r\n\r\n  GetVehicleTypesForMakeId =\r\n    GetVehicleTypesForMakeId.prototype.GetVehicleTypesForMakeId;\r\n\r\n  GetVehicleVariableList =\r\n    GetVehicleVariableList.prototype.GetVehicleVariableList;\r\n\r\n  GetVehicleVariableValuesList =\r\n    GetVehicleVariableValuesList.prototype.GetVehicleVariableValuesList;\r\n\r\n  GetWMIsForManufacturer =\r\n    GetWMIsForManufacturer.prototype.GetWMIsForManufacturer;\r\n}\r\n\r\nexport { NHTSA };\r\n","/**\r\n * @module api/Client\r\n * @category API\r\n * @description Module exporting an instance of the NHSTA class.\r\n *\r\n * > - For more information, see the documentation for the [NHTSA](module-api_NHTSA-NHTSA.html) class.\r\n */\r\n\r\nimport { NHTSA } from './NHTSA';\r\n\r\n/**\r\n * A new instance of the [NHTSA](module-api_NHTSA-NHTSA.html) class.\r\n *\r\n * @type {NHTSA}\r\n *\r\n * @example <caption>Node bundle</caption>\r\n * const { Client } = require('@shaggytools/nhtsa-api-wrapper');\r\n *\r\n * // Decode a VIN and return get a response of type ApiResponse\r\n * const response = Client.DecodeVinValues('3VWD07AJ5EM388202').catch(error => error)\r\n *\r\n * // or get details about a specific manufacturer, plus 23 other available Actions.\r\n * const audiDetails = Client.GetManufacturerDetails('Audi').catch(error => error)\r\n *\r\n * @example <caption>Browser bundle</caption>\r\n * // Change <version> to specific version number \"x.x.xx\",\r\n * // or remove <version> completely for the most recently published version\r\n * <script\r\n *   type=\"text/javascript\"\r\n *   src=\"https://cdn.jsdelivr.net/npm/@shaggytools/nhtsa-api-wrapper/<version>/dist/bundle.min.js\"\r\n * ></script>\r\n *\r\n * <script type=\"text/javascript\">\r\n * // NHSTA is the global browser window exported by this package\r\n * const Decoder = NHSTA.Client\r\n *\r\n * const result = Decoder.DecodeVin('3VWD07AJ5EM388202')\r\n *   .catch(err => err);\r\n * </script>\r\n *\r\n * @example <caption>Module - Node lazy loading</caption>\r\n * const { Client } = await import('@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\r\n *   .catch(err => err);\r\n *\r\n * const results = await Client.DecodeVin('3VWD07AJ5EM388202')\r\n *   .catch(err => err)\r\n *\r\n * @example <caption>Module - Browser lazy loading</caption>\r\n * <script type=\"module\">\r\n * const { Client } = await import('https://unpkg.com/@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\r\n *  .catch(err => err);\r\n *\r\n * const { Results } = await Client.DecodeVin('3VWD07AJ5EM388202')\r\n *    .catch(err => err)\r\n * </script>\r\n *\r\n */\r\nconst Client: NHTSA = new NHTSA();\r\n\r\nexport { Client };\r\n"],"names":["getTypeof","value","toString","Object","prototype","call","toLowerCase","slice","length","isValidVin","vin","Promise","resolve","vinArray","toUpperCase","split","checkDigit","isNaN","parseInt","checkValue","transliterationTable","A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z","weightsArray","checksum","map","digit","index","digitValue","reduce","acc","currValue","DEFAULT_CONFIG","apiResponseFormat","baseUrl","options","Fetch","[object Object]","userConfig","finalConfig","this","params","allowEmptyStringValues","format","reject","Error","entries","paramsLength","isPrepended","queryStringArray","key","prepend","append","typeofValue","encodeURI","join","makeQueryString","url","typeofUrl","typeofOptions","combinedOptions","response","fetch","then","result","status","statusText","headers","catch","err","NhtsaResponse","json","finalResult","FetchResponse","ok","redirected","DecodeVin","super","typeofParams","typeofVin","typeofModelYear","modelYear","queryString","buildQueryString","get","DecodeVinExtended","action","DecodeVinValues","DecodeVinValuesExtended","DecodeWMI","WMI","typeofWMI","GetAllMakes","GetAllManufacturers","typeofManufacturerType","manufacturerType","typeofPage","page","GetCanadianVehicleSpecifications","typeofYear","year","typeofMake","make","typeofModel","model","typeofUnits","units","params_","GetEquipmentPlantCodes","typeofEquipmentType","equipmentType","typeofReportType","reportType","GetMakeForManufacturer","manufacturer","typeofManufacturer","GetMakesForManufacturerAndYear","GetMakesForVehicleType","typeName","typeofTypeName","GetManufacturerDetails","GetModelsForMake","makeName","typeofMakeName","GetModelsForMakeId","makeID","typeofMakeId","GetModelsForMakeIdYear","makeId","vehicleType","typeofVehicleType","actionUrl","GetModelsForMakeYear","GetParts","type","fromDate","toDate","typeofType","typeofFromDate","typeofToDate","GetVehicleTypesForMake","GetVehicleTypesForMakeId","GetVehicleVariableList","GetVehicleVariableValuesList","variableValue","typeofVariableValue","GetWMIsForManufacturer","NHTSA","Client"],"mappings":"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"}