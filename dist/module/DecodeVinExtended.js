import{F as e,_ as r,g as t}from"./Fetch-b3914c0a.js";class n extends e{constructor(e){super(e)}DecodeVinExtended(e,n){return r(this,void 0,void 0,(function*(){const r="DecodeVinExtended",o=t(n);if(n&&"object"!==o)return Promise.reject(new Error(`DecodeVinExtended, "params" argument must be of type object, got: <${o}> ${n}`));const i=t(e);if("string"!==i)return Promise.reject(new Error(`DecodeVinExtended, "vin" argument is required and must be of type string, got: <${i}> ${e}`));const s=t(null==n?void 0:n.modelYear);if((null==n?void 0:n.modelYear)&&"number"!==s)return Promise.reject(new Error(`DecodeVinExtended, "params.modelYear" argument is required and must be of type string or number, got: <${s}> ${n.modelYear}`));const d=yield this.buildQueryString(n).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),c=`${this.baseUrl}/${r}/${e}${d}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}export{n as DecodeVinExtended};
//# sourceMappingURL=DecodeVinExtended.js.map
