{"version":3,"file":"isValidType.js","sources":["../../src/utils/isValidType.ts"],"sourcesContent":["/**\r\n * @module utils/isValidType\r\n * @category Utils\r\n */\r\n\r\nimport { getTypeof } from './getTypeof';\r\n\r\n/**\r\n * Provided an object with `type` and `value` keys and it will:\r\n *\r\n * Return true if:\r\n * - type of `value` is equal to provided `type`.\r\n *\r\n * Return false if:\r\n * - `value` is not equal to provided `type`\r\n * - `type` is missing from options object\r\n * - `type` is not of type `string`\r\n * - `value` is falsey or otherwise not provided.\r\n *\r\n * @param {object} options - [IsValidTypeOptions](module-utils_isValidType.html#.IsValidTypeOptions).\r\n * @param {string} options.type - What type are you expecting the value to be?\r\n * @param {any} options.value - What value are we testing against?\r\n * @returns {boolean} True or false.\r\n *\r\n * @example <caption>Verify type string</caption>\r\n * const isValid = isValidType({\r\n *   type: 'string',\r\n *   value: 'this is a string'\r\n * }).catch(error => error)\r\n *\r\n * console.log(isValid) // \"true\"\r\n *\r\n * @example <caption>Verify type object</caption>\r\n * const isValid = isValidType({\r\n *   type: 'object',\r\n *   value: { someKey: 'some value' }\r\n * }).catch(error => error)\r\n *\r\n * console.log(isValid) // \"true\"\r\n *\r\n * @example <caption>Returns false if type is not valid</caption>\r\n * const isValid = await isValidType({\r\n *   type: 'array',\r\n *   value: 'this is not an array'\r\n * }).catch(error => error)\r\n *\r\n * console.log(isValid) // \"false\"\r\n */\r\nexport function isValidType(\r\n  options: import('./types').IsValidTypeOptions\r\n): boolean {\r\n  /* Runtime typechecking */\r\n  if (getTypeof(options?.type) !== 'string') {\r\n    return false;\r\n  }\r\n\r\n  /* Normalize options.type to lowercase to match the lowercase value returned by getTypeof()*/\r\n  const type_ = options.type.toLowerCase();\r\n\r\n  /* Use getTypeof to get the actual type of the provided value */\r\n  const typeofValue = getTypeof(options.value);\r\n\r\n  /* Return the result */\r\n  return type_ === typeofValue;\r\n}\r\n"],"names":["isValidType","options","getTypeof","type","toLowerCase","value"],"mappings":"qDAgDgBA,EACdC,SAGA,MAAiC,WAA7BC,YAAUD,wBAASE,OAKTF,EAAQE,KAAKC,gBAGPF,EAAUD,EAAQI"}