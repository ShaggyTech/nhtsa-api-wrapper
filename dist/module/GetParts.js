import{F as r,_ as t,g as e}from"./Fetch-d0e51133.js";class s extends r{constructor(r){super(r)}GetParts(r){return t(this,void 0,void 0,(function*(){const t=null==r?void 0:r.type,s=null==r?void 0:r.fromDate,o=null==r?void 0:r.toDate,n=null==r?void 0:r.page,a=e(r);if(r&&"object"!==a)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${a}> ${r}`));const i=e(t);if(t&&"number"!==i)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${i}> ${t}`));const u=e(s);if(s&&"string"!==u)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${u}> ${s}`));const m=e(o);if(o&&"string"!==m)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${m}> ${o}`));const c=e(n);if(n&&"number"!==c)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${c}> ${n}`));const g=yield this.buildQueryString(r).catch((r=>Promise.reject(new Error(`GetParts, Error building query string: ${r}`)))),p=`${this.baseUrl}/GetParts${g}`;return yield this.get(p).then((r=>r)).catch((r=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${r}`))))}))}}export{s as GetParts};
//# sourceMappingURL=GetParts.js.map
