{"version":3,"file":"Fetch-55f9a4b7.js","sources":["../../src/utils/getTypeof.ts","../../src/utils/makeQueryString.ts","../../src/api/Fetch.ts"],"sourcesContent":["/**\n * @module utils/getTypeof\n * @category Utils\n */\n\n/**\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\n *\n * @param {any} value - Any kind of value (string, object, array, function, etc).\n *\n * @returns {string} - Type of value, normalized to a lowercase string.\n */\nexport function getTypeof(value: any): string {\n  const toString: string = Object.prototype.toString\n    .call(value)\n    .toLowerCase(); /* ex: => '[object string]' or '[object array], etc. */\n  return toString.slice(8, toString.length - 1);\n}\n","import { getTypeof } from './getTypeof';\n\n/**\n * @module utils/makeQueryString\n * @category Utils\n */\n\n/**\n * Utility method to generate a query string compatible with the NHSTA API, for use in an API URL string.\n *\n * @async\n *\n * @param {object} params - Object of Type [QueryStringParameters](module-utils_makeQueryString.html#.QueryStringParameters).\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\n * - Given params of `{ paramName: \"\" }` , setting this to true will use 'paramName=' in the final query string.\n * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\n *\n * @returns {Promise<string>|Error} A query string of search parameters for use in a final Fetch.get URL.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const qs = await NHTSA.makeQueryString({ modelYear: 2010 }).catch(error => error)\n * console.log(qs) // \"?modelYear=2010\"\n *\n * @example <caption>When loaded as a module</caption>\n * import { makeQueryString } from '@shaggytools/nhtsa-api-wrapper'\n * const qs = await makeQueryString({ modelYear: 2010 }).catch(error => error)\n * console.log(qs) // \"?modelYear=2010\"\n *\n * @example <caption>Single Param:</caption>\n * const qs = await makeQueryString({\n *   modelYear: 2019\n * }).catch(error => error)\n * console.log(qs) // \"?modelYear=2019\"\n *\n * @example <caption>Multiple Params:</caption>\n * const qs = await makeQueryString({\n *   whatever: 'some value',\n *   modelYear: 2006,\n *   page: \"2\"\n * }).catch(error => error)\n *\n * console.log(qs) // \"?whatever=some%20value&modelYear=2006&page=2\"\n *\n * @example <caption>Empty Params Object:</caption>\n * const qs = await makeQueryString({}).catch(error => error)\n *\n * console.log(qs) // \"\"\n *\n * @example <caption>Using allowEmptyStringValues option:</caption>\n * const qs = await makeQueryString({\n *   year: 2016,\n *   vehicleType: '',\n *   make: 'Audi'\n * }, true).catch(error => error)\n *\n * console.log(qs) // \"?year=2016&vehicleType=&make=Audi\"\n *\n */\nexport function makeQueryString(\n  params: QueryStringParameters = {},\n  allowEmptyStringValues = false\n): Promise<string | Error> {\n  /* Beginning of error message string */\n  const errorBase =\n    'queryString(params) - expected params in the form of an object, got:';\n\n  /* Runtime type guard params argument, must be of type object */\n  if (getTypeof(params) !== 'object') {\n    return Promise.reject(new Error(`${errorBase} ${params}`));\n  }\n\n  /* Setup QueryString for Array mapping */\n  const entries = Object.entries(params);\n  const paramsLength = entries.length;\n\n  /* Return an empty string if params are an empty object */\n  if (paramsLength < 1) return Promise.resolve('');\n\n  /* Used to check if we've already prepended a valid query param */\n  let isPrepended = false;\n\n  /* Map [key]:value entries to \"key=value\" strings in an array */\n  const queryStringArray = entries.map(([key, value], index) => {\n    let prepend = '';\n    let append = '';\n\n    const typeofValue = getTypeof(value);\n\n    /* Convert any number values to a string */\n    if (value && typeofValue === 'number') {\n      value = value.toString();\n    }\n\n    /* Skip any invalid values, only string and number value types are valid */\n    if (\n      (value || allowEmptyStringValues) &&\n      (typeofValue === 'string' || typeofValue === 'number')\n    ) {\n      /* if this is the first param we need to prepend the '?' char */\n      if (!isPrepended) {\n        prepend = '?';\n        isPrepended = true;\n      }\n      /* if there is another param coming after this one we need to append the '&' char */\n      if (index < paramsLength - 1) {\n        append = '&';\n      }\n\n      /* Add the completed partial query string to queryStringArray */\n      return `${prepend}${key}=${value}${append}`;\n    }\n    return;\n  });\n\n  /* Join and return the completed query string after URI encoding */\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\n}\n\n/**\n * Object containing Key:Value pairs to build the URL query string with.\n * - Parameter values may be either strings or numbers.\n *\n * @memberof module:utils/makeQueryString\n * @alias QueryStringParameters\n * @example\n * {\n * modelYear: 2009,\n * whatever: 'something'\n * }\n *\n */\nexport type QueryStringParameters = {\n  [propName: string]: string | number | undefined;\n};\n","/**\n * @module api/Fetch\n * @category API\n * @description API Fetch Logic.\n *\n * > **Module Exports**:\n * > - Class: [Fetch](module-api_Fetch.Fetch.html)\n * > - Constant: [BASE_URL](#~BASE_URL)\n * > - Constant: [DEFAULT_CONFIG](#~DEFAULT_CONFIG)\n * >\n * > **Types**\n * > - Type: [ApiResponse](#ApiResponse)\n * > - Type: [FetchConfig](#FetchConfig)\n * > - Type: [FetchRequestOptions](#FetchRequestOptions)\n * > - Type: [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body)\n * > - Type: [FetchResponse](#FetchResponse)\n * > - Type: [NhtsaResponse](#NhtsaResponse)\n */\n\n/* Module Dependencies */\nimport fetch from 'cross-fetch';\n/* Utilities */\nimport { getTypeof, makeQueryString } from '../utils';\n/* Types */\nimport { QueryStringParameters } from '../utils/types';\n\n/*****************\n * CONSTANTS\n ****************/\n\n/**\n * @constant {string} BASE_URL Default Fetch base URL string\n * @default 'https://vpic.nhtsa.dot.gov/api/vehicles'\n */\nexport const BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles';\n\n/**\n * @constant {module:api/Fetch.FetchConfig} DEFAULT_CONFIG Default Fetch configuration options\n * @property {string} apiResponseFormat=json\n * @property {string} baseUrl=BASE_URL Default: [BASE_URL](module-api_Fetch.html#~BASE_URL)\n * @property {FetchRequestOptions} options={method:\"GET\"}\n */\nexport const DEFAULT_CONFIG: FetchConfig = {\n  apiResponseFormat: 'json',\n  baseUrl: BASE_URL,\n  options: {}\n};\n\n/*****************\n * Fetch Class\n ****************/\n\n/**\n * Class wrapper containing API wrapper HTTP Fetch logic.\n *\n * > **Static Methods**:\n * > - [buildQueryString](#buildQueryString)\n * > - [get](#get)\n *\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n * @category API\n */\nexport class Fetch {\n  apiResponseFormat: string;\n  baseUrl?: string;\n  options?: FetchRequestOptions;\n\n  constructor(userConfig?: FetchConfig) {\n    let finalConfig: FetchConfig;\n\n    /* userConfig takes precedence over DEFAULT_CONFIG */\n    if (userConfig && getTypeof(userConfig) === 'object') {\n      finalConfig = {\n        ...DEFAULT_CONFIG,\n        ...userConfig,\n        options: { ...DEFAULT_CONFIG.options, ...userConfig.options }\n      };\n    } else {\n      finalConfig = { ...DEFAULT_CONFIG };\n    }\n\n    /** @private */\n    this.apiResponseFormat = 'json';\n    /** @private */\n    this.baseUrl = finalConfig.baseUrl;\n    /** @private */\n    this.options = finalConfig.options;\n  }\n\n  /**\n   * Builds a query string from QueryStringParameters.\n   *\n   * @param {QueryStringParameters} params - Object containing Key:Value pairs to build the URL query string with.\n   * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\n   * - Given params of `{paramName: \"\"}` , setting this to true will use 'paramName=' in the final query string.\n   * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\n   * @returns {(Promise<string | Error>)} A formatted NHSTA.dot.gov Vehicles API query string.\n   */\n  async buildQueryString(\n    params?: QueryStringParameters,\n    allowEmptyStringValues = false\n  ): Promise<string | Error> {\n    /*\n     * Make sure we're always using 'format=json' in the url Query parameters\n     * If the user provides a 'format' key in the params, during class instantiation we want to override it to 'json'\n     * This package may provide support for the other formats (CSV and XML) if requested.\n     */\n    if (!params || getTypeof(params) !== 'object') {\n      params = {\n        format: this.apiResponseFormat\n      };\n    } else {\n      params = { ...params, format: this.apiResponseFormat };\n    }\n\n    /* Return the completed query string */\n    return await makeQueryString(params, allowEmptyStringValues);\n  }\n\n  /**\n   * Uses the `cross-fetch` npm package to send HTTP requests and retrieve data from an API.\n   * - In browser environments, [whatwg-fetch](https://github.com/github/fetch/) window.fetch is used.\n   * - In node environments, [node-fetch](https://github.com/bitinn/node-fetch/) NPM package is used.\n   *\n   * @param {string} url - URL to fetch data from.\n   * @param {FetchRequestOptions} [options] - [Fetch options](https://github.github.io/fetch/#options).\n   * @returns {(Promise<module:api/Fetch.ApiResponse | Error>)} Response from the API.\n   */\n  async get(\n    url: string,\n    options: FetchRequestOptions = {}\n  ): Promise<ApiResponse | Error> {\n    /* Runtime typechecking */\n    const typeofUrl = getTypeof(url);\n    if (typeofUrl !== 'string') {\n      return Promise.reject(\n        new Error(\n          `Fetch.get(url) - url argument must be of type string, got: ${typeofUrl}`\n        )\n      );\n    }\n    const typeofOptions = getTypeof(options);\n    if (typeofOptions !== 'object') {\n      return Promise.reject(\n        new Error(\n          `Fetch.get(url, options) - options argument must be of type object, got: ${typeofOptions}`\n        )\n      );\n    }\n\n    /* Combine user provided 'options' and class property 'this.options', user options overwrite class options */\n    const combinedOptions = { ...this.options, ...options };\n\n    /* Use the cross-fetch package to perform an HTTP request */\n    const response: Response = await fetch(url, combinedOptions)\n      .then(result => {\n        if (!result?.status || result.status >= 400) {\n          throw new Error(\n            `Bad response from server, code: ${result?.status}, text: ${result?.statusText}, headers: ${result?.headers}`\n          );\n        } else return result;\n      })\n      .catch(err =>\n        Promise.reject(new Error(`Fetch.get() http error: ${err}`))\n      );\n\n    /* Convert the NHTSA API data to JSON */\n    const NhtsaResponse: NhtsaResponse = await response\n      .json()\n      .then((json: NhtsaResponse): NhtsaResponse => json);\n\n    /* Add the fetch response information to the returned NHSTA API data */\n    const finalResult: ApiResponse = {\n      ...NhtsaResponse,\n      FetchResponse: {\n        headers: response.headers,\n        ok: response.ok,\n        redirected: response.redirected,\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url\n      }\n    };\n\n    /* Return the completed ApiResponse */\n    return Promise.resolve(finalResult);\n  }\n}\n\n/*****************\n * Types\n ****************/\n\n/**\n * Various fetch request body types.\n *\n * @typedef FetchRequestBodyTypes\n * @type {URLSearchParams | FormData | Blob | ArrayBuffer | DataView}\n *\n * @memberof module:api/Fetch\n */\nexport type FetchRequestBodyTypes =\n  | URLSearchParams\n  | FormData\n  | Blob\n  | ArrayBuffer\n  | DataView;\n\n/**\n * Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}.\n *\n * @memberof module:api/Fetch\n * @alias FetchRequestOptions\n */\nexport type FetchRequestOptions = {\n  /**HTTP request method - Default: \"GET\". */\n  method?: string;\n  /** HTTP request body - [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body). */\n  body?: string | FetchRequestBodyTypes;\n  /** [Object, Headers](https://github.github.io/fetch/#Headers) - Default: {}. */\n  headers?: {} | Headers;\n  /**\n   * Default: \"omit\" - Authentication credentials mode.\n   * - \"omit\" - don't include authentication credentials (e.g. Cookies) in the request.\n   * - \"same-origin\" - include credentials in requests to the same site\n   * - \"include\" - include credentials in requests to all sites.\n   */\n  credentials?: 'omit' | 'same-origin' | 'include';\n};\n\n/**\n * Used when instantiating a Fetch class or related subclass.\n *\n * @memberof module:api/Fetch\n * @alias FetchConfig\n */\nexport type FetchConfig = {\n  /** Requested response format from the NHSTA API (hardcoded to 'json' for now). */\n  apiResponseFormat?: string;\n  /** Base of the URL to build fetch URLs from. */\n  baseUrl?: string;\n  /** Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}. */\n  options?: FetchRequestOptions;\n};\n\n/**\n * [Fetch API Response](https://github.github.io/fetch/#Response) properties.\n *\n * @memberof module:api/Fetch\n * @alias FetchResponse\n */\nexport type FetchResponse = {\n  /** The [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object associated with the response. */\n  headers: Headers;\n  /** A boolean indicating whether the response was successful (status in the range 200–299) or not. */\n  ok: boolean;\n  /** Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry). */\n  redirected: boolean;\n  /** The status code of the response. (This will be 200 for a success). */\n  status: number;\n  /** The status message corresponding to the status code. (e.g., OK for 200). */\n  statusText: string;\n  /** The URL of the response. */\n  url: string;\n};\n\n/**\n * Response data returned from the NHSTA API.\n *\n * @memberof module:api/Fetch\n * @alias NhtsaResponse\n */\nexport type NhtsaResponse = {\n  /** The number of items returned in the Results object. */\n  Count: number;\n  /** A message describing the Results. */\n  Message: string;\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\n  SearchCriteria: string;\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\n  Results: Array<any>;\n};\n\n/**\n * Complete response returned by {@link module:api/Fetch.Fetch#get}.\n *\n * @see {@link module:api/Fetch.NhtsaResponse}\n * @see {@link module:api/Fetch.FetchResponse}\n * @memberof module:api/Fetch\n * @alias ApiResponse\n */\nexport type ApiResponse = {\n  /** The number of items returned in the Results object. */\n  Count: number;\n  /** A message describing the Results. */\n  Message: string;\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\n  SearchCriteria: string;\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\n  Results: Array<any>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) Properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":[],"mappings":"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"}