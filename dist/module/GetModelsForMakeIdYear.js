import{F as e,_ as r,g as t}from"./Fetch-b3914c0a.js";class o extends e{constructor(e){super(e)}GetModelsForMakeIdYear(e){return r(this,void 0,void 0,(function*(){const r="GetModelsForMakeIdYear",o=null==e?void 0:e.makeId,s=null==e?void 0:e.modelYear,a=null==e?void 0:e.vehicleType,i=t(e);if("object"!==i)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params" argument must be of type object, got: <${i}> ${e}`));const n=t(o);if("number"!==n)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.makeId" argument is required and must be of type number, got: <${n}> ${o}`));if(!s&&!a)return Promise.reject(new Error(`GetModelsForMakeIdYear, either one of "params.modelYear" or "params.vehicleType" is required, got: ${s} | ${a}`));const d=t(s);if(s&&"number"!==d)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.modelYear" must be of type number, got: <${d}> ${s}`));const m=t(a);if(a&&"string"!==m)return Promise.reject(new Error(`GetModelsForMakeIdYear, "params.vehicleType" must be of type string, got: <${m}> ${a}`));let c=`${r}/makeId/${o}/`;c+=s&&a?`modelYear/${s}/vehicleType/${a}`:s?"modelYear/"+s:"vehicleType/"+a;const l=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),u=`${this.baseUrl}/${c}${l}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}export{o as GetModelsForMakeIdYear};
//# sourceMappingURL=GetModelsForMakeIdYear.js.map
