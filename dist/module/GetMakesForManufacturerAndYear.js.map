{"version":3,"file":"GetMakesForManufacturerAndYear.js","sources":["../../src/api/actions/GetMakesForManufacturerAndYear.ts"],"sourcesContent":["/**\n * @module api/actions/GetMakesForManufacturerAndYear\n * @category Actions\n * @description GetMakesForManufacturerAndYear NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetMakesForManufacturerAndYear](module-api_actions_GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear.html)\n * >\n * > **Types**\n * > - Type: [GetMakesForManufacturerAndYearResponse](#GetMakesForManufacturerAndYearResponse)\n * > - Type: [GetMakesForManufacturerAndYearResults](#GetMakesForManufacturerAndYearResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetMakesForManufacturerAndYear extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer,\n   * and whose Year From and Year To range cover the specified year.\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\n   *   (it accepts a partial manufacturer name as an input).\n   * - Multiple results are returned in case of multiple matches.\n   * - Manufacturer can be idenfitied by Id, a partial name, or a full name\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\n   *\n   * @async\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\n   *\n   * @returns {(Promise<GetMakesForManufacturerAndYearResponse>)} Api Response object.\n   */\n  public async GetMakesForManufacturerAndYear(\n    manufacturer: string | number,\n    params: {\n      year: number;\n    }\n  ): Promise<GetMakesForManufacturerAndYearResponse> {\n    const action = 'GetMakesForManufacturerAndYear';\n\n    /* Runtime typechecking */\n    const typeofManufacturer = getTypeof(manufacturer);\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\n            `<${typeofManufacturer}> ${manufacturer}`\n        )\n      );\n    }\n\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument is required and must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetMakesForManufacturerAndYearResponse}.Results' array.\n *\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\n * @alias GetMakesForManufacturerAndYearResults\n */\nexport type GetMakesForManufacturerAndYearResults = {\n  MakeId: number;\n  MakeName: string;\n  MfrId: number;\n  MfrName: string;\n};\n\n/**\n * Type representing the complete response returned by the GetMakesForManufacturerAndYear API Action.\n *\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\n * @alias GetMakesForManufacturerAndYearResponse\n */\nexport type GetMakesForManufacturerAndYearResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetMakesForManufacturerAndYearResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n"],"names":["GetMakesForManufacturerAndYear","Fetch","constructor","userConfig","super","manufacturer","params","action","typeofManufacturer","getTypeof","Promise","reject","Error","typeofParams","typeofYear","year","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"4DAgCaA,UAAuCC,EAClDC,YAAYC,GACVC,MAAMD,GAoBKH,+BACXK,EACAC,4CAIA,MAAMC,EAAS,iCAGTC,EAAqBC,EAAUJ,GACrC,GAA2B,WAAvBG,GAA0D,WAAvBA,EACrC,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGL,sFACGC,MAAuBH,MAKnC,MAAMQ,EAAeJ,EAAUH,GAC/B,GAAqB,WAAjBO,EACF,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGL,sEACGM,MAAiBP,MAK7B,MAAMQ,EAAaL,EAAUH,EAAOS,MACpC,GAAmB,WAAfD,EACF,OAAOJ,QAAQC,OACb,IAAIC,MACF,GAAGL,2EACGO,MAAeR,EAAOS,SAMlC,MAAMC,QAAoBC,KAAKC,iBAAiBZ,GAAQa,OAAOC,GAC7DV,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCa,QAKnDC,EAAM,GAAGJ,KAAKK,WAAWf,KAAUF,IAAeW,IAGxD,aAAaC,KAAKM,IAAIF,GACnBG,MAAMC,GAAaA,IACnBN,OAAOC,GACNV,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8Ba"}