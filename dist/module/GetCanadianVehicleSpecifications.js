import{F as e,_ as r,g as t}from"./Fetch-86b867a6.js";import"./isValidVin.js";class i extends e{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return r(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",i=t(e);if("object"!==i)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${i}> ${e}`));const n=t(e.year);if("number"!==n)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${n}> ${e.year}`));const s=t(e.make);if(e.make&&"string"!==s)return Promise.reject(new Error(`${r}, "params.make" argument must be of type string, got: `+`<${s}> ${e.make}`));const o=t(e.model);if(e.model&&"string"!==o)return Promise.reject(new Error(`${r}, "params.model" argument must be of type string, got: `+`<${o}> ${e.model}`));const a=t(e.units);if(e.units&&"string"!==a)return Promise.reject(new Error(`${r}, "params.units" argument must be of type string, got: `+`<${a}> ${e.units}`));const m=e.make||"",u=e.model||"",c=e.units||"",g={year:e.year,make:m,model:u,units:c},$=yield this.buildQueryString(g,!0).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),d=`${this.baseUrl}/${r}${$}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}export{i as GetCanadianVehicleSpecifications};
//# sourceMappingURL=GetCanadianVehicleSpecifications.js.map
