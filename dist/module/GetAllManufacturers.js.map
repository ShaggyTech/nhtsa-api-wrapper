{"version":3,"file":"GetAllManufacturers.js","sources":["../../src/api/actions/GetAllManufacturers.ts"],"sourcesContent":["/**\r\n * @module api/actions/GetAllManufacturers\r\n * @category Actions\r\n * @description GetAllManufacturers NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetAllManufacturers](module-api_actions_GetAllManufacturers.GetAllManufacturers.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetAllManufacturersResponse](#GetAllManufacturersResponse)\r\n * > - Type: [GetAllManufacturersResults](#GetAllManufacturersResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetAllManufacturers extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Manufacturers available in vPIC Dataset.\r\n   * - `params.manufacturerType` allows the user to filter the list based on manufacturer type,\r\n   *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\r\n   *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings).\r\n   * - You can get a list of all manufacturer types with the following API Action:\r\n   *   `GetVehicleVariableValuesList('manufacturer type')`\r\n   * - Results are provided in pages of 100 items.\r\n   * - Provide a number value for `params.page` to specify 1st (default), 2nd, 3rd, Nth, etc page.\r\n   *\r\n   * @async\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string} [params.manufacturerType] - See method description.\r\n   * @param {number} [params.page] - Specify the page number (results returned 100 at a time).\r\n   * @returns {(Promise<module:api.ApiResponse | Error>)} Api Response object.\r\n   */\r\n  async GetAllManufacturers(\r\n    params: {\r\n      manufacturerType?: string;\r\n      page?: number;\r\n    } = {}\r\n  ): Promise<GetAllManufacturersResponse | Error> {\r\n    const action = 'GetAllManufacturers';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofManufacturerType = getTypeof(params.manufacturerType);\r\n    if (params.manufacturerType && typeofManufacturerType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.manufacturerType\" argument must be of type string, got: ` +\r\n            `<${typeofManufacturerType}> ${params.manufacturerType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofPage = getTypeof(params.page);\r\n    if (params.page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: ` +\r\n            `<${typeofPage}> ${params.page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetAllManufacturersResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResults\r\n */\r\nexport type GetAllManufacturersResults = {\r\n  Country: string;\r\n  Mfr_CommonName: string;\r\n  Mfr_ID: number;\r\n  Mfr_Name: string;\r\n  VehicleTypes: Array<{ isPrimary?: boolean; name?: string }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetAllManufacturers API Action.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResponse\r\n */\r\nexport type GetAllManufacturersResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetAllManufacturersResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["GetAllManufacturers","Fetch","[object Object]","userConfig","super","params","action","typeofParams","getTypeof","Promise","reject","Error","typeofManufacturerType","manufacturerType","typeofPage","page","queryString","this","buildQueryString","catch","err","url","baseUrl","get","then","response"],"mappings":"iGAgCaA,UAA4BC,EACvCC,YAAYC,GACVC,MAAMD,GAmBFD,oBACJG,EAGI,6CAEJ,MAAMC,EAAS,sBAGTC,EAAeC,EAAUH,GAC/B,GAAqB,WAAjBE,EACF,OAAOE,QAAQC,OACb,IAAIC,MACF,GAAGL,qDACD,IAAIC,MAAiBF,MAK7B,MAAMO,EAAyBJ,EAAUH,EAAOQ,kBAChD,GAAIR,EAAOQ,kBAA+C,WAA3BD,EAC7B,OAAOH,QAAQC,OACb,IAAIC,MACF,GAAGL,sEACD,IAAIM,MAA2BP,EAAOQ,qBAK9C,MAAMC,EAAaN,EAAUH,EAAOU,MACpC,GAAIV,EAAOU,MAAuB,WAAfD,EACjB,OAAOL,QAAQC,OACb,IAAIC,MACF,GAAGL,0DACD,IAAIQ,MAAeT,EAAOU,SAMlC,MAAMC,QAAoBC,KAAKC,iBAAiBb,GAAQc,MAAMC,GAC5DX,QAAQC,OACN,IAAIC,MAAM,GAAGL,mCAAwCc,OAKnDC,EAAM,GAAGJ,KAAKK,WAAWhB,IAASU,IAGxC,aAAaC,KAAKM,IAAIF,GACnBG,KAAKC,GAAYA,GACjBN,MAAMC,GACLX,QAAQC,OAAO,IAAIC,MAAM,GAAGL,yBAA8Bc"}