var NHTSA=function(e,r){"use strict";function t(e,r,t,o){return new(t||(t=Promise))((function(n,i){function s(e){try{a(o.next(e))}catch(e){i(e)}}function u(e){try{a(o.throw(e))}catch(e){i(e)}}function a(e){e.done?n(e.value):new t((function(r){r(e.value)})).then(s,u)}a((o=o.apply(e,r||[])).next())}))}function o(e){const r=Object.prototype.toString.call(e).toLowerCase();return r.slice(8,r.length-1)}function n(e){return t(this,void 0,void 0,(function*(){if("string"!=typeof e||17!=e.length)return Promise.resolve(!1);const r=(e=e.toUpperCase()).split(""),t=r[8];if(isNaN(parseInt(t))&&"X"!==t)return Promise.resolve(!1);const o="X"===t?10:parseInt(t),n={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9},i=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2],s=r.map((e,r)=>{let t;return t=isNaN(parseInt(e))?n[e]:parseInt(e),t*i[r]}).reduce((e,r)=>e+r,0)%11;return Promise.resolve(s===o)}))}r=r&&r.hasOwnProperty("default")?r.default:r;const i={apiResponseFormat:"json",baseUrl:"https://vpic.nhtsa.dot.gov/api/vehicles",options:{}};class s{constructor(e){let r;r=e&&"object"===o(e)?Object.assign(Object.assign(Object.assign({},i),e),{options:Object.assign(Object.assign({},i.options),e.options)}):Object.assign({},i),this.apiResponseFormat="json",this.baseUrl=r.baseUrl,this.options=r.options}buildQueryString(e,r=!1){return t(this,void 0,void 0,(function*(){return e=e&&"object"===o(e)?Object.assign(Object.assign({},e),{format:this.apiResponseFormat}):{format:this.apiResponseFormat},yield function(e={},r=!1){if("object"!==o(e))return Promise.reject(new Error(`queryString(params) - expected params in the form of an object, got: ${e}`));const t=Object.entries(e),n=t.length;if(n<1)return Promise.resolve("");let i=!1;const s=t.map(([e,t],s)=>{let u="",a="";const c=o(t);if(t&&"number"===c&&(t=t.toString()),(t||r)&&("string"===c||"number"===c))return i||(u="?",i=!0),s<n-1&&(a="&"),`${u}${e}=${t}${a}`});return Promise.resolve(encodeURI(s.join("")))}(e,r)}))}get(e,n={}){return t(this,void 0,void 0,(function*(){const t=o(e);if("string"!==t)return Promise.reject(new Error(`Fetch.get(url) - url argument must be of type string, got: ${t}`));const i=o(n);if("object"!==i)return Promise.reject(new Error(`Fetch.get(url, options) - options argument must be of type object, got: ${i}`));const s=Object.assign(Object.assign({},this.options),n),u=yield r(e,s).then(e=>{var r,t,o,n;if(!(null===(r=e)||void 0===r?void 0:r.status)||e.status>=400)throw new Error(`Bad response from server, code: ${null===(t=e)||void 0===t?void 0:t.status}, text: ${null===(o=e)||void 0===o?void 0:o.statusText}, headers: ${null===(n=e)||void 0===n?void 0:n.headers}`);return e}).catch(e=>Promise.reject(new Error(`Fetch.get() http error: ${e}`))),a=yield u.json().then(e=>e),c=Object.assign(Object.assign({},a),{FetchResponse:{headers:u.headers,ok:u.ok,redirected:u.redirected,status:u.status,statusText:u.statusText,url:u.url}});return Promise.resolve(c)}))}}class u extends s{constructor(e){super(e)}DecodeVin(e,r){var n,i;return t(this,void 0,void 0,(function*(){const t=o(r);if(r&&"object"!==t)return Promise.reject(new Error('DecodeVin, "params" argument must be of type object, got: '+`<${t}> ${r}`));const s=o(e);if("string"!==s)return Promise.reject(new Error('DecodeVin, "vin" argument is required and must be of type string, got: '+`<${s}> ${e}`));const u=o(null===(n=r)||void 0===n?void 0:n.modelYear);if((null===(i=r)||void 0===i?void 0:i.modelYear)&&"number"!==u)return Promise.reject(new Error('DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: '+`<${u}> ${r.modelYear}`));const a=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`))),c=`${this.baseUrl}/DecodeVin/${e}${a}`;return yield this.get(c).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`)))}))}}class a extends s{constructor(e){super(e)}DecodeVinExtended(e,r){var n,i;return t(this,void 0,void 0,(function*(){const t="DecodeVinExtended",s=o(r);if(r&&"object"!==s)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: `+`<${s}> ${r}`));const u=o(e);if("string"!==u)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: `+`<${u}> ${e}`));const a=o(null===(n=r)||void 0===n?void 0:n.modelYear);if((null===(i=r)||void 0===i?void 0:i.modelYear)&&"number"!==a)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${a}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),d=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class c extends s{constructor(e){super(e)}DecodeVinValues(e,r){var n,i;return t(this,void 0,void 0,(function*(){const t="DecodeVinValues",s=o(r);if(r&&"object"!==s)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: `+`<${s}> ${r}`));const u=o(e);if("string"!==u)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: `+`<${u}> ${e}`));const a=o(null===(n=r)||void 0===n?void 0:n.modelYear);if((null===(i=r)||void 0===i?void 0:i.modelYear)&&"string"!==a&&"number"!==a)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${a}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),d=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class d extends s{constructor(e){super(e)}DecodeVinValuesExtended(e,r){var n,i;return t(this,void 0,void 0,(function*(){const t="DecodeVinValuesExtended",s=o(r);if(r&&"object"!==s)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: `+`<${s}> ${r}`));const u=o(e);if("string"!==u)return Promise.reject(new Error(`${t}, "vin" argument is required and must be of type string, got: `+`<${u}> ${e}`));const a=o(null===(n=r)||void 0===n?void 0:n.modelYear);if((null===(i=r)||void 0===i?void 0:i.modelYear)&&"number"!==a)return Promise.reject(new Error(`${t}, "params.modelYear" argument is required and must be of type string or number, got: `+`<${a}> ${r.modelYear}`));const c=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),d=`${this.baseUrl}/${t}/${e}${c}`;return yield this.get(d).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class l extends s{constructor(e){super(e)}DecodeWMI(e){return t(this,void 0,void 0,(function*(){const r=o(e);if("string"!==r)return Promise.reject(new Error('DecodeWMI, "WMI" argument is required and must be of type string, got: '+`<${r}> ${e}`));const t=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`DecodeWMI, Error building query string: ${e}`))),n=`${this.baseUrl}/DecodeWMI/${e}${t}`;return yield this.get(n).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeWMI, Fetch.get() error: ${e}`)))}))}}class m extends s{constructor(e){super(e)}GetAllMakes(){return t(this,void 0,void 0,(function*(){const e=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`GetAllMakes, Error building query string: ${e}`))),r=`${this.baseUrl}/GetAllMakes${e}`;return yield this.get(r).then(e=>e).catch(e=>Promise.reject(new Error(`GetAllMakes, Fetch.get() error: ${e}`)))}))}}class $ extends s{constructor(e){super(e)}GetAllManufacturers(e={}){return t(this,void 0,void 0,(function*(){const r="GetAllManufacturers",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${t}> ${e}`));const n=o(e.manufacturerType);if(e.manufacturerType&&"string"!==n)return Promise.reject(new Error(`${r}, "params.manufacturerType" argument must be of type string, got: `+`<${n}> ${e.manufacturerType}`));const i=o(e.page);if(e.page&&"number"!==i)return Promise.reject(new Error(`${r}, "params.page" argument must be of type number, got: `+`<${i}> ${e.page}`));const s=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),u=`${this.baseUrl}/${r}${s}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class g extends s{constructor(e){super(e)}GetCanadianVehicleSpecifications(e){return t(this,void 0,void 0,(function*(){const r="GetCanadianVehicleSpecifications",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${n}> ${e.year}`));const i=o(e.make);if(e.make&&"string"!==i)return Promise.reject(new Error(`${r}, "params.make" argument must be of type string, got: `+`<${i}> ${e.make}`));const s=o(e.model);if(e.model&&"string"!==s)return Promise.reject(new Error(`${r}, "params.model" argument must be of type string, got: `+`<${s}> ${e.model}`));const u=o(e.units);if(e.units&&"string"!==u)return Promise.reject(new Error(`${r}, "params.units" argument must be of type string, got: `+`<${u}> ${e.units}`));const a=e.make||"",c=e.model||"",d=e.units||"",l={year:e.year,make:a,model:c,units:d},m=yield this.buildQueryString(l,!0).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),$=`${this.baseUrl}/${r}${m}`;return yield this.get($).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class h extends s{constructor(e){super(e)}GetEquipmentPlantCodes(e){return t(this,void 0,void 0,(function*(){const r="GetEquipmentPlantCodes",t=o(e);if("object"!==t)return Promise.reject(new Error(`${r}, "params" argument must be of type object, got: `+`<${t}> ${e}`));const n=o(e.year);if("number"!==n)return Promise.reject(new Error(`${r}, "params.year" argument is required and must be of type number, got: `+`<${n}> ${e.year}`));const i=o(e.equipmentType);if("number"!==i)return Promise.reject(new Error(`${r}, "params.equipmentType" argument is required and must be of type number, got: `+`<${i}> ${e.equipmentType}`));const s=o(e.reportType);if("string"!==s)return Promise.reject(new Error(`${r}, "params.reportType" argument is required and must be of type string, got: `+`<${s}> ${e.reportType}`));const u=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),a=`${this.baseUrl}/${r}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class p extends s{constructor(e){super(e)}GetMakeForManufacturer(e){return t(this,void 0,void 0,(function*(){const r="GetMakeForManufacturer",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class y extends s{constructor(e){super(e)}GetMakesForManufacturerAndYear(e,r){return t(this,void 0,void 0,(function*(){const t="GetMakesForManufacturerAndYear",n=o(e);if("string"!==n&&"number"!==n)return Promise.reject(new Error(`${t}, "manufacturer" argument is required and must be of type string or number, got: `+`<${n}> ${e}`));const i=o(r);if("object"!==i)return Promise.reject(new Error(`${t}, "params" argument is required and must be of type object, got: `+`<${i}> ${r}`));const s=o(r.year);if("number"!==s)return Promise.reject(new Error(`${t}, "params.year" argument is required and must be of type number, got: `+`<${s}> ${r.year}`));const u=yield this.buildQueryString(r).catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),a=`${this.baseUrl}/${t}/${e}${u}`;return yield this.get(a).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class b extends s{constructor(e){super(e)}GetMakesForVehicleType(e){return t(this,void 0,void 0,(function*(){const r="GetMakesForVehicleType",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "typeName" argument is required and must be of type string, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class f extends s{constructor(e){super(e)}GetManufacturerDetails(e){return t(this,void 0,void 0,(function*(){const r="GetManufacturerDetails",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string or number, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class j extends s{constructor(e){super(e)}GetModelsForMake(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class E extends s{constructor(e){super(e)}GetModelsForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetModelsForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString({}).catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class v extends s{constructor(e){super(e)}GetModelsForMakeIdYear(e){var r,n,i;return t(this,void 0,void 0,(function*(){const t="GetModelsForMakeIdYear",s=null===(r=e)||void 0===r?void 0:r.makeId,u=null===(n=e)||void 0===n?void 0:n.modelYear,a=null===(i=e)||void 0===i?void 0:i.vehicleType,c=o(e);if("object"!==c)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: `+`<${c}> ${e}`));const d=o(s);if("number"!==d)return Promise.reject(new Error(`${t}, "params.makeId" argument is required and must be of type number, got: `+`<${d}> ${s}`));if(!u&&!a)return Promise.reject(new Error(`${t}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${u} | ${a}`));const l=o(u);if(u&&"number"!==l)return Promise.reject(new Error(`${t}, "params.modelYear" must be of type number, got: `+`<${l}> ${u}`));const m=o(a);if(a&&"string"!==m)return Promise.reject(new Error(`${t}, "params.vehicleType" must be of type string, got: `+`<${m}> ${a}`));let $=`${t}/makeId/${s}/`;$+=u&&a?`modelYear/${u}/vehicleType/${a}`:u?`modelYear/${u}`:`vehicleType/${a}`;const g=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),h=`${this.baseUrl}/${$}${g}`;return yield this.get(h).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class P extends s{constructor(e){super(e)}GetModelsForMakeYear(e){var r,n,i;return t(this,void 0,void 0,(function*(){const t="GetModelsForMakeYear",s=null===(r=e)||void 0===r?void 0:r.make,u=null===(n=e)||void 0===n?void 0:n.modelYear,a=null===(i=e)||void 0===i?void 0:i.vehicleType,c=o(e);if("object"!==c)return Promise.reject(new Error(`${t}, "params" argument must be of type object, got: `+`<${c}> ${e}`));const d=o(s);if("string"!==d)return Promise.reject(new Error(`${t}, "params.make" argument is required and must be of type string, got: `+`<${d}> ${s}`));if(!u&&!a)return Promise.reject(new Error(`${t}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${u} | ${a}`));const l=o(u);if(u&&"number"!==l)return Promise.reject(new Error(`${t}, "params.modelYear" must be of type number, got: `+`<${l}> ${u}`));const m=o(a);if(a&&"string"!==m)return Promise.reject(new Error(`${t}, "params.vehicleType" must be of type string, got: `+`<${m}> ${a}`));let $=`${t}/make/${e.make}/`;$+=u&&a?`modelYear/${u}/vehicleType/${a}`:u?`modelYear/${u}`:`vehicleType/${a}`;const g=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${t}, Error building query string: ${e}`))),h=`${this.baseUrl}/${$}${g}`;return yield this.get(h).then(e=>e).catch(e=>Promise.reject(new Error(`${t}, Fetch.get() error: ${e}`)))}))}}class M extends s{constructor(e){super(e)}GetParts(e){var r,n,i,s;return t(this,void 0,void 0,(function*(){const t=null===(r=e)||void 0===r?void 0:r.type,u=null===(n=e)||void 0===n?void 0:n.fromDate,a=null===(i=e)||void 0===i?void 0:i.toDate,c=null===(s=e)||void 0===s?void 0:s.page,d=o(e);if(e&&"object"!==d)return Promise.reject(new Error(`GetParts, "params" argument must be of type object, got: <${d}> ${e}`));const l=o(t);if(t&&"number"!==l)return Promise.reject(new Error(`GetParts, "params.type" argument must be of type number, got: <${l}> ${t}`));const m=o(u);if(u&&"string"!==m)return Promise.reject(new Error(`GetParts, "params.fromDate" argument must be of type string, got: <${m}> ${u}`));const $=o(a);if(a&&"string"!==$)return Promise.reject(new Error(`GetParts, "params.toDate" argument must be of type string, got: <${$}> ${a}`));const g=o(c);if(c&&"number"!==g)return Promise.reject(new Error(`GetParts, "params.page" argument must be of type number, got: <${g}> ${c}`));const h=yield this.buildQueryString(e).catch(e=>Promise.reject(new Error(`GetParts, Error building query string: ${e}`))),p=`${this.baseUrl}/GetParts${h}`;return yield this.get(p).then(e=>e).catch(e=>Promise.reject(new Error(`GetParts, Fetch.get() error: ${e}`)))}))}}class w extends s{constructor(e){super(e)}GetVehicleTypesForMake(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMake",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "makeName" argument is required and must be of type string, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class G extends s{constructor(e){super(e)}GetVehicleTypesForMakeId(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleTypesForMakeId",t=o(e);if("number"!==t)return Promise.reject(new Error(`${r}, "makeId" argument is required and must be of type number, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class V extends s{constructor(e){super(e)}GetVehicleVariableList(){return t(this,void 0,void 0,(function*(){const e="GetVehicleVariableList",r=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),t=`${this.baseUrl}/${e}${r}`;return yield this.get(t).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}class F extends s{constructor(e){super(e)}GetVehicleVariableValuesList(e){return t(this,void 0,void 0,(function*(){const r="GetVehicleVariableValuesList",t=o(e);if("string"!==t&&"number"!==t)return Promise.reject(new Error(`${r}, "variableValue" argument is required and must be of type string or number, got: `+`<${t}> ${e}`));"string"===t&&(e=encodeURI(e));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class k extends s{constructor(e){super(e)}GetWMIsForManufacturer(e){return t(this,void 0,void 0,(function*(){const r="GetWMIsForManufacturer",t=o(e);if("string"!==t)return Promise.reject(new Error(`${r}, "manufacturer" argument is required and must be of type string, got: `+`<${t}> ${e}`));const n=yield this.buildQueryString().catch(e=>Promise.reject(new Error(`${r}, Error building query string: ${e}`))),i=`${this.baseUrl}/${r}/${e}${n}`;return yield this.get(i).then(e=>e).catch(e=>Promise.reject(new Error(`${r}, Fetch.get() error: ${e}`)))}))}}class q extends s{constructor(e){super(e),this.isValidVin=n,this.DecodeVin=u.prototype.DecodeVin,this.DecodeVinValues=c.prototype.DecodeVinValues,this.DecodeVinExtended=a.prototype.DecodeVinExtended,this.DecodeVinValuesExtended=d.prototype.DecodeVinValuesExtended,this.DecodeWMI=l.prototype.DecodeWMI,this.GetAllMakes=m.prototype.GetAllMakes,this.GetAllManufacturers=$.prototype.GetAllManufacturers,this.GetCanadianVehicleSpecifications=g.prototype.GetCanadianVehicleSpecifications,this.GetEquipmentPlantCodes=h.prototype.GetEquipmentPlantCodes,this.GetMakeForManufacturer=p.prototype.GetMakeForManufacturer,this.GetMakesForManufacturerAndYear=y.prototype.GetMakesForManufacturerAndYear,this.GetMakesForVehicleType=b.prototype.GetMakesForVehicleType,this.GetManufacturerDetails=f.prototype.GetManufacturerDetails,this.GetModelsForMake=j.prototype.GetModelsForMake,this.GetModelsForMakeId=E.prototype.GetModelsForMakeId,this.GetModelsForMakeIdYear=v.prototype.GetModelsForMakeIdYear,this.GetModelsForMakeYear=P.prototype.GetModelsForMakeYear,this.GetParts=M.prototype.GetParts,this.GetVehicleTypesForMake=w.prototype.GetVehicleTypesForMake,this.GetVehicleTypesForMakeId=G.prototype.GetVehicleTypesForMakeId,this.GetVehicleVariableList=V.prototype.GetVehicleVariableList,this.GetVehicleVariableValuesList=F.prototype.GetVehicleVariableValuesList,this.GetWMIsForManufacturer=k.prototype.GetWMIsForManufacturer}}const D=new q;return e.Client=D,e.DecodeVin=u,e.DecodeVinExtended=a,e.DecodeVinValues=c,e.DecodeVinValuesExtended=d,e.DecodeWMI=l,e.Fetch=s,e.GetAllMakes=m,e.GetAllManufacturers=$,e.GetCanadianVehicleSpecifications=g,e.GetEquipmentPlantCodes=h,e.GetMakeForManufacturer=p,e.GetMakesForManufacturerAndYear=y,e.GetMakesForVehicleType=b,e.GetManufacturerDetails=f,e.GetModelsForMake=j,e.GetModelsForMakeId=E,e.GetModelsForMakeIdYear=v,e.GetModelsForMakeYear=P,e.GetParts=M,e.GetVehicleTypesForMake=w,e.GetVehicleTypesForMakeId=G,e.GetVehicleVariableList=V,e.GetVehicleVariableValuesList=F,e.GetWMIsForManufacturer=k,e.NHTSA=q,e.isValidVin=n,e}({},fetch);
//# sourceMappingURL=iife.js.map
