import{_ as e}from"./tslib.es6-e8a9b979.js";import{F as r,g as t}from"./Fetch-55acb681.js";class o extends r{constructor(e){super(e)}GetModelsForMakeYear(r){return e(this,void 0,void 0,(function*(){const e="GetModelsForMakeYear",o=null==r?void 0:r.make,s=null==r?void 0:r.modelYear,i=null==r?void 0:r.vehicleType,n=t(r);if("object"!==n)return Promise.reject(new Error(`${e}, "params" argument must be of type object, got: `+`<${n}> ${r}`));const a=t(o);if("string"!==a)return Promise.reject(new Error(`${e}, "params.make" argument is required and must be of type string, got: `+`<${a}> ${o}`));if(!s&&!i)return Promise.reject(new Error(`${e}, either one of "params.modelYear" or "params.vehicleType" is required, got: `+`${s} | ${i}`));const m=t(s);if(s&&"number"!==m)return Promise.reject(new Error(`${e}, "params.modelYear" must be of type number, got: `+`<${m}> ${s}`));const c=t(i);if(i&&"string"!==c)return Promise.reject(new Error(`${e}, "params.vehicleType" must be of type string, got: `+`<${c}> ${i}`));let $=`${e}/make/${r.make}/`;$+=s&&i?`modelYear/${s}/vehicleType/${i}`:s?`modelYear/${s}`:`vehicleType/${i}`;const u=yield this.buildQueryString().catch(r=>Promise.reject(new Error(`${e}, Error building query string: ${r}`))),l=`${this.baseUrl}/${$}${u}`;return yield this.get(l).then(e=>e).catch(r=>Promise.reject(new Error(`${e}, Fetch.get() error: ${r}`)))}))}}export{o as GetModelsForMakeYear};
//# sourceMappingURL=GetModelsForMakeYear.js.map
