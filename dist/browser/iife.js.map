{"version":3,"file":"iife.js","sources":["../../src/utils/getTypeof.ts","../../src/utils/isValidVin.ts","../../src/api/Fetch.ts","../../src/utils/makeQueryString.ts","../../src/api/actions/DecodeVin.ts","../../src/api/actions/DecodeVinExtended.ts","../../src/api/actions/DecodeVinValues.ts","../../src/api/actions/DecodeVINValuesBatch.ts","../../src/api/actions/DecodeVinValuesExtended.ts","../../src/api/actions/DecodeWMI.ts","../../src/api/actions/GetAllMakes.ts","../../src/api/actions/GetAllManufacturers.ts","../../src/api/actions/GetCanadianVehicleSpecifications.ts","../../src/api/actions/GetEquipmentPlantCodes.ts","../../src/api/actions/GetMakeForManufacturer.ts","../../src/api/actions/GetMakesForManufacturerAndYear.ts","../../src/api/actions/GetMakesForVehicleType.ts","../../src/api/actions/GetManufacturerDetails.ts","../../src/api/actions/GetModelsForMake.ts","../../src/api/actions/GetModelsForMakeId.ts","../../src/api/actions/GetModelsForMakeIdYear.ts","../../src/api/actions/GetModelsForMakeYear.ts","../../src/api/actions/GetParts.ts","../../src/api/actions/GetVehicleTypesForMake.ts","../../src/api/actions/GetVehicleTypesForMakeId.ts","../../src/api/actions/GetVehicleVariableList.ts","../../src/api/actions/GetVehicleVariableValuesList.ts","../../src/api/actions/GetWMIsForManufacturer.ts","../../src/api/NHTSA.ts","../../src/api/Client.ts"],"sourcesContent":["/**\n * @module utils/getTypeof\n * @category Utils\n */\n\n/**\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\n *\n * @param {any} value - Any kind of value (string, object, array, function, etc).\n *\n * @returns {string} - Type of value, normalized to a lowercase string.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getTypeof(value: any): string {\n  const toString: string = Object.prototype.toString\n    .call(value)\n    .toLowerCase(); /* ex: => '[object string]' or '[object array], etc. */\n  return toString.slice(8, toString.length - 1);\n}\n","/**\n * @module utils/isValidVin\n * @category Utils\n */\n\n/*\n * There will need to be some way to translate vin digits that are alphabetic\n * into their number value in the VIN algorithm transliteration table.\n * Later, during the creation of the checksum variable, those digits will be\n * multiplied against their corresponding weight (by index) in the WEIGHTS_ARRAY.\n * This transliteration table is a key part of the VIN validation algorithm.\n */\nconst TRANSLITERATION_TABLE: Record<string, number> = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4,\n  E: 5,\n  F: 6,\n  G: 7,\n  H: 8,\n  J: 1,\n  K: 2,\n  L: 3,\n  M: 4,\n  N: 5,\n  P: 7,\n  R: 9,\n  S: 2,\n  T: 3,\n  U: 4,\n  V: 5,\n  W: 6,\n  X: 7,\n  Y: 8,\n  Z: 9,\n};\n\n/*\n * Later, during the creation of the 'checksum' variable, these weights will be\n * multiplied by the value of their mirrored index vin digits.\n * The array index of each weight corresponds to the same index of each\n * digit in the 'vin'.\n */\nconst WEIGHTS_ARRAY: number[] = [\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  10,\n  0,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n];\n\n/**\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\n *\n * @param {string} vin - Vehicle Identification Number.\n * @returns {boolean} True for a valid VIN, false for an invalid VIN.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const isValid = NHTSA.isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n * @example <caption>When loaded as a module</caption>\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\n * const isValid = isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n */\nexport function isValidVin(vin: string): boolean {\n  /* A valid VIN must be a string and is always exactly 17 digits */\n  if (typeof vin !== 'string' || vin.length != 17) {\n    return false;\n  }\n\n  /* Normalize the vin to all uppercase letters */\n  vin = vin.toUpperCase();\n\n  /* split the vin digits into an array */\n  const vinArray: string[] = vin.split('');\n\n  /* checkDigit will be tested against the checkSum later */\n  const checkDigit: string = vinArray[8];\n\n  /*\n   * In a valid VIN, the checkDigit can either be:\n   * a number, 0-9 inclusive OR the character 'X'\n   */\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\n    return false;\n  }\n\n  /*\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\n   * to be converted as such.\n   */\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit);\n\n  /*\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\n   * into numbers, using the TRANSLITERATION_TABLE.\n   * Then these numbers are multiplied against their corresponding weight\n   * in the WEIGHTS_ARRAY, matched by index position.\n   * All 17 of those digitValues are then added together and divided by 11.\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\n   */\n  const checksum: number =\n    vinArray\n      .map((digit: string, index: number) => {\n        let digitValue: number;\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\n        isNaN(parseInt(digit))\n          ? (digitValue = TRANSLITERATION_TABLE[digit])\n          : (digitValue = parseInt(digit));\n\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\n        const weight: number = WEIGHTS_ARRAY[index];\n\n        /* The final step for each digit is to multiply the digit by it's corresponding weight */\n        return digitValue * weight;\n      })\n      /* Finally, get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\n      .reduce((acc, currValue) => acc + currValue, 0) % 11;\n\n  /*\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\n   * we return true, otherwise the VIN is invalid and we return false.\n   */\n  return checksum === checkValue;\n}\n","/**\n * @module api/Fetch\n * @category API\n * @description API Fetch Logic.\n *\n * > **Module Exports**:\n * > - Class: [Fetch](module-api_Fetch.Fetch.html)\n * > - Constant: [BASE_URL](#~BASE_URL)\n * > - Constant: [DEFAULT_CONFIG](#~DEFAULT_CONFIG)\n * >\n * > **Types**\n * > - Type: [ApiResponse](#ApiResponse)\n * > - Type: [FetchConfig](#FetchConfig)\n * > - Type: [FetchRequestOptions](#FetchRequestOptions)\n * > - Type: [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body)\n * > - Type: [FetchResponse](#FetchResponse)\n * > - Type: [NhtsaResponse](#NhtsaResponse)\n */\n\n/* Module Dependencies */\nimport fetch from 'cross-fetch';\n/* Utilities */\nimport { getTypeof, makeQueryString } from '../utils';\n/* Types */\nimport { QueryStringParameters } from '../utils/types';\n\n/*****************\n * CONSTANTS\n ****************/\n\n/**\n * @constant {string} BASE_URL Default Fetch base URL string\n * @default 'https://vpic.nhtsa.dot.gov/api/vehicles'\n */\nexport const BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles';\n\n/**\n * @constant {module:api/Fetch.FetchConfig} DEFAULT_CONFIG Default Fetch configuration options\n * @property {string} apiResponseFormat=json\n * @property {string} baseUrl=BASE_URL Default: [BASE_URL](module-api_Fetch.html#~BASE_URL)\n * @property {FetchRequestOptions} options={method:\"GET\"}\n */\nexport const DEFAULT_CONFIG: FetchConfig = {\n  apiResponseFormat: 'json',\n  baseUrl: BASE_URL,\n  options: {},\n};\n\n/*****************\n * Fetch Class\n ****************/\n\n/**\n * Class wrapper containing API wrapper HTTP Fetch logic.\n *\n * > **Static Methods**:\n * > - [buildQueryString](#buildQueryString)\n * > - [get](#get)\n *\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n * @category API\n */\nexport class Fetch {\n  apiResponseFormat: string;\n  baseUrl?: string;\n  options?: FetchRequestOptions;\n\n  constructor(userConfig?: FetchConfig) {\n    let finalConfig: FetchConfig;\n\n    /* userConfig takes precedence over DEFAULT_CONFIG */\n    if (userConfig && getTypeof(userConfig) === 'object') {\n      finalConfig = {\n        ...DEFAULT_CONFIG,\n        ...userConfig,\n        options: { ...DEFAULT_CONFIG.options, ...userConfig.options },\n      };\n    } else {\n      finalConfig = { ...DEFAULT_CONFIG };\n    }\n\n    /** @private */\n    this.apiResponseFormat = 'json';\n    /** @private */\n    this.baseUrl = finalConfig.baseUrl;\n    /** @private */\n    this.options = finalConfig.options;\n  }\n\n  /**\n   * Builds a query string from QueryStringParameters.\n   *\n   * @param {QueryStringParameters} params - Object containing Key:Value pairs to build the URL query string with.\n   * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\n   * - Given params of `{paramName: \"\"}` , setting this to true will use 'paramName=' in the final query string.\n   * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\n   * @returns {(Promise<string>)} A formatted NHSTA.dot.gov Vehicles API query string.\n   */\n  async buildQueryString(\n    params?: QueryStringParameters,\n    allowEmptyStringValues = false\n  ): Promise<string> {\n    /*\n     * Make sure we're always using 'format=json' in the url Query parameters\n     * If the user provides a 'format' key in the params, during class instantiation we want to override it to 'json'\n     * This package may provide support for the other formats (CSV and XML) if requested.\n     */\n    if (!params || getTypeof(params) !== 'object') {\n      params = {\n        format: this.apiResponseFormat,\n      };\n    } else {\n      params = { ...params, format: this.apiResponseFormat };\n    }\n\n    /* Return the completed query string */\n    return await makeQueryString(params, allowEmptyStringValues);\n  }\n\n  /**\n   * Uses the `cross-fetch` npm package to send HTTP requests and retrieve data from an API.\n   * - In browser environments, [whatwg-fetch](https://github.com/github/fetch/) window.fetch is used.\n   * - In node environments, [node-fetch](https://github.com/bitinn/node-fetch/) NPM package is used.\n   *\n   * @param {string} url - URL to fetch data from.\n   * @param {FetchRequestOptions} [options] - [Fetch options](https://github.github.io/fetch/#options).\n   * @returns {(Promise<module:api/Fetch.ApiResponse>)} Response from the API.\n   */\n  async get(\n    url: string,\n    options: FetchRequestOptions = {}\n  ): Promise<ApiResponse> {\n    /* Runtime typechecking */\n    const typeofUrl = getTypeof(url);\n    if (typeofUrl !== 'string') {\n      return Promise.reject(\n        new Error(\n          `Fetch.get(url) - url argument must be of type string, got: ${typeofUrl}`\n        )\n      );\n    }\n    const typeofOptions = getTypeof(options);\n    if (typeofOptions !== 'object') {\n      return Promise.reject(\n        new Error(\n          `Fetch.get(url, options) - options argument must be of type object, got: ${typeofOptions}`\n        )\n      );\n    }\n\n    /* Combine user provided 'options' and class property 'this.options', user options overwrite class options */\n    const combinedOptions = { ...this.options, ...options };\n\n    /* Use the cross-fetch package to perform an HTTP request */\n    const response: Response = await fetch(url, combinedOptions)\n      .then((result) => {\n        if (!result?.status || result.status >= 400) {\n          throw new Error(\n            `Bad response from server, code: ${result?.status}, text: ${result?.statusText}, headers: ${result?.headers}`\n          );\n        } else return result;\n      })\n      .catch((err) =>\n        Promise.reject(new Error(`Fetch.get() http error: ${err}`))\n      );\n\n    /* Convert the NHTSA API data to JSON */\n    const NhtsaResponse: NhtsaResponse = await response\n      .json()\n      .then((json: NhtsaResponse): NhtsaResponse => json);\n\n    /* Add the fetch response information to the returned NHSTA API data */\n    const finalResult: ApiResponse = {\n      ...NhtsaResponse,\n      FetchResponse: {\n        headers: response.headers,\n        ok: response.ok,\n        redirected: response.redirected,\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      },\n    };\n\n    /* Return the completed ApiResponse */\n    return Promise.resolve(finalResult);\n  }\n}\n\n/*****************\n * Types\n ****************/\n\n/**\n * Various fetch request body types.\n *\n * @typedef FetchRequestBodyTypes\n * @type {URLSearchParams | FormData | Blob | ArrayBuffer | DataView}\n *\n * @memberof module:api/Fetch\n */\nexport type FetchRequestBodyTypes =\n  | URLSearchParams\n  | FormData\n  | Blob\n  | ArrayBuffer\n  | DataView;\n\n/**\n * Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}.\n *\n * @memberof module:api/Fetch\n * @alias FetchRequestOptions\n */\nexport type FetchRequestOptions = {\n  /**HTTP request method - Default: \"GET\". */\n  method?: string;\n  /** HTTP request body - [FetchRequestBodyTypes](https://github.github.io/fetch/#request-body). */\n  body?: string | FetchRequestBodyTypes;\n  /** [Object, Headers](https://github.github.io/fetch/#Headers) - Default: {}. */\n  headers?: Record<string, string> | Headers;\n  /**\n   * Default: \"omit\" - Authentication credentials mode.\n   * - \"omit\" - don't include authentication credentials (e.g. Cookies) in the request.\n   * - \"same-origin\" - include credentials in requests to the same site\n   * - \"include\" - include credentials in requests to all sites.\n   */\n  credentials?: 'omit' | 'same-origin' | 'include';\n};\n\n/**\n * Used when instantiating a Fetch class or related subclass.\n *\n * @memberof module:api/Fetch\n * @alias FetchConfig\n */\nexport type FetchConfig = {\n  /** Requested response format from the NHSTA API (hardcoded to 'json' for now). */\n  apiResponseFormat?: string;\n  /** Base of the URL to build fetch URLs from. */\n  baseUrl?: string;\n  /** Options object provided as the 2nd argument to {@link module:api/Fetch.Fetch#get}. */\n  options?: FetchRequestOptions;\n};\n\n/**\n * [Fetch API Response](https://github.github.io/fetch/#Response) properties.\n *\n * @memberof module:api/Fetch\n * @alias FetchResponse\n */\nexport type FetchResponse = {\n  /** The [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object associated with the response. */\n  headers: Headers;\n  /** A boolean indicating whether the response was successful (status in the range 200–299) or not. */\n  ok: boolean;\n  /** Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry). */\n  redirected: boolean;\n  /** The status code of the response. (This will be 200 for a success). */\n  status: number;\n  /** The status message corresponding to the status code. (e.g., OK for 200). */\n  statusText: string;\n  /** The URL of the response. */\n  url: string;\n};\n\n/**\n * Response data returned from the NHSTA API.\n *\n * @memberof module:api/Fetch\n * @alias NhtsaResponse\n */\nexport type NhtsaResponse = {\n  /** The number of items returned in the Results object. */\n  Count: number;\n  /** A message describing the Results. */\n  Message: string;\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\n  SearchCriteria: string;\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\n  Results: Array<any>;\n};\n\n/**\n * Complete response returned by {@link module:api/Fetch.Fetch#get}.\n *\n * @see {@link module:api/Fetch.NhtsaResponse}\n * @see {@link module:api/Fetch.FetchResponse}\n * @memberof module:api/Fetch\n * @alias ApiResponse\n */\nexport type ApiResponse = {\n  /** The number of items returned in the Results object. */\n  Count: number;\n  /** A message describing the Results. */\n  Message: string;\n  /** Search terms (VIN, WMI, etc) used in the request URL. */\n  SearchCriteria: string;\n  /** An array of Results returned by NHSTA, specific to each individual API Action. */\n  Results: Array<any>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) Properties. */\n  FetchResponse: FetchResponse;\n};\n","import { getTypeof } from './getTypeof';\n\n/**\n * @module utils/makeQueryString\n * @category Utils\n */\n\n/**\n * Utility method to generate a query string compatible with the NHSTA API, for use in an API URL string.\n *\n * @async\n *\n * @param {object} params - Object of Type [QueryStringParameters](module-utils_makeQueryString.html#.QueryStringParameters).\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to add empty parameter values to the returned query string.\n * - Given params of `{ paramName: \"\" }` , setting this to true will use 'paramName=' in the final query string.\n * - GetCanadianVehicleSpecifications is the only API Action that requires this functionality.\n *\n * @returns {Promise<string>} A query string of search parameters for use in a final Fetch.get URL.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const qs = await NHTSA.makeQueryString({ modelYear: 2010 }).catch(error => error)\n * console.log(qs) // \"?modelYear=2010\"\n *\n * @example <caption>When loaded as a module</caption>\n * import { makeQueryString } from '@shaggytools/nhtsa-api-wrapper'\n * const qs = await makeQueryString({ modelYear: 2010 }).catch(error => error)\n * console.log(qs) // \"?modelYear=2010\"\n *\n * @example <caption>Single Param:</caption>\n * const qs = await makeQueryString({\n *   modelYear: 2019\n * }).catch(error => error)\n * console.log(qs) // \"?modelYear=2019\"\n *\n * @example <caption>Multiple Params:</caption>\n * const qs = await makeQueryString({\n *   whatever: 'some value',\n *   modelYear: 2006,\n *   page: \"2\"\n * }).catch(error => error)\n *\n * console.log(qs) // \"?whatever=some%20value&modelYear=2006&page=2\"\n *\n * @example <caption>Empty Params Object:</caption>\n * const qs = await makeQueryString({}).catch(error => error)\n *\n * console.log(qs) // \"\"\n *\n * @example <caption>Using allowEmptyStringValues option:</caption>\n * const qs = await makeQueryString({\n *   year: 2016,\n *   vehicleType: '',\n *   make: 'Audi'\n * }, true).catch(error => error)\n *\n * console.log(qs) // \"?year=2016&vehicleType=&make=Audi\"\n *\n */\nexport function makeQueryString(\n  params: QueryStringParameters = {},\n  allowEmptyStringValues = false\n): Promise<string> {\n  /* Beginning of error message string */\n  const errorBase =\n    'queryString(params) - expected params in the form of an object, got:';\n\n  /* Runtime type guard params argument, must be of type object */\n  if (getTypeof(params) !== 'object') {\n    return Promise.reject(new Error(`${errorBase} ${params}`));\n  }\n\n  /* Setup QueryString for Array mapping */\n  const entries = Object.entries(params);\n  const paramsLength = entries.length;\n\n  /* Return an empty string if params are an empty object */\n  if (paramsLength < 1) return Promise.resolve('');\n\n  /* Used to check if we've already prepended a valid query param */\n  let isPrepended = false;\n\n  /* Map [key]:value entries to \"key=value\" strings in an array */\n  const queryStringArray = entries.map(([key, value], index) => {\n    let prepend = '';\n    let append = '';\n\n    const typeofValue = getTypeof(value);\n\n    /* Convert any number values to a string */\n    if (value && typeofValue === 'number') {\n      value = value.toString();\n    }\n\n    /* Skip any invalid values, only string and number value types are valid */\n    if (\n      (value || allowEmptyStringValues) &&\n      (typeofValue === 'string' || typeofValue === 'number')\n    ) {\n      /* if this is the first param we need to prepend the '?' char */\n      if (!isPrepended) {\n        prepend = '?';\n        isPrepended = true;\n      }\n      /* if there is another param coming after this one we need to append the '&' char */\n      if (index < paramsLength - 1) {\n        append = '&';\n      }\n\n      /* Add the completed partial query string to queryStringArray */\n      return `${prepend}${key}=${value}${append}`;\n    }\n    return;\n  });\n\n  /* Join and return the completed query string after URI encoding */\n  return Promise.resolve(encodeURI(queryStringArray.join('')));\n}\n\n/**\n * Object containing Key:Value pairs to build the URL query string with.\n * - Parameter values may be either strings or numbers.\n *\n * @memberof module:utils/makeQueryString\n * @alias QueryStringParameters\n * @example\n * {\n * modelYear: 2009,\n * whatever: 'something'\n * }\n *\n */\nexport type QueryStringParameters = {\n  [propName: string]: string | number | undefined;\n};\n","/**\n * @module api/actions/DecodeVin\n * @category Actions\n * @description DecodeVin NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVin](module-api_actions_DecodeVin.DecodeVin.html)\n * >\n * > **Types**\n * > - Type: [DecodeVinResponse](#DecodeVinResponse)\n * > - Type: [DecodeVinResults](#DecodeVinResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVin extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * The DecodeVin API Action will decode the VIN and the decoded output will be made available in the format of Key-value pairs.\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n   *   or older (pre-1980), model year ranges.\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\n   * - This API also supports partial VIN decoding (VINs that are less than 17 characters).\n   *   - In this case, the VIN will be decoded partially with the available characters.\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\n   *   - The 9th digit is not necessary.\n   *\n   * @async\n   * @param {string} vin - Vehicle Identification Number (full or partial).\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {number} [params.modelYear] - Optional Model Year search parameter.\n   * @returns {(Promise<DecodeVinResponse>)} - Api Response object.\n   */\n  async DecodeVin(\n    vin: string,\n    params?: {\n      modelYear?: number;\n    }\n  ): Promise<DecodeVinResponse> {\n    const action = 'DecodeVin';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofVin = getTypeof(vin);\n    if (typeofVin !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\n            `<${typeofVin}> ${vin}`\n        )\n      );\n    }\n\n    const typeofModelYear = getTypeof(params?.modelYear);\n    if (params?.modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\n            `<${typeofModelYear}> ${params.modelYear}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVinResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVin\n * @alias DecodeVinResults\n */\nexport type DecodeVinResults = {\n  Value: string | null;\n  ValueId: string | null;\n  Variable: string;\n  VariableId: number;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVin API Action.\n *\n * @memberof module:api/actions/DecodeVin\n * @alias DecodeVinResponse\n */\nexport type DecodeVinResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<DecodeVinResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/DecodeVinExtended\n * @category Actions\n * @description DecodeVinExtended NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVinExtended](module-api_actions_DecodeVinExtended.DecodeVinExtended.html)\n * >\n * > **Types**\n * > - Type: [DecodeVinExtendedResponse](#DecodeVinExtendedResponse)\n * > - Type: [DecodeVinExtendedResults](#DecodeVinExtendedResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVinExtended extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This is exactly like the DecodeVin method but provides additional information on variables\n   * related to other NHTSA programs like\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n   * - This will decode the VIN and the decoded output will be made available\n   *   in the format of Key-value pairs.\n   * - In the returned 'Results` object:\n   *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value.\n   *   - In case of text variables, the ValueID is not applicable.\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n   *   or older (pre-1980), model year ranges.\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\n   *   - In this case, the VIN will be decoded partially with the available characters.\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\n   *   - The 9th digit is not necessary.\n   *\n   * @async\n   * @param {string} vin - Vehicle Identification Number (full or partial).\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\n   * @returns {(Promise<DecodeVinExtendedResponse>)} - Api Response object.\n   */\n  async DecodeVinExtended(\n    vin: string,\n    params?: {\n      modelYear?: string | number;\n    }\n  ): Promise<DecodeVinExtendedResponse> {\n    const action = 'DecodeVinExtended';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofVin = getTypeof(vin);\n    if (typeofVin !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\n            `<${typeofVin}> ${vin}`\n        )\n      );\n    }\n\n    const typeofModelYear = getTypeof(params?.modelYear);\n    if (params?.modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\n            `<${typeofModelYear}> ${params.modelYear}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVinExtendedResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVinExtended\n * @alias DecodeVinExtendedResults\n */\nexport type DecodeVinExtendedResults = {\n  Value: string | null;\n  ValueId: string | null;\n  Variable: string;\n  VariableId: number;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVinExtended API Action.\n *\n * @memberof module:api/actions/DecodeVinExtended\n * @alias DecodeVinExtendedResponse\n */\nexport type DecodeVinExtendedResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<DecodeVinExtendedResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/DecodeVinValues\n * @category Actions\n * @description DecodeVinValues NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVinValues](module-api_actions_DecodeVinValues.DecodeVinValues.html)\n * >\n * > **Types**\n * > - Type: [DecodeVinValuesResponse](#DecodeVinValuesResponse)\n * > - Type: [DecodeVinValuesResults](#DecodeVinValuesResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVinValues extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * The DecodeVinValues API Action will decode the VIN with the Results returned in a _flat file_ format.\n   * - The Results will be made available in a flat file format of a single object containing\n   *   'key<string>: value<string>' results.\n   * - Providing params.modelYear allows for the decoding to specifically be done in the current,\n   *   or older (pre-1980), model year ranges.\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\n   *   - In this case, the VIN will be decoded partially with the available characters.\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\n   *\n   * @async\n   * @param {string} vin - Vehicle Identification Number (full or partial).\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\n   * @returns {(Promise<DecodeVinValuesResponse>)} Api Response object.\n   */\n  async DecodeVinValues(\n    vin: string,\n    params?: {\n      modelYear?: number;\n    }\n  ): Promise<DecodeVinValuesResponse> {\n    const action = 'DecodeVinValues';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofVin = getTypeof(vin);\n    if (typeofVin !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\n            `<${typeofVin}> ${vin}`\n        )\n      );\n    }\n\n    const typeofModelYear = getTypeof(params?.modelYear);\n    if (\n      params?.modelYear &&\n      typeofModelYear !== 'string' &&\n      typeofModelYear !== 'number'\n    ) {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\n            `<${typeofModelYear}> ${params.modelYear}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVinValuesResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVinValues\n * @alias DecodeVinValuesResults\n */\nexport type DecodeVinValuesResults = {\n  /** Flat file format, single object containing keys and values of type string */\n  ABS: string;\n  ActiveSafetySysNote: string;\n  AdaptiveCruiseControl: string;\n  AdaptiveDrivingBeam: string;\n  AdaptiveHeadlights: string;\n  AdditionalErrorText: string;\n  AirBagLocCurtain: string;\n  AirBagLocFront: string;\n  AirBagLocKnee: string;\n  AirBagLocSeatCushion: string;\n  AirBagLocSide: string;\n  AutoReverseSystem: string;\n  AutomaticPedestrianAlertingSound: string;\n  AxleConfiguration: string;\n  Axles: string;\n  BasePrice: string;\n  BatteryA: string;\n  BatteryA_to: string;\n  BatteryCells: string;\n  BatteryInfo: string;\n  BatteryKWh: string;\n  BatteryKWh_to: string;\n  BatteryModules: string;\n  BatteryPacks: string;\n  BatteryType: string;\n  BatteryV: string;\n  BatteryV_to: string;\n  BedLengthIN: string;\n  BedType: string;\n  BlindSpotMon: string;\n  BodyCabType: string;\n  BodyClass: string;\n  BrakeSystemDesc: string;\n  BrakeSystemType: string;\n  BusFloorConfigType: string;\n  BusLength: string;\n  BusType: string;\n  CAN_AACN: string;\n  CIB: string;\n  CashForClunkers: string;\n  ChargerLevel: string;\n  ChargerPowerKW: string;\n  CoolingType: string;\n  CurbWeightLB: string;\n  CustomMotorcycleType: string;\n  DaytimeRunningLight: string;\n  DestinationMarket: string;\n  DisplacementCC: string;\n  DisplacementCI: string;\n  DisplacementL: string;\n  Doors: string;\n  DriveType: string;\n  DriverAssist: string;\n  DynamicBrakeSupport: string;\n  EDR: string;\n  ESC: string;\n  EVDriveUnit: string;\n  ElectrificationLevel: string;\n  EngineConfiguration: string;\n  EngineCycles: string;\n  EngineCylinders: string;\n  EngineHP: string;\n  EngineHP_to: string;\n  EngineKW: string;\n  EngineManufacturer: string;\n  EngineModel: string;\n  EntertainmentSystem: string;\n  ErrorCode: string;\n  ErrorText: string;\n  ForwardCollisionWarning: string;\n  FuelInjectionType: string;\n  FuelTypePrimary: string;\n  FuelTypeSecondary: string;\n  GCWR: string;\n  GCWR_to: string;\n  GVWR: string;\n  GVWR_to: string;\n  KeylessIgnition: string;\n  LaneDepartureWarning: string;\n  LaneKeepSystem: string;\n  LowerBeamHeadlampLightSource: string;\n  Make: string;\n  Manufacturer: string;\n  ManufacturerId: string;\n  Model: string;\n  ModelYear: string;\n  MotorcycleChassisType: string;\n  MotorcycleSuspensionType: string;\n  NCSABodyType: string;\n  NCSAMake: string;\n  NCSAMapExcApprovedBy: string;\n  NCSAMapExcApprovedOn: string;\n  NCSAMappingException: string;\n  NCSAModel: string;\n  NCSANote: string;\n  Note: string;\n  OtherBusInfo: string;\n  OtherEngineInfo: string;\n  OtherMotorcycleInfo: string;\n  OtherRestraintSystemInfo: string;\n  OtherTrailerInfo: string;\n  ParkAssist: string;\n  PedestrianAutomaticEmergencyBraking: string;\n  PlantCity: string;\n  PlantCompanyName: string;\n  PlantCountry: string;\n  PlantState: string;\n  PossibleValues: string;\n  Pretensioner: string;\n  RearCrossTrafficAlert: string;\n  RearVisibilitySystem: string;\n  SAEAutomationLevel: string;\n  SAEAutomationLevel_to: string;\n  SeatBeltsAll: string;\n  SeatRows: string;\n  Seats: string;\n  SemiautomaticHeadlampBeamSwitching: string;\n  Series: string;\n  Series2: string;\n  SteeringLocation: string;\n  SuggestedVIN: string;\n  TPMS: string;\n  TopSpeedMPH: string;\n  TrackWidth: string;\n  TractionControl: string;\n  TrailerBodyType: string;\n  TrailerLength: string;\n  TrailerType: string;\n  TransmissionSpeeds: string;\n  TransmissionStyle: string;\n  Trim: string;\n  Trim2: string;\n  Turbo: string;\n  VIN: string;\n  ValveTrainDesign: string;\n  VehicleType: string;\n  WheelBaseLong: string;\n  WheelBaseShort: string;\n  WheelBaseType: string;\n  WheelSizeFront: string;\n  WheelSizeRear: string;\n  Wheels: string;\n  Windows: string;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVinValues API Action.\n *\n * @memberof module:api/actions/DecodeVinValues\n * @alias DecodeVinValuesResponse\n */\nexport type DecodeVinValuesResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /**\n   * The search results returned by the NHSTA API request.\n   * Flat file format, single object containing keys and values of type string\n   * */\n  Results: Array<DecodeVinValuesResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/DecodeVINValuesBatch\n * @category Actions\n * @description DecodeVINValuesBatch NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVINValuesBatch](module-api_actions_DecodeVINValuesBatch.DecodeVINValuesBatch.html)\n * >\n * > **Types**\n * > - Type: [DecodeVINValuesBatchResponse](#DecodeVINValuesBatchResponse)\n * > - Type: [DecodeVINValuesBatchResults](#DecodeVINValuesBatchResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVINValuesBatch extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This decodes a batch of VINs that are submitted in a standardized format in a string\n   * and returns multiple decodes in a flat format.\n   *\n   * The `inputString` parameter should be in the following format:\n   * - `vin , modelYear ; vin , modelYear ; vin , modelYear ...`\n   *\n   * \"modelYear\" is optional, the output for each VIN decode is in the same format as produced by the \"Decode VIN (flat format)\" method.\n   *\n   * @async\n   * @param {string} inputString - A string of Vehicle Identification Numbers (full or partial) following the format listed in the description.\n   * @returns {(Promise<DecodeVINValuesBatchResponse>)} - Api Response object.\n   */\n  async DecodeVINValuesBatch(\n    inputString: string\n  ): Promise<DecodeVINValuesBatchResponse> {\n    const action = 'DecodeVINValuesBatch';\n\n    /* Runtime typechecking */\n    const typeofInputString = getTypeof(inputString);\n    if (typeofInputString !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"inputString\" argument is required and must be of type string, got: ` +\n            `<${typeofInputString}> ${inputString}`\n        )\n      );\n    }\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/`;\n\n    const body = encodeURI(`DATA=${inputString}&format=json`);\n\n    /* Return the result */\n    return await this.get(url, {\n      method: 'POST',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n      body,\n    })\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVINValuesBatchResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVINValuesBatch\n * @alias DecodeVINValuesBatchResults\n */\nexport type DecodeVINValuesBatchResults = {\n  ABS: string;\n  ActiveSafetySysNote: string;\n  AdaptiveCruiseControl: string;\n  AdaptiveDrivingBeam: string;\n  AdaptiveHeadlights: string;\n  AdditionalErrorText: string;\n  AirBagLocCurtain: string;\n  AirBagLocFront: string;\n  AirBagLocKnee: string;\n  AirBagLocSeatCushion: string;\n  AirBagLocSide: string;\n  AutoReverseSystem: string;\n  AutomaticPedestrianAlertingSound: string;\n  AxleConfiguration: string;\n  Axles: string;\n  BasePrice: string;\n  BatteryA: string;\n  BatteryA_to: string;\n  BatteryCells: string;\n  BatteryInfo: string;\n  BatteryKWh: string;\n  BatteryKWh_to: string;\n  BatteryModules: string;\n  BatteryPacks: string;\n  BatteryType: string;\n  BatteryV: string;\n  BatteryV_to: string;\n  BedLengthIN: string;\n  BedType: string;\n  BlindSpotMon: string;\n  BodyCabType: string;\n  BodyClass: string;\n  BrakeSystemDesc: string;\n  BrakeSystemType: string;\n  BusFloorConfigType: string;\n  BusLength: string;\n  BusType: string;\n  CAN_AACN: string;\n  CIB: string;\n  CashForClunkers: string;\n  ChargerLevel: string;\n  ChargerPowerKW: string;\n  CoolingType: string;\n  CurbWeightLB: string;\n  CustomMotorcycleType: string;\n  DaytimeRunningLight: string;\n  DestinationMarket: string;\n  DisplacementCC: string;\n  DisplacementCI: string;\n  DisplacementL: string;\n  Doors: string;\n  DriveType: string;\n  DriverAssist: string;\n  DynamicBrakeSupport: string;\n  EDR: string;\n  ESC: string;\n  EVDriveUnit: string;\n  ElectrificationLevel: string;\n  EngineConfiguration: string;\n  EngineCycles: string;\n  EngineCylinders: string;\n  EngineHP: string;\n  EngineHP_to: string;\n  EngineKW: string;\n  EngineManufacturer: string;\n  EngineModel: string;\n  EntertainmentSystem: string;\n  ErrorCode: string;\n  ErrorText: string;\n  ForwardCollisionWarning: string;\n  FuelInjectionType: string;\n  FuelTypePrimary: string;\n  FuelTypeSecondary: string;\n  GCWR: string;\n  GCWR_to: string;\n  GVWR: string;\n  GVWR_to: string;\n  KeylessIgnition: string;\n  LaneDepartureWarning: string;\n  LaneKeepSystem: string;\n  LowerBeamHeadlampLightSource: string;\n  Make: string;\n  Manufacturer: string;\n  ManufacturerId: string;\n  Model: string;\n  ModelYear: string;\n  MotorcycleChassisType: string;\n  MotorcycleSuspensionType: string;\n  NCSABodyType: string;\n  NCSAMake: string;\n  NCSAMapExcApprovedBy: string;\n  NCSAMapExcApprovedOn: string;\n  NCSAMappingException: string;\n  NCSAModel: string;\n  NCSANote: string;\n  Note: string;\n  OtherBusInfo: string;\n  OtherEngineInfo: string;\n  OtherMotorcycleInfo: string;\n  OtherRestraintSystemInfo: string;\n  OtherTrailerInfo: string;\n  ParkAssist: string;\n  PedestrianAutomaticEmergencyBraking: string;\n  PlantCity: string;\n  PlantCompanyName: string;\n  PlantCountry: string;\n  PlantState: string;\n  PossibleValues: string;\n  Pretensioner: string;\n  RearCrossTrafficAlert: string;\n  RearVisibilitySystem: string;\n  SAEAutomationLevel: string;\n  SAEAutomationLevel_to: string;\n  SeatBeltsAll: string;\n  SeatRows: string;\n  Seats: string;\n  SemiautomaticHeadlampBeamSwitching: string;\n  Series: string;\n  Series2: string;\n  SteeringLocation: string;\n  SuggestedVIN: string;\n  TPMS: string;\n  TopSpeedMPH: string;\n  TrackWidth: string;\n  TractionControl: string;\n  TrailerBodyType: string;\n  TrailerLength: string;\n  TrailerType: string;\n  TransmissionSpeeds: string;\n  TransmissionStyle: string;\n  Trim: string;\n  Trim2: string;\n  Turbo: string;\n  VIN: string;\n  ValveTrainDesign: string;\n  VehicleType: string;\n  WheelBaseLong: string;\n  WheelBaseShort: string;\n  WheelBaseType: string;\n  WheelSizeFront: string;\n  WheelSizeRear: string;\n  Wheels: string;\n  Windows: string;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVINValuesBatch API Action.\n *\n * @memberof module:api/actions/DecodeVINValuesBatch\n * @alias DecodeVINValuesBatchResponse\n */\nexport type DecodeVINValuesBatchResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<DecodeVINValuesBatchResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/DecodeVinValuesExtended\n * @category Actions\n * @description DecodeVinValuesExtended NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeVinValuesExtended](module-api_actions_DecodeVinValuesExtended.DecodeVinValuesExtended.html)\n * >\n * > **Types**\n * > - Type: [DecodeVinValuesExtendedResponse](#DecodeVinValuesExtendedResponse)\n * > - Type: [DecodeVinValuesExtendedResults](#DecodeVinValuesExtendedResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeVinValuesExtended extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This is exactly like the DecodeVinValues (flat format Results) method but provides additional information\n   * on variables related to other NHTSA programs like\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n   * - The Results will be made available in a flat file format of a single object containing\n   *   'key<string>: value<string>' results.\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n   *   or older (pre-1980), model year ranges.\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\n   *   - In this case, the VIN will be decoded partially with the available characters.\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\n   *\n   * @async\n   * @param {string} vin - Vehicle Identification Number (full or partial).\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\n   * @reje\n   * @returns {(Promise<DecodeVinValuesExtendedResponse>)} Api Response object.\n   */\n  async DecodeVinValuesExtended(\n    vin: string,\n    params?: {\n      modelYear?: string | number;\n    }\n  ): Promise<DecodeVinValuesExtendedResponse> {\n    const action = 'DecodeVinValuesExtended';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofVin = getTypeof(vin);\n    if (typeofVin !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\n            `<${typeofVin}> ${vin}`\n        )\n      );\n    }\n\n    const typeofModelYear = getTypeof(params?.modelYear);\n    if (params?.modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\n            `<${typeofModelYear}> ${params.modelYear}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeVinValuesExtendedResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeVinValuesExtended\n * @alias DecodeVinValuesExtendedResults\n */\nexport type DecodeVinValuesExtendedResults = {\n  /** Flat file format, single object containing keys and values of type string */\n  ABS: string;\n  ActiveSafetySysNote: string;\n  AdaptiveCruiseControl: string;\n  AdaptiveDrivingBeam: string;\n  AdaptiveHeadlights: string;\n  AdditionalErrorText: string;\n  AirBagLocCurtain: string;\n  AirBagLocFront: string;\n  AirBagLocKnee: string;\n  AirBagLocSeatCushion: string;\n  AirBagLocSide: string;\n  AutoReverseSystem: string;\n  AutomaticPedestrianAlertingSound: string;\n  AxleConfiguration: string;\n  Axles: string;\n  BasePrice: string;\n  BatteryA: string;\n  BatteryA_to: string;\n  BatteryCells: string;\n  BatteryInfo: string;\n  BatteryKWh: string;\n  BatteryKWh_to: string;\n  BatteryModules: string;\n  BatteryPacks: string;\n  BatteryType: string;\n  BatteryV: string;\n  BatteryV_to: string;\n  BedLengthIN: string;\n  BedType: string;\n  BlindSpotMon: string;\n  BodyCabType: string;\n  BodyClass: string;\n  BrakeSystemDesc: string;\n  BrakeSystemType: string;\n  BusFloorConfigType: string;\n  BusLength: string;\n  BusType: string;\n  CAN_AACN: string;\n  CIB: string;\n  CashForClunkers: string;\n  ChargerLevel: string;\n  ChargerPowerKW: string;\n  CoolingType: string;\n  CurbWeightLB: string;\n  CustomMotorcycleType: string;\n  DaytimeRunningLight: string;\n  DestinationMarket: string;\n  DisplacementCC: string;\n  DisplacementCI: string;\n  DisplacementL: string;\n  Doors: string;\n  DriveType: string;\n  DriverAssist: string;\n  DynamicBrakeSupport: string;\n  EDR: string;\n  ESC: string;\n  EVDriveUnit: string;\n  ElectrificationLevel: string;\n  EngineConfiguration: string;\n  EngineCycles: string;\n  EngineCylinders: string;\n  EngineHP: string;\n  EngineHP_to: string;\n  EngineKW: string;\n  EngineManufacturer: string;\n  EngineModel: string;\n  EntertainmentSystem: string;\n  ErrorCode: string;\n  ErrorText: string;\n  ForwardCollisionWarning: string;\n  FuelInjectionType: string;\n  FuelTypePrimary: string;\n  FuelTypeSecondary: string;\n  GCWR: string;\n  GCWR_to: string;\n  GVWR: string;\n  GVWR_to: string;\n  KeylessIgnition: string;\n  LaneDepartureWarning: string;\n  LaneKeepSystem: string;\n  LowerBeamHeadlampLightSource: string;\n  Make: string;\n  Manufacturer: string;\n  ManufacturerId: string;\n  Model: string;\n  ModelYear: string;\n  MotorcycleChassisType: string;\n  MotorcycleSuspensionType: string;\n  NCSABodyType: string;\n  NCSAMake: string;\n  NCSAMapExcApprovedBy: string;\n  NCSAMapExcApprovedOn: string;\n  NCSAMappingException: string;\n  NCSAModel: string;\n  NCSANote: string;\n  Note: string;\n  OtherBusInfo: string;\n  OtherEngineInfo: string;\n  OtherMotorcycleInfo: string;\n  OtherRestraintSystemInfo: string;\n  OtherTrailerInfo: string;\n  ParkAssist: string;\n  PedestrianAutomaticEmergencyBraking: string;\n  PlantCity: string;\n  PlantCompanyName: string;\n  PlantCountry: string;\n  PlantState: string;\n  PossibleValues: string;\n  Pretensioner: string;\n  RearCrossTrafficAlert: string;\n  RearVisibilitySystem: string;\n  SAEAutomationLevel: string;\n  SAEAutomationLevel_to: string;\n  SeatBeltsAll: string;\n  SeatRows: string;\n  Seats: string;\n  SemiautomaticHeadlampBeamSwitching: string;\n  Series: string;\n  Series2: string;\n  SteeringLocation: string;\n  SuggestedVIN: string;\n  TPMS: string;\n  TopSpeedMPH: string;\n  TrackWidth: string;\n  TractionControl: string;\n  TrailerBodyType: string;\n  TrailerLength: string;\n  TrailerType: string;\n  TransmissionSpeeds: string;\n  TransmissionStyle: string;\n  Trim: string;\n  Trim2: string;\n  Turbo: string;\n  VIN: string;\n  ValveTrainDesign: string;\n  VehicleType: string;\n  WheelBaseLong: string;\n  WheelBaseShort: string;\n  WheelBaseType: string;\n  WheelSizeFront: string;\n  WheelSizeRear: string;\n  Wheels: string;\n  Windows: string;\n};\n\n/**\n * Type representing the complete response returned by the DecodeVinValuesExtended API Action.\n *\n * @memberof module:api/actions/DecodeVinValuesExtended\n * @alias DecodeVinValuesExtendedResponse\n */\nexport type DecodeVinValuesExtendedResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /**\n   * The search results returned by the NHSTA API request.\n   * Flat file format, single object containing keys and values of type string\n   * */\n  Results: Array<DecodeVinValuesExtendedResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/DecodeWMI\n * @category Actions\n * @description DecodeWMI NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [DecodeWMI](module-api_actions_DecodeWMI.DecodeWMI.html)\n * >\n * > **Types**\n * > - Type: [DecodeWMIResponse](#DecodeWMIResponse)\n * > - Type: [DecodeWMIResults](#DecodeWMIResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class DecodeWMI extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides information on the World Manufacturer Identifier for a specific WMI code.\n   * - `WMI` may be put in as either 3 characters representing VIN position 1-3 or 6 characters\n   *   representing VIN positions 1-3 & 12-14. Example \"JTD\", \"1T9131\".\n   *\n   * @async\n   * @param {string} WMI - World Manufacturer Identifier.\n   * @returns {(Promise<DecodeWMIResults>)} Api Response object.\n   */\n  async DecodeWMI(WMI: string): Promise<DecodeWMIResponse> {\n    const action = 'DecodeWMI';\n\n    /* Runtime typechecking */\n    const typeofWMI = getTypeof(WMI);\n    if (typeofWMI !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"WMI\" argument is required and must be of type string, got: ` +\n            `<${typeofWMI}> ${WMI}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${WMI}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link DecodeWMIResponse}.Results' array.\n *\n * @memberof module:api/actions/DecodeWMI\n * @alias DecodeWMIResults\n */\nexport type DecodeWMIResults = {\n  CommonName: string;\n  CreatedOn: string;\n  DateAvailableToPublic: string;\n  Make: string;\n  ManufacturerName: string;\n  ParentCompanyName: string;\n  URL: string;\n  UpdatedOn: string;\n  VehicleType: string;\n};\n\n/**\n * Type representing the complete response returned by the DecodeWMI API Action.\n *\n * @memberof module:api/actions/DecodeWMI\n * @alias DecodeWMIResponse\n */\nexport type DecodeWMIResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<DecodeWMIResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetAllMakes\n * @category Actions\n * @description GetAllMakes NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetAllMakes](module-api_actions_GetAllMakes.GetAllMakes.html)\n * >\n * > **Types**\n * > - Type: [GetAllMakesResponse](#GetAllMakesResponse)\n * > - Type: [GetAllMakesResults](#GetAllMakesResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetAllMakes extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of all the Makes available in the vPIC Dataset.\n   *\n   * @async\n   * @returns {(Promise<GetAllMakesResponse>)} Api Response object.\n   */\n  public async GetAllMakes(): Promise<GetAllMakesResponse> {\n    const action = 'GetAllMakes';\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetAllMakesResponse}.Results' array.\n *\n * @memberof module:api/actions/GetAllMakes\n * @alias GetAllMakesResults\n */\nexport type GetAllMakesResults = {\n  Make_ID: number;\n  Make_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetAllMakes API Action.\n *\n * @memberof module:api/actions/GetAllMakes\n * @alias GetAllMakesResponse\n */\nexport type GetAllMakesResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetAllMakesResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetAllManufacturers\n * @category Actions\n * @description GetAllManufacturers NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetAllManufacturers](module-api_actions_GetAllManufacturers.GetAllManufacturers.html)\n * >\n * > **Types**\n * > - Type: [GetAllManufacturersResponse](#GetAllManufacturersResponse)\n * > - Type: [GetAllManufacturersResults](#GetAllManufacturersResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetAllManufacturers extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of all the Manufacturers available in vPIC Dataset.\n   * - `params.manufacturerType` allows the user to filter the list based on manufacturer type,\n   *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\n   *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings).\n   * - You can get a list of all manufacturer types with the following API Action:\n   *   `GetVehicleVariableValuesList('manufacturer type')`\n   * - Results are provided in pages of 100 items.\n   * - Provide a number value for `params.page` to specify 1st (default), 2nd, 3rd, Nth, etc page.\n   *\n   * @async\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\n   * @param {string} [params.manufacturerType] - See method description.\n   * @param {number} [params.page] - Specify the page number (results returned 100 at a time).\n   * @returns {(Promise<module:api.ApiResponse>)} Api Response object.\n   */\n  async GetAllManufacturers(\n    params: {\n      manufacturerType?: string;\n      page?: number;\n    } = {}\n  ): Promise<GetAllManufacturersResponse> {\n    const action = 'GetAllManufacturers';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofManufacturerType = getTypeof(params.manufacturerType);\n    if (params.manufacturerType && typeofManufacturerType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.manufacturerType\" argument must be of type string, got: ` +\n            `<${typeofManufacturerType}> ${params.manufacturerType}`\n        )\n      );\n    }\n\n    const typeofPage = getTypeof(params.page);\n    if (params.page && typeofPage !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.page\" argument must be of type number, got: ` +\n            `<${typeofPage}> ${params.page}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetAllManufacturersResponse}.Results' array.\n *\n * @memberof module:api/actions/GetAllManufacturers\n * @alias GetAllManufacturersResults\n */\nexport type GetAllManufacturersResults = {\n  Country: string;\n  Mfr_CommonName: string;\n  Mfr_ID: number;\n  Mfr_Name: string;\n  VehicleTypes: Array<{ isPrimary?: boolean; name?: string }>;\n};\n\n/**\n * Type representing the complete response returned by the GetAllManufacturers API Action.\n *\n * @memberof module:api/actions/GetAllManufacturers\n * @alias GetAllManufacturersResponse\n */\nexport type GetAllManufacturersResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetAllManufacturersResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetCanadianVehicleSpecifications\n * @category Actions\n * @description GetCanadianVehicleSpecifications NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetCanadianVehicleSpecifications](module-api_actions_GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications.html)\n * >\n * > **Types**\n * > - Type: [GetCanadianVehicleSpecificationsResponse](#GetCanadianVehicleSpecificationsResponse)\n * > - Type: [GetCanadianVehicleSpecificationsResults](#GetCanadianVehicleSpecificationsResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetCanadianVehicleSpecifications extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\n   * used primarily in collision investigation and reconstruction, combined with a search engine.\n   *\n   * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\n   * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\n   * page for more details.\n   *\n   * This API action will return a 404 html error if any of the query parameters in params\n   * are missing from the query string. This is the only API action with this behaviour. Therefore,\n   * parameters are inserted into the query string as empty strings if not provided by the user.\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle (required) - Number, >= 1971.\n   * @param {string} [params.make] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\n   * @param {string} [params.model] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\n   * @param {string} [params.units] - \"Metric\" (default), or \"US\" for United States customary units.\n   * @returns {(Promise<GetCanadianVehicleSpecificationsResponse>)} Api Response object.\n   */\n  async GetCanadianVehicleSpecifications(params: {\n    year: number;\n    make?: string;\n    model?: string;\n    units?: string;\n  }): Promise<GetCanadianVehicleSpecificationsResponse> {\n    const action = 'GetCanadianVehicleSpecifications';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    const typeofMake = getTypeof(params.make);\n    if (params.make && typeofMake !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.make\" argument must be of type string, got: ` +\n            `<${typeofMake}> ${params.make}`\n        )\n      );\n    }\n\n    const typeofModel = getTypeof(params.model);\n    if (params.model && typeofModel !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.model\" argument must be of type string, got: ` +\n            `<${typeofModel}> ${params.model}`\n        )\n      );\n    }\n\n    const typeofUnits = getTypeof(params.units);\n    if (params.units && typeofUnits !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.units\" argument must be of type string, got: ` +\n            `<${typeofUnits}> ${params.units}`\n        )\n      );\n    }\n\n    /* Set default query parameters to empty strings if not provided by the user */\n    const make = params.make || '';\n    const model = params.model || '';\n    const units = params.units || '';\n\n    const params_ = {\n      year: params.year,\n      make,\n      model,\n      units,\n    };\n\n    /*\n     * Build the 'default' query string to be appended to the URL.\n     *\n     * Additionally, sets the allowEmptyStringValues option (2nd argument) to true because\n     * this API action will return a 404 error if any of the query parameters are missing from the query string.\n     * This is the only API action with this behaviour (\"year\" is the only param the user must provide).\n     */\n    const queryString = await this.buildQueryString(\n      params_,\n      true\n    ).catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetCanadianVehicleSpecificationsResponse}.Results' array.\n *\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\n * @alias GetCanadianVehicleSpecificationsResults\n */\nexport type GetCanadianVehicleSpecificationsResults = {\n  Specs: Array<{\n    Name: string;\n    Value: string;\n  }>;\n};\n\n/**\n * Type representing the complete response returned by the GetCanadianVehicleSpecifications API Action.\n *\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\n * @alias GetCanadianVehicleSpecificationsResponse\n */\nexport type GetCanadianVehicleSpecificationsResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetCanadianVehicleSpecificationsResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetEquipmentPlantCodes\n * @category Actions\n * @description GetEquipmentPlantCodes NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetEquipmentPlantCodes](module-api_actions_GetEquipmentPlantCodes.GetEquipmentPlantCodes.html)\n * >\n * > **Types**\n * > - Type: [GetEquipmentPlantCodesResponse](#GetEquipmentPlantCodesResponse)\n * > - Type: [GetEquipmentPlantCodesResults](#GetEquipmentPlantCodesResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetEquipmentPlantCodes extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * Returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\n   *\n   * `params.year`:\n   *  - Only years >= 2016 are supported\n   *\n   * `params.equipmentType`:\n   *  - 1 (Tires)\n   *  - 3 (Brake Hoses)\n   *  - 13 (Glazing)\n   *  - 16 (Retread)\n   *\n   * `params.reportType`:\n   *  - 'New' (The Equipment Plant Code was assigned during the selected year).\n   *  - 'Updated' (The Equipment Plant data was modified during the selected year).\n   *  - 'Closed' (The Equipment Plant is no longer Active).\n   *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed)).\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\n   * @param {number} params.equipmentType - Number equal to 1, 3, 13, or 16.\n   * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All'.\n   * @returns {(Promise<GetEquipmentPlantCodesResponse>)} Api Response object.\n   */\n  public async GetEquipmentPlantCodes(params: {\n    year: number;\n    equipmentType: 1 | 3 | 13 | 16;\n    reportType: 'New' | 'Updated' | 'Closed' | 'All';\n  }): Promise<GetEquipmentPlantCodesResponse> {\n    const action = 'GetEquipmentPlantCodes';\n\n    /* Runtime typechecking */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    const typeofEquipmentType = getTypeof(params.equipmentType);\n    if (typeofEquipmentType !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.equipmentType\" argument is required and must be of type number, got: ` +\n            `<${typeofEquipmentType}> ${params.equipmentType}`\n        )\n      );\n    }\n\n    const typeofReportType = getTypeof(params.reportType);\n    if (typeofReportType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.reportType\" argument is required and must be of type string, got: ` +\n            `<${typeofReportType}> ${params.reportType}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetEquipmentPlantCodesResponse}.Results' array.\n *\n * @memberof module:api/actions/GetEquipmentPlantCodes\n * @alias GetEquipmentPlantCodesResults\n */\nexport type GetEquipmentPlantCodesResults = {\n  Address: string;\n  City: string;\n  Country: string;\n  DOTCode: string;\n  Name: string;\n  OldDotCode: string;\n  PostalCode: string;\n  StateProvince: string;\n  Status: string;\n};\n\n/**\n * Type representing the complete response returned by the GetEquipmentPlantCodes API Action.\n *\n * @memberof module:api/actions/GetEquipmentPlantCodes\n * @alias GetEquipmentPlantCodesResponse\n */\nexport type GetEquipmentPlantCodesResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetEquipmentPlantCodesResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetMakeForManufacturer\n * @category Actions\n * @description GetMakeForManufacturer NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetMakeForManufacturer](module-api_actions_GetMakeForManufacturer.GetMakeForManufacturer.html)\n * >\n * > **Types**\n * > - Type: [GetMakeForManufacturerResponse](#GetMakeForManufacturerResponse)\n * > - Type: [GetMakeForManufacturerResults](#GetMakeForManufacturerResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetMakeForManufacturer extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer that is requested.\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\n   *   (it accepts a partial manufacturer name as an input).\n   * - `manufacturer` name can be a partial name, or a full name for more specificity\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\n   * - Multiple results are returned in case of multiple matches.\n   *\n   * @async\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\n   * @returns {(Promise<GetMakeForManufacturer>)} Api Response object.\n   */\n  async GetMakeForManufacturer(\n    manufacturer: string | number\n  ): Promise<GetMakeForManufacturerResponse> {\n    const action = 'GetMakeForManufacturer';\n\n    /* Runtime typechecking */\n    const typeofManufacturer = getTypeof(manufacturer);\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\n            `<${typeofManufacturer}> ${manufacturer}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetMakeForManufacturerResponse}.Results' array.\n *\n * @memberof module:api/actions/GetMakeForManufacturer\n * @alias GetMakeForManufacturerResults\n */\nexport type GetMakeForManufacturerResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Mfr_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetMakeForManufacturer API Action.\n *\n * @memberof module:api/actions/GetMakeForManufacturer\n * @alias GetMakeForManufacturerResponse\n */\nexport type GetMakeForManufacturerResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetMakeForManufacturerResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetMakesForManufacturerAndYear\n * @category Actions\n * @description GetMakesForManufacturerAndYear NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetMakesForManufacturerAndYear](module-api_actions_GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear.html)\n * >\n * > **Types**\n * > - Type: [GetMakesForManufacturerAndYearResponse](#GetMakesForManufacturerAndYearResponse)\n * > - Type: [GetMakesForManufacturerAndYearResults](#GetMakesForManufacturerAndYearResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetMakesForManufacturerAndYear extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer,\n   * and whose Year From and Year To range cover the specified year.\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\n   *   (it accepts a partial manufacturer name as an input).\n   * - Multiple results are returned in case of multiple matches.\n   * - Manufacturer can be idenfitied by Id, a partial name, or a full name\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\n   *\n   * @async\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\n   *\n   * @returns {(Promise<GetMakesForManufacturerAndYearResponse>)} Api Response object.\n   */\n  public async GetMakesForManufacturerAndYear(\n    manufacturer: string | number,\n    params: {\n      year: number;\n    }\n  ): Promise<GetMakesForManufacturerAndYearResponse> {\n    const action = 'GetMakesForManufacturerAndYear';\n\n    /* Runtime typechecking */\n    const typeofManufacturer = getTypeof(manufacturer);\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\n            `<${typeofManufacturer}> ${manufacturer}`\n        )\n      );\n    }\n\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument is required and must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    const typeofYear = getTypeof(params.year);\n    if (typeofYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\n            `<${typeofYear}> ${params.year}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetMakesForManufacturerAndYearResponse}.Results' array.\n *\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\n * @alias GetMakesForManufacturerAndYearResults\n */\nexport type GetMakesForManufacturerAndYearResults = {\n  MakeId: number;\n  MakeName: string;\n  MfrId: number;\n  MfrName: string;\n};\n\n/**\n * Type representing the complete response returned by the GetMakesForManufacturerAndYear API Action.\n *\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\n * @alias GetMakesForManufacturerAndYearResponse\n */\nexport type GetMakesForManufacturerAndYearResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetMakesForManufacturerAndYearResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetMakesForVehicleType\n * @category Actions\n * @description GetMakesForVehicleType NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetMakesForVehicleType](module-api_actions_GetMakesForVehicleType.GetMakesForVehicleType.html)\n * >\n * > **Types**\n * > - Type: [GetMakesForVehicleTypeResponse](#GetMakesForVehicleTypeResponse)\n * > - Type: [GetMakesForVehicleTypeResults](#GetMakesForVehicleTypeResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetMakesForVehicleType extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Makes in the vPIC dataset for a specified vehicle type (`typeName`),\n   * whose name is LIKE the vehicle type name in vPIC Dataset.\n   * - Vehicle `typeName` can be a partial name, or a full name for more specificity\n   *   (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\n   *\n   * @async\n   * @param {string} typeName - A partial or full vehicle type name.\n   * @returns {(Promise<GetMakesForVehicleTypeResponse>)} Api Response object.\n   */\n  async GetMakesForVehicleType(\n    typeName: string\n  ): Promise<GetMakesForVehicleTypeResponse> {\n    const action = 'GetMakesForVehicleType';\n\n    /* Runtime typechecking */\n    const typeofTypeName = getTypeof(typeName);\n    if (typeofTypeName !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"typeName\" argument is required and must be of type string, got: ` +\n            `<${typeofTypeName}> ${typeName}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${typeName}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetMakesForVehicleTypeResponse}.Results' array.\n *\n * @memberof module:api/actions/GetMakesForVehicleType\n * @alias GetMakesForVehicleTypeResults\n */\nexport type GetMakesForVehicleTypeResults = {\n  MakeId: number;\n  MakeName: string;\n  VehicleTypeId: number;\n  VehicleTypeName: string;\n};\n\n/**\n * Type representing the complete response returned by the GetMakesForVehicleType API Action.\n *\n * @memberof module:api/actions/GetMakesForVehicleType\n * @alias GetMakesForVehicleTypeResponse\n */\nexport type GetMakesForVehicleTypeResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetMakesForVehicleTypeResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetManufacturerDetails\n * @category Actions\n * @description GetManufacturerDetails NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetManufacturerDetails](module-api_actions_GetManufacturerDetails.GetManufacturerDetails.html)\n * >\n * > **Types**\n * > - Type: [GetManufacturerDetailsResponse](#GetManufacturerDetailsResponse)\n * > - Type: [GetManufacturerDetailsResults](#GetManufacturerDetailsResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetManufacturerDetails extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides the details for a specific manufacturer that is requested.\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name,\n   *   (it accepts a partial manufacturer name as an input).\n   * - Multiple results are returned in case of multiple matches.\n   *\n   * @async\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\n   * @returns {(Promise<GetManufacturerDetailsResponse>)} Api Response object.\n   */\n  public async GetManufacturerDetails(\n    manufacturer: string | number\n  ): Promise<GetManufacturerDetailsResponse> {\n    const action = 'GetManufacturerDetails';\n\n    /* Runtime typechecking */\n    const typeofManufacturer = getTypeof(manufacturer);\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\n            `<${typeofManufacturer}> ${manufacturer}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetManufacturerDetailsResponse}.Results' array.\n *\n * @memberof module:api/actions/GetManufacturerDetails\n * @alias GetManufacturerDetailsResults\n */\nexport type GetManufacturerDetailsResults = {\n  Address: string;\n  Address2: string;\n  City: string;\n  ContactEmail: string;\n  ContactFax: string;\n  ContactPhone: string;\n  Country: string;\n  DBAs: string;\n  EquipmentItems: Array<Record<string, unknown>>;\n  LastUpdated: string;\n  ManufacturerTypes: Array<{\n    Name: string;\n  }>;\n  Mfr_CommonName: string;\n  Mfr_ID: number;\n  Mfr_Name: string;\n  OtherManufacturerDetails: string;\n  PostalCode: string;\n  PrimaryProduct: string;\n  PrincipalFirstName: string;\n  PrincipalLastName: string;\n  PrincipalPosition: string;\n  StateProvince: string;\n  SubmittedName: string;\n  SubmittedOn: string;\n  SubmittedPosition: string;\n  VehicleTypes: Array<{\n    GVWRFrom: string;\n    GVWRTo: string;\n    IsPrimary: boolean;\n    Name: string;\n  }>;\n};\n\n/**\n * Type representing the complete response returned by the GetManufacturerDetails API Action.\n *\n * @memberof module:api/actions/GetManufacturerDetails\n * @alias GetManufacturerDetailsResponse\n */\nexport type GetManufacturerDetailsResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetManufacturerDetailsResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetModelsForMake\n * @category Actions\n * @description GetModelsForMake NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetModelsForMake](module-api_actions_GetModelsForMake.GetModelsForMake.html)\n * >\n * > **Types**\n * > - Type: [GetModelsForMakeResponse](#GetModelsForMakeResponse)\n * > - Type: [GetModelsForMakeResults](#GetModelsForMakeResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetModelsForMake extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns the Models in the vPIC dataset for a specified `makeName`\n   * whose Name is LIKE the Make in vPIC Dataset.\n   * - `makeName` can be a partial, or a full for more specificity\n   *   (e.g., \"Harley\", \"Harley Davidson\", etc.).\n   *\n   * @async\n   * @param {string} makeName - Vehicle make name.\n   * @returns {(Promise<GetModelsForMakeResponse>)} Api Response object.\n   */\n  async GetModelsForMake(makeName: string): Promise<GetModelsForMakeResponse> {\n    const action = 'GetModelsForMake';\n\n    /* Runtime typechecking */\n    const typeofMakeName = getTypeof(makeName);\n    if (typeofMakeName !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\n            `<${typeofMakeName}> ${makeName}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetModelsForMakeResponse}.Results' array.\n *\n * @memberof module:api/actions/GetModelsForMake\n * @alias GetModelsForMakeResults\n */\nexport type GetModelsForMakeResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Model_ID: number;\n  Model_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetModelsForMake API Action.\n *\n * @memberof module:api/actions/GetModelsForMake\n * @alias GetModelsForMakeResponse\n */\nexport type GetModelsForMakeResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetModelsForMakeResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetModelsForMakeId\n * @category Actions\n * @description GetModelsForMakeId NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetModelsForMakeId](module-api_actions_GetModelsForMakeId.GetModelsForMakeId.html)\n * >\n * > **Types**\n * > - Type: [GetModelsForMakeIdResponse](#GetModelsForMakeIdResponse)\n * > - Type: [GetModelsForMakeIdResults](#GetModelsForMakeIdResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetModelsForMakeId extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns the Models in the vPIC dataset for a specified Make\n   * whose Id is equal to the `makeId` in the vPIC Dataset.\n   *\n   * @async\n   * @param {number} makeID - Vehicle make ID (number).\n   * @returns {(Promise<GetModelsForMakeIdResponse>)} Api Response object.\n   */\n  async GetModelsForMakeId(\n    makeID: number\n  ): Promise<GetModelsForMakeIdResponse> {\n    const action = 'GetModelsForMakeId';\n\n    /* Runtime typechecking */\n    const typeofMakeId = getTypeof(makeID);\n    if (typeofMakeId !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\n            `<${typeofMakeId}> ${makeID}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString({}).catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdResponse}.Results' array.\n *\n * @memberof module:api/actions/GetModelsForMakeId\n * @alias GetModelsForMakeIdResults\n */\nexport type GetModelsForMakeIdResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Model_ID: number;\n  Model_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetModelsForMakeId API Action.\n *\n * @memberof module:api/actions/GetModelsForMakeId\n * @alias GetModelsForMakeIdResponse\n */\nexport type GetModelsForMakeIdResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetModelsForMakeIdResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetModelsForMakeIdYear\n * @category Actions\n * @description GetModelsForMakeIdYear NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetModelsForMakeIdYear](module-api_actions_GetModelsForMakeIdYear.GetModelsForMakeIdYear.html)\n * >\n * > **Types**\n * > - Type: [GetModelsForMakeIdYearResponse](#GetModelsForMakeIdYearResponse)\n * > - Type: [GetModelsForMakeIdYearResults](#GetModelsForMakeIdYearResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetModelsForMakeIdYear extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns the Models in the vPIC dataset for a specified Model Year\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\n   *   - `params.makeId` is a number and is a required query parameter.\n   *\n   * A minimum of one of the following are required (or a combination of both):\n   *   - `params.modelYear` is a number (greater than 1995)\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\n   *\n   * @async\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {number} params.makeId - Make ID to search.\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\n   * @returns {(Promise<GetModelsForMakeIdYearResponse>)} Api Response object.\n   */\n  async GetModelsForMakeIdYear(params: {\n    makeId: number;\n    modelYear?: number;\n    vehicleType?: string;\n  }): Promise<GetModelsForMakeIdYearResponse> {\n    const action = 'GetModelsForMakeIdYear';\n\n    const makeId: number = params?.makeId;\n    const modelYear: number | undefined = params?.modelYear;\n    const vehicleType: string | undefined = params?.vehicleType;\n\n    /* Valid params object */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n    /* Required makeId param of type number */\n    const typeofMakeId = getTypeof(makeId);\n    if (typeofMakeId !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.makeId\" argument is required and must be of type number, got: ` +\n            `<${typeofMakeId}> ${makeId}`\n        )\n      );\n    }\n    /* At least one of modelYear or vehicleType params is required */\n    if (!modelYear && !vehicleType) {\n      return Promise.reject(\n        new Error(\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\n            `${modelYear} | ${vehicleType}`\n        )\n      );\n    }\n    /* valid modelYear param of type number */\n    const typeofModelYear = getTypeof(modelYear);\n    if (modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\n            `<${typeofModelYear}> ${modelYear}`\n        )\n      );\n    }\n    /* valid vehicleType param of type string */\n    const typeofVehicleType = getTypeof(vehicleType);\n    if (vehicleType && typeofVehicleType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\n            `<${typeofVehicleType}> ${vehicleType}`\n        )\n      );\n    }\n\n    /* Beginning of the the actionUrl */\n    let actionUrl = `${action}/makeId/${makeId}/`;\n\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\n    if (modelYear && vehicleType) {\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\n    } else if (modelYear) {\n      actionUrl += `modelYear/${modelYear}`;\n    } else {\n      actionUrl += `vehicleType/${vehicleType}`;\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdYearResponse}.Results' array.\n *\n * @memberof module:api/actions/GetModelsForMakeIdYear\n * @alias GetModelsForMakeIdYearResults\n */\nexport type GetModelsForMakeIdYearResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Model_ID: number;\n  Model_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetModelsForMakeIdYear API Action.\n *\n * @memberof module:api/actions/GetModelsForMakeIdYear\n * @alias GetModelsForMakeIdYearResponse\n */\nexport type GetModelsForMakeIdYearResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetModelsForMakeIdYearResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetModelsForMakeYear\n * @category Actions\n * @description GetModelsForMakeYear NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetModelsForMakeYear](module-api_actions_GetModelsForMakeYear.GetModelsForMakeYear.html)\n * >\n * > **Types**\n * > - Type: [GetModelsForMakeYearResponse](#GetModelsForMakeYearResponse)\n * > - Type: [GetModelsForMakeYearResults](#GetModelsForMakeYearResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetModelsForMakeYear extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns the Models in the vPIC dataset for a specified Model Year\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\n   *   - `params.make` is required. It can be a partial, or a full name for more specificity\n   *     (e.g., \"Harley\", \"Harley Davidson\", etc.).\n   *\n   * A minimum of one of the following are required (or a combination of both):\n   *   - `params.modelYear` is a number (greater than 1995)\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\n   *\n   * @async\n   *\n   * @param {object} params - Query Search Parameters to append to the URL.\n   * @param {string} params.make - Make name to search.\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\n   *\n   * @returns {(Promise<GetModelsForMakeYearResponse>)} Api Response object.\n   */\n  async GetModelsForMakeYear(params: {\n    make: string;\n    modelYear?: number;\n    vehicleType?: string;\n  }): Promise<GetModelsForMakeYearResponse> {\n    const action = 'GetModelsForMakeYear';\n\n    const make: string = params?.make;\n    const modelYear: number | undefined = params?.modelYear;\n    const vehicleType: string | undefined = params?.vehicleType;\n\n    /* Valid params object */\n    const typeofParams = getTypeof(params);\n    if (typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: ` +\n            `<${typeofParams}> ${params}`\n        )\n      );\n    }\n    /* Required make param of type string */\n    const typeofMake = getTypeof(make);\n    if (typeofMake !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.make\" argument is required and must be of type string, got: ` +\n            `<${typeofMake}> ${make}`\n        )\n      );\n    }\n    /* At least one of modelYear or vehicleType params is required */\n    if (!modelYear && !vehicleType) {\n      return Promise.reject(\n        new Error(\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\n            `${modelYear} | ${vehicleType}`\n        )\n      );\n    }\n    /* valid modelYear param of type number */\n    const typeofModelYear = getTypeof(modelYear);\n    if (modelYear && typeofModelYear !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\n            `<${typeofModelYear}> ${modelYear}`\n        )\n      );\n    }\n    /* valid vehicleType param of type string */\n    const typeofVehicleType = getTypeof(vehicleType);\n    if (vehicleType && typeofVehicleType !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\n            `<${typeofVehicleType}> ${vehicleType}`\n        )\n      );\n    }\n\n    /* Beginning of the the actionUrl */\n    let actionUrl = `${action}/make/${params.make}/`;\n\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\n    if (modelYear && vehicleType) {\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\n    } else if (modelYear) {\n      actionUrl += `modelYear/${modelYear}`;\n    } else {\n      actionUrl += `vehicleType/${vehicleType}`;\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err: Error) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err: Error) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetModelsForMakeYearResponse}.Results' array.\n *\n * @memberof module:api/actions/GetModelsForMakeYear\n * @alias GetModelsForMakeYearResults\n */\nexport type GetModelsForMakeYearResults = {\n  Make_ID: number;\n  Make_Name: string;\n  Model_ID: number;\n  Model_Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetModelsForMakeYear API Action.\n *\n * @memberof module:api/actions/GetModelsForMakeYear\n * @alias GetModelsForMakeYearResponse\n */\nexport type GetModelsForMakeYearResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetModelsForMakeYearResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetParts\n * @category Actions\n * @description GetParts NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetParts](module-api_actions_GetParts.GetParts.html)\n * >\n * > **Types**\n * > - Type: [GetPartsResponse](#GetPartsResponse)\n * > - Type: [GetPartsResults](#GetPartsResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetParts extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of ORGs with letter date in the given range of the dates\n   * and with specified Type (`params.type`) of ORG.\n   * - Up to 1000 results will be returned at a time.\n   * - Get the next page by incrementing the `params.page` query parameter.\n   * - All query `params` are optional.\n   *\n   * @async\n   * @param {object} [params] - Query Search Parameters to append to the URL.\n   * @param {number} [params.type] - Specified type of ORG to search.\n   * @param {string} [params.fromDate] - Start date of search query.\n   * @param {string} [params.toDate] - End date of search query.\n   * @param {number} [params.page] - Which page number of results to request (100 results per page).\n   * @returns {(Promise<GetPartsResponse>)} Api Response object.\n   */\n  async GetParts(params?: {\n    type?: number;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n  }): Promise<GetPartsResponse> {\n    const action = 'GetParts';\n\n    const type: number | undefined = params?.type;\n    const fromDate: string | undefined = params?.fromDate;\n    const toDate: string | undefined = params?.toDate;\n    const page: number | undefined = params?.page;\n\n    /* Valid params object */\n    const typeofParams = getTypeof(params);\n    if (params && typeofParams !== 'object') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params\" argument must be of type object, got: <${typeofParams}> ${params}`\n        )\n      );\n    }\n\n    /* valid params.type of type number */\n    const typeofType = getTypeof(type);\n    if (type && typeofType !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.type\" argument must be of type number, got: <${typeofType}> ${type}`\n        )\n      );\n    }\n\n    /* valid params.fromDate of type string */\n    const typeofFromDate = getTypeof(fromDate);\n    if (fromDate && typeofFromDate !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.fromDate\" argument must be of type string, got: <${typeofFromDate}> ${fromDate}`\n        )\n      );\n    }\n\n    /* valid params.toDate of type number */\n    const typeofToDate = getTypeof(toDate);\n    if (toDate && typeofToDate !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.toDate\" argument must be of type string, got: <${typeofToDate}> ${toDate}`\n        )\n      );\n    }\n\n    /* valid params.page of type number */\n    const typeofPage = getTypeof(page);\n    if (page && typeofPage !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"params.page\" argument must be of type number, got: <${typeofPage}> ${page}`\n        )\n      );\n    }\n\n    /* Build the query string to be appended to the URL*/\n    const queryString = await this.buildQueryString(params).catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetPartsResponse}.Results' array.\n *\n * @memberof module:api/actions/GetParts\n * @alias GetPartsResults\n */\nexport type GetPartsResults = {\n  CoverLetterURL: string;\n  LetterDate: string;\n  ManufacturerId: number;\n  ManufacturerName: string;\n  ModelYearFrom: string;\n  ModelYearTo: string;\n  Name: string;\n  Type: string;\n  URL: string;\n};\n\n/**\n * Type representing the complete response returned by the GetParts API Action.\n *\n * @memberof module:api/actions/GetParts\n * @alias GetPartsResponse\n */\nexport type GetPartsResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetPartsResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetVehicleTypesForMake\n * @category Actions\n * @description GetVehicleTypesForMake NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetVehicleTypesForMake](module-api_actions_GetVehicleTypesForMake.GetVehicleTypesForMake.html)\n * >\n * > **Types**\n * > - Type: [GetVehicleTypesForMakeResponse](#GetVehicleTypesForMakeResponse)\n * > - Type: [GetVehicleTypesForMakeResults](#GetVehicleTypesForMakeResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetVehicleTypesForMake extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make,\n   * whose name is LIKE the make name in the vPIC Dataset.\n   * - `makeName` can be a partial name, or a full name for more specificity\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\n   *\n   * @async\n   * @param {string} makeName - Name of the vehicle make to search.\n   * @returns {(Promise<GetVehicleTypesForMakeResponse>)} Api Response object.\n   */\n  async GetVehicleTypesForMake(\n    makeName: string\n  ): Promise<GetVehicleTypesForMakeResponse> {\n    const action = 'GetVehicleTypesForMake';\n\n    /* Runtime typechecking */\n    const typeofMakeName = getTypeof(makeName);\n    if (typeofMakeName !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\n            `<${typeofMakeName}> ${makeName}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeResponse}.Results' array.\n *\n * @memberof module:api/actions/GetVehicleTypesForMake\n * @alias GetVehicleTypesForMakeResults\n */\nexport type GetVehicleTypesForMakeResults = {\n  MakeId: number;\n  MakeName: string;\n  VehicleTypeId: number;\n  VehicleTypeName: string;\n};\n\n/**\n * Type representing the complete response returned by the GetVehicleTypesForMake API Action.\n *\n * @memberof module:api/actions/GetVehicleTypesForMake\n * @alias GetVehicleTypesForMakeResponse\n */\nexport type GetVehicleTypesForMakeResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetVehicleTypesForMakeResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetVehicleTypesForMakeId\n * @category Actions\n * @description GetVehicleTypesForMakeId NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetVehicleTypesForMakeId](module-api_actions_GetVehicleTypesForMakeId.GetVehicleTypesForMakeId.html)\n * >\n * > **Types**\n * > - Type: [GetVehicleTypesForMakeIdResponse](#GetVehicleTypesForMakeIdResponse)\n * > - Type: [GetVehicleTypesForMakeIdResults](#GetVehicleTypesForMakeIdResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetVehicleTypesForMakeId extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make and\n   * whose ID equals the make ID in the vPIC Dataset.\n   *\n   * @async\n   * @param {number} makeID - Vehicle make ID.\n   * @returns {(Promise<GetVehicleTypesForMakeIdResponse>)} Api Response object.\n   */\n  async GetVehicleTypesForMakeId(\n    makeID: number\n  ): Promise<GetVehicleTypesForMakeIdResponse> {\n    const action = 'GetVehicleTypesForMakeId';\n\n    /* Runtime typechecking */\n    const typeofMakeId = getTypeof(makeID);\n    if (typeofMakeId !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\n            `<${typeofMakeId}> ${makeID}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeIdResponse}.Results' array.\n *\n * @memberof module:api/actions/GetVehicleTypesForMakeId\n * @alias GetVehicleTypesForMakeIdResults\n */\nexport type GetVehicleTypesForMakeIdResults = {\n  MakeId: number;\n  MakeName: string;\n  VehicleTypeId: number;\n  VehicleTypeName: string;\n};\n\n/**\n * Type representing the complete response returned by the GetVehicleTypesForMakeId API Action.\n *\n * @memberof module:api/actions/GetVehicleTypesForMakeId\n * @alias GetVehicleTypesForMakeIdResponse\n */\nexport type GetVehicleTypesForMakeIdResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetVehicleTypesForMakeIdResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetVehicleVariableList\n * @category Actions\n * @description GetVehicleVariableList NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetVehicleVariableList](module-api_actions_GetVehicleVariableList.GetVehicleVariableList.html)\n * >\n * > **Types**\n * > - Type: [GetVehicleVariableListResponse](#GetVehicleVariableListResponse)\n * > - Type: [GetVehicleVariableListResults](#GetVehicleVariableListResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetVehicleVariableList extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of all the Vehicle related variables that are in the vPIC dataset.\n   * - Information on the name, description and the type of the variable is provided.\n   *\n   * @async\n   * @returns {(Promise<GetVehicleVariableListResponse>)} Api Response object.\n   */\n  public async GetVehicleVariableList(): Promise<GetVehicleVariableListResponse> {\n    const action = 'GetVehicleVariableList';\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetVehicleVariableListResponse}.Results' array.\n *\n * @memberof module:api/actions/GetVehicleVariableList\n * @alias GetVehicleVariableListResults\n */\nexport type GetVehicleVariableListResults = {\n  DataType: string;\n  Description: string;\n  ID: number;\n  Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetVehicleVariableList API Action.\n *\n * @memberof module:api/actions/GetVehicleVariableList\n * @alias GetVehicleVariableListResponse\n */\nexport type GetVehicleVariableListResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetVehicleVariableListResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetVehicleVariableValuesList\n * @category Actions\n * @description GetVehicleVariableValuesList NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetVehicleVariableValuesList](module-api_actions_GetVehicleVariableValuesList.GetVehicleVariableValuesList.html)\n * >\n * > **Types**\n * > - Type: [GetVehicleVariableValuesListResponse](#GetVehicleVariableValuesListResponse)\n * > - Type: [GetVehicleVariableValuesListResults](#GetVehicleVariableValuesListResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetVehicleVariableValuesList extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * This provides a list of all the accepted values for a given variable that are stored in the vPIC dataset.\n   *\n   * This applies to only \"Look up\" type of variables.\n   * - `variableValue` can either be a:\n   *   - Variable Name (\"battery type\" in first example, please use full name, not just part of it),\n   *   - or Variable ID (number).\n   *\n   * @async\n   * @param {string|number} variableValue - The variable you want to get a values list of.\n   * @returns {(Promise<GetVehicleVariableValuesListResponse>)} Api Response object.\n   */\n  async GetVehicleVariableValuesList(\n    variableValue: string | number\n  ): Promise<GetVehicleVariableValuesListResponse> {\n    const action = 'GetVehicleVariableValuesList';\n\n    /* Runtime typechecking */\n    const typeofVariableValue = getTypeof(variableValue);\n    if (typeofVariableValue !== 'string' && typeofVariableValue !== 'number') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"variableValue\" argument is required and must be of type string or number, got: ` +\n            `<${typeofVariableValue}> ${variableValue}`\n        )\n      );\n    }\n    /* Encode to a valid URI string (space chars, etc.) if variableValue is a string*/\n    if (typeofVariableValue === 'string') {\n      variableValue = encodeURI(variableValue as string);\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${variableValue}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetVehicleVariableValuesListResponse}.Results' array.\n *\n * @memberof module:api/actions/GetVehicleVariableValuesList\n * @alias GetVehicleVariableValuesListResults\n */\nexport type GetVehicleVariableValuesListResults = {\n  ElementName: string;\n  Id: number;\n  Name: string;\n};\n\n/**\n * Type representing the complete response returned by the GetVehicleVariableValuesList API Action.\n *\n * @memberof module:api/actions/GetVehicleVariableValuesList\n * @alias GetVehicleVariableValuesListResponse\n */\nexport type GetVehicleVariableValuesListResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetVehicleVariableValuesListResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/actions/GetWMIsForManufacturer\n * @category Actions\n * @description GetWMIsForManufacturer NHSTA Api Action.\n *\n * > **Module Exports**:\n * > - Class: [GetWMIsForManufacturer](module-api_actions_GetWMIsForManufacturer.GetWMIsForManufacturer.html)\n * >\n * > **Types**\n * > - Type: [GetWMIsForManufacturerResponse](#GetWMIsForManufacturerResponse)\n * > - Type: [GetWMIsForManufacturerResults](#GetWMIsForManufacturerResults)\n *\n */\n\n/* Parent Class and Fetch Types */\nimport {\n  Fetch /* Class */,\n  FetchConfig /* Type */,\n  FetchResponse /* Type */,\n} from '../Fetch';\n\n/* Utility Functions */\nimport { getTypeof } from '../../utils';\n\n/**\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\n *\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\n *\n * @category Actions\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\n */\nexport class GetWMIsForManufacturer extends Fetch {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n\n  /**\n   * Provides information on the World Manufacturer Identifier (WMI) for a specified `manufacturer`.\n   * - Only WMIs registered in vPICList are displayed.\n   * - `manufacturer` can be a partial name, or a full name for more specificity\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\n   *\n   * @async\n   * @param {string|number} manufacturer - Manufacturer Name.\n   * @returns {(Promise<GetWMIsForManufacturerResponse>)} Api Response object.\n   */\n  async GetWMIsForManufacturer(\n    manufacturer: string\n  ): Promise<GetWMIsForManufacturerResponse> {\n    const action = 'GetWMIsForManufacturer';\n\n    /* Runtime typechecking */\n    const typeofManufacturer = getTypeof(manufacturer);\n    if (typeofManufacturer !== 'string') {\n      return Promise.reject(\n        new Error(\n          `${action}, \"manufacturer\" argument is required and must be of type string, got: ` +\n            `<${typeofManufacturer}> ${manufacturer}`\n        )\n      );\n    }\n\n    /* Build the 'default' query string to be appended to the URL*/\n    const queryString = await this.buildQueryString().catch((err) =>\n      Promise.reject(\n        new Error(`${action}, Error building query string: ${err}`)\n      )\n    );\n\n    /* Build the final request URL*/\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\n\n    /* Return the result */\n    return await this.get(url)\n      .then((response) => response)\n      .catch((err) =>\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\n      );\n  }\n}\n\n/**\n * Type representing the structure of objects found in the '{@link GetWMIsForManufacturerResponse}.Results' array.\n *\n * @memberof module:api/actions/GetWMIsForManufacturer\n * @alias GetWMIsForManufacturerResults\n */\nexport type GetWMIsForManufacturerResults = {\n  Country: string;\n  CreatedOn: string;\n  DateAvailableToPublic: string;\n  Id: number;\n  Name: string;\n  UpdatedOn: string;\n  VehicleType: string;\n  WMI: string;\n};\n\n/**\n * Type representing the complete response returned by the GetWMIsForManufacturer API Action.\n *\n * @memberof module:api/actions/GetWMIsForManufacturer\n * @alias GetWMIsForManufacturerResponse\n */\nexport type GetWMIsForManufacturerResponse = {\n  /** A count of the items returned in the Results array. */\n  Count: number;\n  /** A message describing the Results array. */\n  Message: string;\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\n  SearchCriteria: string;\n  /** The search results returned by the NHSTA API request. */\n  Results: Array<GetWMIsForManufacturerResults>;\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\n  FetchResponse: FetchResponse;\n};\n","/**\n * @module api/NHTSA\n * @category API\n * @description Module exporting the main (NHSTA) class for API Actions.\n *\n * > **Module Exports**:\n * > - Class: [NHTSA](NHTSA.html#NHTSA) - Class that implements all NHTSA API Actions\n */\n\nimport { Fetch /* Class */, FetchConfig /* Type */ } from './Fetch';\n\n/* Import implemented API Action classes */\nimport {\n  DecodeVin,\n  DecodeVinExtended,\n  DecodeVinValues,\n  DecodeVINValuesBatch,\n  DecodeVinValuesExtended,\n  DecodeWMI,\n  GetAllMakes,\n  GetAllManufacturers,\n  GetCanadianVehicleSpecifications,\n  GetEquipmentPlantCodes,\n  GetMakeForManufacturer,\n  GetMakesForManufacturerAndYear,\n  GetMakesForVehicleType,\n  GetManufacturerDetails,\n  GetModelsForMake,\n  GetModelsForMakeId,\n  GetModelsForMakeIdYear,\n  GetModelsForMakeYear,\n  GetParts,\n  GetVehicleTypesForMake,\n  GetVehicleTypesForMakeId,\n  GetVehicleVariableList,\n  GetVehicleVariableValuesList,\n  GetWMIsForManufacturer,\n} from './actions';\n\n/**\n * @class NHTSA\n * @augments module:api/Fetch.Fetch\n * @category API\n *\n * @param {FetchConfig} [userConfig] - Configuration options to construct the class with.\n *\n * @implements {module:api/actions/DecodeVin.DecodeVin}\n * @implements {module:api/actions/DecodeVinExtended.DecodeVinExtended}\n * @implements {module:api/actions/DecodeVinValues.DecodeVinValues}\n * @implements {module:api/actions/DecodeVinValuesExtended.DecodeVinValuesExtended}\n * @implements {module:api/actions/DecodeWMI.DecodeWMI}\n * @implements {module:api/actions/GetAllMakes.GetAllMakes}\n * @implements {module:api/actions/GetAllManufacturers.GetAllManufacturers}\n * @implements {module:api/actions/GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications}\n * @implements {module:api/actions/GetEquipmentPlantCodes.GetEquipmentPlantCodes}\n * @implements {module:api/actions/GetMakeForManufacturer.GetMakeForManufacturer}\n * @implements {module:api/actions/GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear}\n * @implements {module:api/actions/GetMakesForVehicleType.GetMakesForVehicleType}\n * @implements {module:api/actions/GetManufacturerDetails.GetManufacturerDetails}\n * @implements {module:api/actions/GetModelsForMake.GetModelsForMake}\n * @implements {module:api/actions/GetModelsForMakeId.GetModelsForMakeId}\n * @implements {module:api/actions/GetModelsForMakeIdYear.GetModelsForMakeIdYear}\n * @implements {module:api/actions/GetModelsForMakeYear.GetModelsForMakeYear}\n * @implements {module:api/actions/GetParts.GetParts}\n * @implements {module:api/actions/GetVehicleTypesForMake.GetVehicleTypesForMake}\n * @implements {module:api/actions/GetVehicleTypesForMakeId.GetVehicleTypesForMakeId}\n * @implements {module:api/actions/GetVehicleVariableList.GetVehicleVariableList}\n * @implements {module:api/actions/GetVehicleVariableValuesList.GetVehicleVariableValuesList}\n * @implements {module:api/actions/GetWMIsForManufacturer.GetWMIsForManufacturer}\n *\n * @example <caption>Node bundle</caption>\n * const { NHTSA } = require('@shaggytools/nhtsa-api-wrapper');\n *\n * const Wrapper = new NHTSA();\n *\n * // Decode a VIN and return a response of type ApiResponse\n * const response = Wrapper.DecodeVinValues('3VWD07AJ5EM388202').catch(error => error)\n *\n * // or get details about a specific manufacturer, plus 23 other available Actions.\n * const hondaDetails = Wrapper.GetManufacturerDetails('Honda').catch(error => error)\n *\n * @example <caption>Browser bundle</caption>\n *   // Change <version> to specific version number \"x.x.xx\",\n *   // or remove <version> completely for the most recently published version\n *   <script\n *     type=\"text/javascript\"\n *     src=\"https://cdn.jsdelivr.net/npm/@shaggytools/nhtsa-api-wrapper/<version>/dist/bundle.min.js\"\n *   ></script>\n *\n * <script type=\"text/javascript\">\n * // NHSTA is the global browser window exported by this package\n * const Decoder = new NHSTA.NHSTA();\n *\n * const result = await Decoder.DecodeVin('3VWD07AJ5EM388202')\n *   .catch(err => err);\n * </script>\n *\n * @example <caption>Module - Node lazy loading</caption>\n * const { NHTSA } = await import('@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\n *   .catch(err => err);\n *\n * const ApiClient = new NHTSA();\n *\n * const results = await ApiClient.DecodeVin('3VWD07AJ5EM388202')\n *   .catch(err => err)\n *\n * @example <caption>Module - Browser lazy loading</caption>\n * <script type=\"module\">\n *   const { NHSTA } = await import('https://unpkg.com/@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\n *    .catch(err => err);\n *\n *   const ApiClient = new NHSTA();\n *\n *   const { Results } = await ApiClient.DecodeVin('3VWD07AJ5EM388202')\n *    .catch(err => err)\n *\n *   console.log(Results)\n * </script>\n */\nclass NHTSA\n  extends Fetch\n  implements\n    DecodeVin,\n    DecodeVinExtended,\n    DecodeVinValues,\n    DecodeVINValuesBatch,\n    DecodeVinValuesExtended,\n    DecodeWMI,\n    GetAllMakes,\n    GetAllManufacturers,\n    GetCanadianVehicleSpecifications,\n    GetEquipmentPlantCodes,\n    GetMakeForManufacturer,\n    GetMakesForManufacturerAndYear,\n    GetMakesForVehicleType,\n    GetManufacturerDetails,\n    GetModelsForMake,\n    GetModelsForMakeId,\n    GetModelsForMakeIdYear,\n    GetModelsForMakeYear,\n    GetParts,\n    GetVehicleTypesForMake,\n    GetVehicleTypesForMakeId,\n    GetVehicleVariableList,\n    GetVehicleVariableValuesList,\n    GetWMIsForManufacturer {\n  constructor(userConfig?: FetchConfig) {\n    super(userConfig);\n  }\n  DecodeVin = DecodeVin.prototype.DecodeVin;\n\n  DecodeVinExtended = DecodeVinExtended.prototype.DecodeVinExtended;\n\n  DecodeVinValues = DecodeVinValues.prototype.DecodeVinValues;\n\n  DecodeVINValuesBatch = DecodeVINValuesBatch.prototype.DecodeVINValuesBatch;\n\n  DecodeVinValuesExtended =\n    DecodeVinValuesExtended.prototype.DecodeVinValuesExtended;\n\n  DecodeWMI = DecodeWMI.prototype.DecodeWMI;\n\n  GetAllMakes = GetAllMakes.prototype.GetAllMakes;\n\n  GetAllManufacturers = GetAllManufacturers.prototype.GetAllManufacturers;\n\n  GetCanadianVehicleSpecifications =\n    GetCanadianVehicleSpecifications.prototype.GetCanadianVehicleSpecifications;\n\n  GetEquipmentPlantCodes =\n    GetEquipmentPlantCodes.prototype.GetEquipmentPlantCodes;\n\n  GetMakeForManufacturer =\n    GetMakeForManufacturer.prototype.GetMakeForManufacturer;\n\n  GetMakesForManufacturerAndYear =\n    GetMakesForManufacturerAndYear.prototype.GetMakesForManufacturerAndYear;\n\n  GetMakesForVehicleType =\n    GetMakesForVehicleType.prototype.GetMakesForVehicleType;\n\n  GetManufacturerDetails =\n    GetManufacturerDetails.prototype.GetManufacturerDetails;\n\n  GetModelsForMake = GetModelsForMake.prototype.GetModelsForMake;\n\n  GetModelsForMakeId = GetModelsForMakeId.prototype.GetModelsForMakeId;\n\n  GetModelsForMakeIdYear =\n    GetModelsForMakeIdYear.prototype.GetModelsForMakeIdYear;\n\n  GetModelsForMakeYear = GetModelsForMakeYear.prototype.GetModelsForMakeYear;\n\n  GetParts = GetParts.prototype.GetParts;\n\n  GetVehicleTypesForMake =\n    GetVehicleTypesForMake.prototype.GetVehicleTypesForMake;\n\n  GetVehicleTypesForMakeId =\n    GetVehicleTypesForMakeId.prototype.GetVehicleTypesForMakeId;\n\n  GetVehicleVariableList =\n    GetVehicleVariableList.prototype.GetVehicleVariableList;\n\n  GetVehicleVariableValuesList =\n    GetVehicleVariableValuesList.prototype.GetVehicleVariableValuesList;\n\n  GetWMIsForManufacturer =\n    GetWMIsForManufacturer.prototype.GetWMIsForManufacturer;\n}\n\nexport { NHTSA };\n","/**\n * @module api/Client\n * @category API\n * @description Module exporting an instance of the NHSTA class.\n *\n * > - For more information, see the documentation for the [NHTSA](module-api_NHTSA-NHTSA.html) class.\n */\n\nimport { NHTSA } from './NHTSA';\n\n/**\n * A new instance of the [NHTSA](module-api_NHTSA-NHTSA.html) class.\n *\n * @type {NHTSA}\n *\n * @example <caption>Node bundle</caption>\n * const { Client } = require('@shaggytools/nhtsa-api-wrapper');\n *\n * // Decode a VIN and return get a response of type ApiResponse\n * const response = Client.DecodeVinValues('3VWD07AJ5EM388202').catch(error => error)\n *\n * // or get details about a specific manufacturer, plus 23 other available Actions.\n * const audiDetails = Client.GetManufacturerDetails('Audi').catch(error => error)\n *\n * @example <caption>Browser bundle</caption>\n * // Change <version> to specific version number \"x.x.xx\",\n * // or remove <version> completely for the most recently published version\n * <script\n *   type=\"text/javascript\"\n *   src=\"https://cdn.jsdelivr.net/npm/@shaggytools/nhtsa-api-wrapper/<version>/dist/bundle.min.js\"\n * ></script>\n *\n * <script type=\"text/javascript\">\n * // NHSTA is the global browser window exported by this package\n * const Decoder = NHSTA.Client\n *\n * const result = Decoder.DecodeVin('3VWD07AJ5EM388202')\n *   .catch(err => err);\n * </script>\n *\n * @example <caption>Module - Node lazy loading</caption>\n * const { Client } = await import('@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\n *   .catch(err => err);\n *\n * const results = await Client.DecodeVin('3VWD07AJ5EM388202')\n *   .catch(err => err)\n *\n * @example <caption>Module - Browser lazy loading</caption>\n * <script type=\"module\">\n * const { Client } = await import('https://unpkg.com/@shaggytools/nhtsa-api-wrapper/dist/module/index.js')\n *  .catch(err => err);\n *\n * const { Results } = await Client.DecodeVin('3VWD07AJ5EM388202')\n *    .catch(err => err)\n * </script>\n *\n */\nconst Client: NHTSA = new NHTSA();\n\nexport { Client };\n"],"names":["getTypeof","value","toString","Object","prototype","call","toLowerCase","slice","length","TRANSLITERATION_TABLE","A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z","WEIGHTS_ARRAY","DEFAULT_CONFIG","apiResponseFormat","baseUrl","options","Fetch","[object Object]","userConfig","finalConfig","this","params","allowEmptyStringValues","format","Promise","reject","Error","entries","paramsLength","resolve","isPrepended","queryStringArray","map","key","index","prepend","append","typeofValue","encodeURI","join","makeQueryString","url","typeofUrl","typeofOptions","combinedOptions","response","fetch","then","result","status","statusText","headers","catch","err","NhtsaResponse","json","finalResult","FetchResponse","ok","redirected","DecodeVin","super","vin","action","typeofParams","typeofVin","typeofModelYear","modelYear","queryString","buildQueryString","get","DecodeVinExtended","DecodeVinValues","DecodeVINValuesBatch","inputString","typeofInputString","body","method","content-type","DecodeVinValuesExtended","DecodeWMI","WMI","typeofWMI","GetAllMakes","GetAllManufacturers","typeofManufacturerType","manufacturerType","typeofPage","page","GetCanadianVehicleSpecifications","typeofYear","year","typeofMake","make","typeofModel","model","typeofUnits","units","params_","GetEquipmentPlantCodes","typeofEquipmentType","equipmentType","typeofReportType","reportType","GetMakeForManufacturer","manufacturer","typeofManufacturer","GetMakesForManufacturerAndYear","GetMakesForVehicleType","typeName","typeofTypeName","GetManufacturerDetails","GetModelsForMake","makeName","typeofMakeName","GetModelsForMakeId","makeID","typeofMakeId","GetModelsForMakeIdYear","makeId","vehicleType","typeofVehicleType","actionUrl","GetModelsForMakeYear","GetParts","type","fromDate","toDate","typeofType","typeofFromDate","typeofToDate","GetVehicleTypesForMake","GetVehicleTypesForMakeId","GetVehicleVariableList","GetVehicleVariableValuesList","variableValue","typeofVariableValue","GetWMIsForManufacturer","NHTSA","Client","vinArray","toUpperCase","split","checkDigit","isNaN","parseInt","checkValue","digit","digitValue","reduce","acc","currValue"],"mappings":"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"}