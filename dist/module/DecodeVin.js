import{_ as e}from"./tslib.es6-e8a9b979.js";import{F as r,g as t}from"./Fetch-980165d1.js";class o extends r{constructor(e){super(e)}DecodeVin(r,o){var i,n;return e(this,void 0,void 0,(function*(){const e=t(o);if(o&&"object"!==e)return Promise.reject(new Error('DecodeVin, "params" argument must be of type object, got: '+`<${e}> ${o}`));const s=t(r);if("string"!==s)return Promise.reject(new Error('DecodeVin, "vin" argument is required and must be of type string, got: '+`<${s}> ${r}`));const c=t(null===(i=o)||void 0===i?void 0:i.modelYear);if((null===(n=o)||void 0===n?void 0:n.modelYear)&&"number"!==c)return Promise.reject(new Error('DecodeVin, "params.modelYear" argument is required and must be of type string or number, got: '+`<${c}> ${o.modelYear}`));const d=yield this.buildQueryString(o).catch(e=>Promise.reject(new Error(`DecodeVin, Error building query string: ${e}`))),u=`${this.baseUrl}/DecodeVin/${r}${d}`;return yield this.get(u).then(e=>e).catch(e=>Promise.reject(new Error(`DecodeVin, Fetch.get() error: ${e}`)))}))}}export{o as DecodeVin};
//# sourceMappingURL=DecodeVin.js.map
