{"version":3,"file":"index-9b253478.js","sources":["../../src/api/actions/DecodeVin.ts","../../src/api/actions/DecodeVinExtended.ts","../../src/api/actions/DecodeVinValues.ts","../../src/api/actions/DecodeVinValuesExtended.ts","../../src/api/actions/DecodeWMI.ts","../../src/api/actions/GetAllMakes.ts","../../src/api/actions/GetAllManufacturers.ts","../../src/api/actions/GetCanadianVehicleSpecifications.ts","../../src/api/actions/GetEquipmentPlantCodes.ts","../../src/api/actions/GetMakeForManufacturer.ts","../../src/api/actions/GetMakesForManufacturerAndYear.ts","../../src/api/actions/GetMakesForVehicleType.ts","../../src/api/actions/GetManufacturerDetails.ts","../../src/api/actions/GetModelsForMake.ts","../../src/api/actions/GetModelsForMakeId.ts","../../src/api/actions/GetModelsForMakeIdYear.ts","../../src/api/actions/GetModelsForMakeYear.ts","../../src/api/actions/GetParts.ts","../../src/api/actions/GetVehicleTypesForMake.ts","../../src/api/actions/GetVehicleTypesForMakeId.ts","../../src/api/actions/GetVehicleVariableList.ts","../../src/api/actions/GetVehicleVariableValuesList.ts","../../src/api/actions/GetWMIsForManufacturer.ts"],"sourcesContent":["/**\r\n * @module api/actions/DecodeVin\r\n * @category Actions\r\n * @description DecodeVin NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVin](module-api_actions_DecodeVin.DecodeVin.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinResponse](#DecodeVinResponse)\r\n * > - Type: [DecodeVinResults](#DecodeVinResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVin extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The DecodeVin API Action will decode the VIN and the decoded output will be made available in the format of Key-value pairs.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This API also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *   - The 9th digit is not necessary.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinResponse | Error>)} - Api Response object.\r\n   */\r\n  async DecodeVin(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: number;\r\n    }\r\n  ): Promise<DecodeVinResponse | Error> {\r\n    const action = 'DecodeVin';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVin\r\n * @alias DecodeVinResults\r\n */\r\nexport type DecodeVinResults = {\r\n  Value: string | null;\r\n  ValueId: string | null;\r\n  Variable: string;\r\n  VariableId: number;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVin API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVin\r\n * @alias DecodeVinResponse\r\n */\r\nexport type DecodeVinResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeVinResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinExtended\r\n * @category Actions\r\n * @description DecodeVinExtended NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinExtended](module-api_actions_DecodeVinExtended.DecodeVinExtended.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinExtendedResponse](#DecodeVinExtendedResponse)\r\n * > - Type: [DecodeVinExtendedResults](#DecodeVinExtendedResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinExtended extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This is exactly like the DecodeVin method but provides additional information on variables\r\n   * related to other NHTSA programs like\r\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\r\n   * - This will decode the VIN and the decoded output will be made available\r\n   *   in the format of Key-value pairs.\r\n   * - In the returned 'Results` object:\r\n   *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value.\r\n   *   - In case of text variables, the ValueID is not applicable.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *   - The 9th digit is not necessary.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinExtendedResponse | Error>)} - Api Response object.\r\n   */\r\n  async DecodeVinExtended(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: string | number;\r\n    }\r\n  ): Promise<DecodeVinExtendedResponse | Error> {\r\n    const action = 'DecodeVinExtended';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinExtendedResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinExtended\r\n * @alias DecodeVinExtendedResults\r\n */\r\nexport type DecodeVinExtendedResults = {\r\n  Value: string | null;\r\n  ValueId: string | null;\r\n  Variable: string;\r\n  VariableId: number;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinExtended API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinExtended\r\n * @alias DecodeVinExtendedResponse\r\n */\r\nexport type DecodeVinExtendedResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeVinExtendedResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinValues\r\n * @category Actions\r\n * @description DecodeVinValues NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinValues](module-api_actions_DecodeVinValues.DecodeVinValues.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinValuesResponse](#DecodeVinValuesResponse)\r\n * > - Type: [DecodeVinValuesResults](#DecodeVinValuesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinValues extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The DecodeVinValues API Action will decode the VIN with the Results returned in a _flat file_ format.\r\n   * - The Results will be made available in a flat file format of a single object containing\r\n   *   'key<string>: value<string>' results.\r\n   * - Providing params.modelYear allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinValuesResponse | Error>)} Api Response object.\r\n   */\r\n  async DecodeVinValues(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: number;\r\n    }\r\n  ): Promise<DecodeVinValuesResponse | Error> {\r\n    const action = 'DecodeVinValues';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (\r\n      params?.modelYear &&\r\n      typeofModelYear !== 'string' &&\r\n      typeofModelYear !== 'number'\r\n    ) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinValuesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResults\r\n */\r\nexport type DecodeVinValuesResults = {\r\n  /** Flat file format, single object containing keys and values of type string */\r\n  [name: string]: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinValues API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinValues\r\n * @alias DecodeVinValuesResponse\r\n */\r\nexport type DecodeVinValuesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /**\r\n   * The search results returned by the NHSTA API request.\r\n   * Flat file format, single object containing keys and values of type string\r\n   * */\r\n  Results: Array<DecodeVinValuesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeVinValuesExtended\r\n * @category Actions\r\n * @description DecodeVinValuesExtended NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeVinValuesExtended](module-api_actions_DecodeVinValuesExtended.DecodeVinValuesExtended.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeVinValuesExtendedResponse](#DecodeVinValuesExtendedResponse)\r\n * > - Type: [DecodeVinValuesExtendedResults](#DecodeVinValuesExtendedResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeVinValuesExtended extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This is exactly like the DecodeVinValues (flat format Results) method but provides additional information\r\n   * on variables related to other NHTSA programs like\r\n   * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\r\n   * - The Results will be made available in a flat file format of a single object containing\r\n   *   'key<string>: value<string>' results.\r\n   * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\r\n   *   or older (pre-1980), model year ranges.\r\n   *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding.\r\n   * - This Action also supports partial VIN decoding (VINs that are less than 17 characters).\r\n   *   - In this case, the VIN will be decoded partially with the available characters.\r\n   *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters.\r\n   *\r\n   * @async\r\n   * @param {string} vin - Vehicle Identification Number (full or partial).\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string|number} [params.modelYear] - Optional Model Year search parameter.\r\n   * @returns {(Promise<DecodeVinValuesExtendedResponse | Error>)} Api Response object.\r\n   */\r\n  async DecodeVinValuesExtended(\r\n    vin: string,\r\n    params?: {\r\n      modelYear?: string | number;\r\n    }\r\n  ): Promise<DecodeVinValuesExtendedResponse | Error> {\r\n    const action = 'DecodeVinValuesExtended';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofVin = getTypeof(vin);\r\n    if (typeofVin !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"vin\" argument is required and must be of type string, got: ` +\r\n            `<${typeofVin}> ${vin}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModelYear = getTypeof(params?.modelYear);\r\n    if (params?.modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofModelYear}> ${params.modelYear}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${vin}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeVinValuesExtendedResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeVinValuesExtended\r\n * @alias DecodeVinValuesExtendedResults\r\n */\r\nexport type DecodeVinValuesExtendedResults = {\r\n  /** Flat file format, single object containing keys and values of type string */\r\n  [name: string]: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeVinValuesExtended API Action.\r\n *\r\n * @memberof module:api/actions/DecodeVinValuesExtended\r\n * @alias DecodeVinValuesExtendedResponse\r\n */\r\nexport type DecodeVinValuesExtendedResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /**\r\n   * The search results returned by the NHSTA API request.\r\n   * Flat file format, single object containing keys and values of type string\r\n   * */\r\n  Results: Array<DecodeVinValuesExtendedResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/DecodeWMI\r\n * @category Actions\r\n * @description DecodeWMI NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [DecodeWMI](module-api_actions_DecodeWMI.DecodeWMI.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [DecodeWMIResponse](#DecodeWMIResponse)\r\n * > - Type: [DecodeWMIResults](#DecodeWMIResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class DecodeWMI extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides information on the World Manufacturer Identifier for a specific WMI code.\r\n   * - `WMI` may be put in as either 3 characters representing VIN position 1-3 or 6 characters\r\n   *   representing VIN positions 1-3 & 12-14. Example \"JTD\", \"1T9131\".\r\n   *\r\n   * @async\r\n   * @param {string} WMI - World Manufacturer Identifier.\r\n   * @returns {(Promise<DecodeWMIResults | Error>)} Api Response object.\r\n   */\r\n  async DecodeWMI(WMI: string): Promise<DecodeWMIResponse | Error> {\r\n    const action = 'DecodeWMI';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofWMI = getTypeof(WMI);\r\n    if (typeofWMI !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"WMI\" argument is required and must be of type string, got: ` +\r\n            `<${typeofWMI}> ${WMI}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${WMI}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link DecodeWMIResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/DecodeWMI\r\n * @alias DecodeWMIResults\r\n */\r\nexport type DecodeWMIResults = {\r\n  CommonName: string;\r\n  CreatedOn: string;\r\n  DateAvailableToPublic: string;\r\n  Make: string;\r\n  ManufacturerName: string;\r\n  ParentCompanyName: string;\r\n  URL: string;\r\n  UpdatedOn: string;\r\n  VehicleType: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the DecodeWMI API Action.\r\n *\r\n * @memberof module:api/actions/DecodeWMI\r\n * @alias DecodeWMIResponse\r\n */\r\nexport type DecodeWMIResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<DecodeWMIResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetAllMakes\r\n * @category Actions\r\n * @description GetAllMakes NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetAllMakes](module-api_actions_GetAllMakes.GetAllMakes.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetAllMakesResponse](#GetAllMakesResponse)\r\n * > - Type: [GetAllMakesResults](#GetAllMakesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetAllMakes extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Makes available in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @returns {(Promise<GetAllMakesResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetAllMakes(): Promise<GetAllMakesResponse | Error> {\r\n    const action = 'GetAllMakes';\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetAllMakesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetAllMakes\r\n * @alias GetAllMakesResults\r\n */\r\nexport type GetAllMakesResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetAllMakes API Action.\r\n *\r\n * @memberof module:api/actions/GetAllMakes\r\n * @alias GetAllMakesResponse\r\n */\r\nexport type GetAllMakesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetAllMakesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetAllManufacturers\r\n * @category Actions\r\n * @description GetAllManufacturers NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetAllManufacturers](module-api_actions_GetAllManufacturers.GetAllManufacturers.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetAllManufacturersResponse](#GetAllManufacturersResponse)\r\n * > - Type: [GetAllManufacturersResults](#GetAllManufacturersResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetAllManufacturers extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Manufacturers available in vPIC Dataset.\r\n   * - `params.manufacturerType` allows the user to filter the list based on manufacturer type,\r\n   *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\r\n   *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings).\r\n   * - You can get a list of all manufacturer types with the following API Action:\r\n   *   `GetVehicleVariableValuesList('manufacturer type')`\r\n   * - Results are provided in pages of 100 items.\r\n   * - Provide a number value for `params.page` to specify 1st (default), 2nd, 3rd, Nth, etc page.\r\n   *\r\n   * @async\r\n   * @param {object} [params={}] - Query Search Parameters to append to the URL.\r\n   * @param {string} [params.manufacturerType] - See method description.\r\n   * @param {number} [params.page] - Specify the page number (results returned 100 at a time).\r\n   * @returns {(Promise<module:api.ApiResponse | Error>)} Api Response object.\r\n   */\r\n  async GetAllManufacturers(\r\n    params: {\r\n      manufacturerType?: string;\r\n      page?: number;\r\n    } = {}\r\n  ): Promise<GetAllManufacturersResponse | Error> {\r\n    const action = 'GetAllManufacturers';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofManufacturerType = getTypeof(params.manufacturerType);\r\n    if (params.manufacturerType && typeofManufacturerType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.manufacturerType\" argument must be of type string, got: ` +\r\n            `<${typeofManufacturerType}> ${params.manufacturerType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofPage = getTypeof(params.page);\r\n    if (params.page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: ` +\r\n            `<${typeofPage}> ${params.page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetAllManufacturersResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResults\r\n */\r\nexport type GetAllManufacturersResults = {\r\n  Country: string;\r\n  Mfr_CommonName: string;\r\n  Mfr_ID: number;\r\n  Mfr_Name: string;\r\n  VehicleTypes: Array<{ isPrimary?: boolean; name?: string }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetAllManufacturers API Action.\r\n *\r\n * @memberof module:api/actions/GetAllManufacturers\r\n * @alias GetAllManufacturersResponse\r\n */\r\nexport type GetAllManufacturersResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetAllManufacturersResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetCanadianVehicleSpecifications\r\n * @category Actions\r\n * @description GetCanadianVehicleSpecifications NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetCanadianVehicleSpecifications](module-api_actions_GetCanadianVehicleSpecifications.GetCanadianVehicleSpecifications.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetCanadianVehicleSpecificationsResponse](#GetCanadianVehicleSpecificationsResponse)\r\n * > - Type: [GetCanadianVehicleSpecificationsResults](#GetCanadianVehicleSpecificationsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetCanadianVehicleSpecifications extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\r\n   * used primarily in collision investigation and reconstruction, combined with a search engine.\r\n   *\r\n   * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\r\n   * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\r\n   * page for more details.\r\n   *\r\n   * This API action will return a 404 html error if any of the query parameters in params\r\n   * are missing from the query string. This is the only API action with this behaviour. Therefore,\r\n   * parameters are inserted into the query string as empty strings if not provided by the user.\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle (required) - Number, >= 1971.\r\n   * @param {string} [params.make] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\r\n   * @param {string} [params.model] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\r\n   * @param {string} [params.units] - \"Metric\" (default), or \"US\" for United States customary units.\r\n   * @returns {(Promise<GetCanadianVehicleSpecificationsResponse | Error>)} Api Response object.\r\n   */\r\n  async GetCanadianVehicleSpecifications(params: {\r\n    year: number;\r\n    make?: string;\r\n    model?: string;\r\n    units?: string;\r\n  }): Promise<GetCanadianVehicleSpecificationsResponse | Error> {\r\n    const action = 'GetCanadianVehicleSpecifications';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofMake = getTypeof(params.make);\r\n    if (params.make && typeofMake !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.make\" argument must be of type string, got: ` +\r\n            `<${typeofMake}> ${params.make}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofModel = getTypeof(params.model);\r\n    if (params.model && typeofModel !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.model\" argument must be of type string, got: ` +\r\n            `<${typeofModel}> ${params.model}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofUnits = getTypeof(params.units);\r\n    if (params.units && typeofUnits !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.units\" argument must be of type string, got: ` +\r\n            `<${typeofUnits}> ${params.units}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Set default query parameters to empty strings if not provided by the user */\r\n    const make = params.make || '';\r\n    const model = params.model || '';\r\n    const units = params.units || '';\r\n\r\n    const params_ = {\r\n      year: params.year,\r\n      make,\r\n      model,\r\n      units\r\n    };\r\n\r\n    /*\r\n     * Build the 'default' query string to be appended to the URL.\r\n     *\r\n     * Additionally, sets the allowEmptyStringValues option (2nd argument) to true because\r\n     * this API action will return a 404 error if any of the query parameters are missing from the query string.\r\n     * This is the only API action with this behaviour (\"year\" is the only param the user must provide).\r\n     */\r\n    const queryString = await this.buildQueryString(\r\n      params_,\r\n      true\r\n    ).catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetCanadianVehicleSpecificationsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResults\r\n */\r\nexport type GetCanadianVehicleSpecificationsResults = {\r\n  Specs: Array<{\r\n    Name: string;\r\n    Value: string;\r\n  }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetCanadianVehicleSpecifications API Action.\r\n *\r\n * @memberof module:api/actions/GetCanadianVehicleSpecifications\r\n * @alias GetCanadianVehicleSpecificationsResponse\r\n */\r\nexport type GetCanadianVehicleSpecificationsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetCanadianVehicleSpecificationsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetEquipmentPlantCodes\r\n * @category Actions\r\n * @description GetEquipmentPlantCodes NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetEquipmentPlantCodes](module-api_actions_GetEquipmentPlantCodes.GetEquipmentPlantCodes.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetEquipmentPlantCodesResponse](#GetEquipmentPlantCodesResponse)\r\n * > - Type: [GetEquipmentPlantCodesResults](#GetEquipmentPlantCodesResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetEquipmentPlantCodes extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * Returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\r\n   *\r\n   * `params.year`:\r\n   *  - Only years >= 2016 are supported\r\n   *\r\n   * `params.equipmentType`:\r\n   *  - 1 (Tires)\r\n   *  - 3 (Brake Hoses)\r\n   *  - 13 (Glazing)\r\n   *  - 16 (Retread)\r\n   *\r\n   * `params.reportType`:\r\n   *  - 'New' (The Equipment Plant Code was assigned during the selected year).\r\n   *  - 'Updated' (The Equipment Plant data was modified during the selected year).\r\n   *  - 'Closed' (The Equipment Plant is no longer Active).\r\n   *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed)).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   * @param {number} params.equipmentType - Number equal to 1, 3, 13, or 16.\r\n   * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All'.\r\n   * @returns {(Promise<GetEquipmentPlantCodesResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetEquipmentPlantCodes(params: {\r\n    year: number;\r\n    equipmentType: 1 | 3 | 13 | 16;\r\n    reportType: 'New' | 'Updated' | 'Closed' | 'All';\r\n  }): Promise<GetEquipmentPlantCodesResponse | Error> {\r\n    const action = 'GetEquipmentPlantCodes';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofEquipmentType = getTypeof(params.equipmentType);\r\n    if (typeofEquipmentType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.equipmentType\" argument is required and must be of type number, got: ` +\r\n            `<${typeofEquipmentType}> ${params.equipmentType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofReportType = getTypeof(params.reportType);\r\n    if (typeofReportType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.reportType\" argument is required and must be of type string, got: ` +\r\n            `<${typeofReportType}> ${params.reportType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetEquipmentPlantCodesResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResults\r\n */\r\nexport type GetEquipmentPlantCodesResults = {\r\n  Address: string;\r\n  City: string;\r\n  Country: string;\r\n  DOTCode: string;\r\n  Name: string;\r\n  OldDotCode: string;\r\n  PostalCode: string;\r\n  StateProvince: string;\r\n  Status: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetEquipmentPlantCodes API Action.\r\n *\r\n * @memberof module:api/actions/GetEquipmentPlantCodes\r\n * @alias GetEquipmentPlantCodesResponse\r\n */\r\nexport type GetEquipmentPlantCodesResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetEquipmentPlantCodesResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakeForManufacturer\r\n * @category Actions\r\n * @description GetMakeForManufacturer NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakeForManufacturer](module-api_actions_GetMakeForManufacturer.GetMakeForManufacturer.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakeForManufacturerResponse](#GetMakeForManufacturerResponse)\r\n * > - Type: [GetMakeForManufacturerResults](#GetMakeForManufacturerResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakeForManufacturer extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer that is requested.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - `manufacturer` name can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @returns {(Promise<GetMakeForManufacturer | Error>)} Api Response object.\r\n   */\r\n  async GetMakeForManufacturer(\r\n    manufacturer: string | number\r\n  ): Promise<GetMakeForManufacturerResponse | Error> {\r\n    const action = 'GetMakeForManufacturer';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakeForManufacturerResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakeForManufacturer\r\n * @alias GetMakeForManufacturerResults\r\n */\r\nexport type GetMakeForManufacturerResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Mfr_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakeForManufacturer API Action.\r\n *\r\n * @memberof module:api/actions/GetMakeForManufacturer\r\n * @alias GetMakeForManufacturerResponse\r\n */\r\nexport type GetMakeForManufacturerResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakeForManufacturerResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakesForManufacturerAndYear\r\n * @category Actions\r\n * @description GetMakesForManufacturerAndYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakesForManufacturerAndYear](module-api_actions_GetMakesForManufacturerAndYear.GetMakesForManufacturerAndYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakesForManufacturerAndYearResponse](#GetMakesForManufacturerAndYearResponse)\r\n * > - Type: [GetMakesForManufacturerAndYearResults](#GetMakesForManufacturerAndYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakesForManufacturerAndYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified manufacturer,\r\n   * and whose Year From and Year To range cover the specified year.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   * - Manufacturer can be idenfitied by Id, a partial name, or a full name\r\n   *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.year - Model year of the vehicle - Number, >= 2016.\r\n   *\r\n   * @returns {(Promise<GetMakesForManufacturerAndYearResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetMakesForManufacturerAndYear(\r\n    manufacturer: string | number,\r\n    params: {\r\n      year: number;\r\n    }\r\n  ): Promise<GetMakesForManufacturerAndYearResponse | Error> {\r\n    const action = 'GetMakesForManufacturerAndYear';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument is required and must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    const typeofYear = getTypeof(params.year);\r\n    if (typeofYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.year\" argument is required and must be of type number, got: ` +\r\n            `<${typeofYear}> ${params.year}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakesForManufacturerAndYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResults\r\n */\r\nexport type GetMakesForManufacturerAndYearResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  MfrId: number;\r\n  MfrName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakesForManufacturerAndYear API Action.\r\n *\r\n * @memberof module:api/actions/GetMakesForManufacturerAndYear\r\n * @alias GetMakesForManufacturerAndYearResponse\r\n */\r\nexport type GetMakesForManufacturerAndYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakesForManufacturerAndYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetMakesForVehicleType\r\n * @category Actions\r\n * @description GetMakesForVehicleType NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetMakesForVehicleType](module-api_actions_GetMakesForVehicleType.GetMakesForVehicleType.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetMakesForVehicleTypeResponse](#GetMakesForVehicleTypeResponse)\r\n * > - Type: [GetMakesForVehicleTypeResults](#GetMakesForVehicleTypeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetMakesForVehicleType extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Makes in the vPIC dataset for a specified vehicle type (`typeName`),\r\n   * whose name is LIKE the vehicle type name in vPIC Dataset.\r\n   * - Vehicle `typeName` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} typeName - A partial or full vehicle type name.\r\n   * @returns {(Promise<GetMakesForVehicleTypeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetMakesForVehicleType(\r\n    typeName: string\r\n  ): Promise<GetMakesForVehicleTypeResponse | Error> {\r\n    const action = 'GetMakesForVehicleType';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofTypeName = getTypeof(typeName);\r\n    if (typeofTypeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"typeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofTypeName}> ${typeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${typeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetMakesForVehicleTypeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetMakesForVehicleType\r\n * @alias GetMakesForVehicleTypeResults\r\n */\r\nexport type GetMakesForVehicleTypeResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetMakesForVehicleType API Action.\r\n *\r\n * @memberof module:api/actions/GetMakesForVehicleType\r\n * @alias GetMakesForVehicleTypeResponse\r\n */\r\nexport type GetMakesForVehicleTypeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetMakesForVehicleTypeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetManufacturerDetails\r\n * @category Actions\r\n * @description GetManufacturerDetails NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetManufacturerDetails](module-api_actions_GetManufacturerDetails.GetManufacturerDetails.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetManufacturerDetailsResponse](#GetManufacturerDetailsResponse)\r\n * > - Type: [GetManufacturerDetailsResults](#GetManufacturerDetailsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetManufacturerDetails extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides the details for a specific manufacturer that is requested.\r\n   * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\r\n   * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name,\r\n   *   (it accepts a partial manufacturer name as an input).\r\n   * - Multiple results are returned in case of multiple matches.\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name (string) or Manufacturer ID (number).\r\n   * @returns {(Promise<GetManufacturerDetailsResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetManufacturerDetails(\r\n    manufacturer: string | number\r\n  ): Promise<GetManufacturerDetailsResponse | Error> {\r\n    const action = 'GetManufacturerDetails';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string' && typeofManufacturer !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetManufacturerDetailsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetManufacturerDetails\r\n * @alias GetManufacturerDetailsResults\r\n */\r\nexport type GetManufacturerDetailsResults = {\r\n  Address: string;\r\n  Address2: string;\r\n  City: string;\r\n  ContactEmail: string;\r\n  ContactFax: string;\r\n  ContactPhone: string;\r\n  Country: string;\r\n  DBAs: string;\r\n  EquipmentItems: Array<object>;\r\n  LastUpdated: string;\r\n  ManufacturerTypes: Array<{\r\n    Name: string;\r\n  }>;\r\n  Mfr_CommonName: string;\r\n  Mfr_ID: number;\r\n  Mfr_Name: string;\r\n  OtherManufacturerDetails: string;\r\n  PostalCode: string;\r\n  PrimaryProduct: string;\r\n  PrincipalFirstName: string;\r\n  PrincipalLastName: string;\r\n  PrincipalPosition: string;\r\n  StateProvince: string;\r\n  SubmittedName: string;\r\n  SubmittedOn: string;\r\n  SubmittedPosition: string;\r\n  VehicleTypes: Array<{\r\n    GVWRFrom: string;\r\n    GVWRTo: string;\r\n    IsPrimary: boolean;\r\n    Name: string;\r\n  }>;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetManufacturerDetails API Action.\r\n *\r\n * @memberof module:api/actions/GetManufacturerDetails\r\n * @alias GetManufacturerDetailsResponse\r\n */\r\nexport type GetManufacturerDetailsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetManufacturerDetailsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMake\r\n * @category Actions\r\n * @description GetModelsForMake NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMake](module-api_actions_GetModelsForMake.GetModelsForMake.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeResponse](#GetModelsForMakeResponse)\r\n * > - Type: [GetModelsForMakeResults](#GetModelsForMakeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMake extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified `makeName`\r\n   * whose Name is LIKE the Make in vPIC Dataset.\r\n   * - `makeName` can be a partial, or a full for more specificity\r\n   *   (e.g., \"Harley\", \"Harley Davidson\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} makeName - Vehicle make name.\r\n   * @returns {(Promise<GetModelsForMakeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMake(\r\n    makeName: string\r\n  ): Promise<GetModelsForMakeResponse | Error> {\r\n    const action = 'GetModelsForMake';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeName = getTypeof(makeName);\r\n    if (typeofMakeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMakeName}> ${makeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMake\r\n * @alias GetModelsForMakeResults\r\n */\r\nexport type GetModelsForMakeResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMake API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMake\r\n * @alias GetModelsForMakeResponse\r\n */\r\nexport type GetModelsForMakeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeId\r\n * @category Actions\r\n * @description GetModelsForMakeId NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeId](module-api_actions_GetModelsForMakeId.GetModelsForMakeId.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeIdResponse](#GetModelsForMakeIdResponse)\r\n * > - Type: [GetModelsForMakeIdResults](#GetModelsForMakeIdResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeId extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Make\r\n   * whose Id is equal to the `makeId` in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @param {number} makeID - Vehicle make ID (number).\r\n   * @returns {(Promise<GetModelsForMakeIdResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeId(\r\n    makeID: number\r\n  ): Promise<GetModelsForMakeIdResponse | Error> {\r\n    const action = 'GetModelsForMakeId';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeId = getTypeof(makeID);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeID}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString({}).catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeId\r\n * @alias GetModelsForMakeIdResults\r\n */\r\nexport type GetModelsForMakeIdResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeId API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeId\r\n * @alias GetModelsForMakeIdResponse\r\n */\r\nexport type GetModelsForMakeIdResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeIdResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeIdYear\r\n * @category Actions\r\n * @description GetModelsForMakeIdYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeIdYear](module-api_actions_GetModelsForMakeIdYear.GetModelsForMakeIdYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeIdYearResponse](#GetModelsForMakeIdYearResponse)\r\n * > - Type: [GetModelsForMakeIdYearResults](#GetModelsForMakeIdYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeIdYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Model Year\r\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\r\n   *   - `params.makeId` is a number and is a required query parameter.\r\n   *\r\n   * A minimum of one of the following are required (or a combination of both):\r\n   *   - `params.modelYear` is a number (greater than 1995)\r\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\r\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {number} params.makeId - Make ID to search.\r\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\r\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\r\n   * @returns {(Promise<GetModelsForMakeIdYearResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeIdYear(params: {\r\n    makeId: number;\r\n    modelYear?: number;\r\n    vehicleType?: string;\r\n  }): Promise<GetModelsForMakeIdYearResponse | Error> {\r\n    const action = 'GetModelsForMakeIdYear';\r\n\r\n    const makeId: number = params?.makeId;\r\n    const modelYear: number | undefined = params?.modelYear;\r\n    const vehicleType: string | undefined = params?.vehicleType;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n    /* Required makeId param of type number */\r\n    const typeofMakeId = getTypeof(makeId);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeId}`\r\n        )\r\n      );\r\n    }\r\n    /* At least one of modelYear or vehicleType params is required */\r\n    if (!modelYear && !vehicleType) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\r\n            `${modelYear} | ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n    /* valid modelYear param of type number */\r\n    const typeofModelYear = getTypeof(modelYear);\r\n    if (modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\r\n            `<${typeofModelYear}> ${modelYear}`\r\n        )\r\n      );\r\n    }\r\n    /* valid vehicleType param of type string */\r\n    const typeofVehicleType = getTypeof(vehicleType);\r\n    if (vehicleType && typeofVehicleType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\r\n            `<${typeofVehicleType}> ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Beginning of the the actionUrl */\r\n    let actionUrl = `${action}/makeId/${makeId}/`;\r\n\r\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\r\n    if (modelYear && vehicleType) {\r\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\r\n    } else if (modelYear) {\r\n      actionUrl += `modelYear/${modelYear}`;\r\n    } else {\r\n      actionUrl += `vehicleType/${vehicleType}`;\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeIdYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResults\r\n */\r\nexport type GetModelsForMakeIdYearResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeIdYear API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeIdYear\r\n * @alias GetModelsForMakeIdYearResponse\r\n */\r\nexport type GetModelsForMakeIdYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeIdYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetModelsForMakeYear\r\n * @category Actions\r\n * @description GetModelsForMakeYear NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetModelsForMakeYear](module-api_actions_GetModelsForMakeYear.GetModelsForMakeYear.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetModelsForMakeYearResponse](#GetModelsForMakeYearResponse)\r\n * > - Type: [GetModelsForMakeYearResults](#GetModelsForMakeYearResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetModelsForMakeYear extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns the Models in the vPIC dataset for a specified Model Year\r\n   * and Make whose name is LIKE the Make in the vPIC Dataset.\r\n   *   - `params.make` is required. It can be a partial, or a full name for more specificity\r\n   *     (e.g., \"Harley\", \"Harley Davidson\", etc.).\r\n   *\r\n   * A minimum of one of the following are required (or a combination of both):\r\n   *   - `params.modelYear` is a number (greater than 1995)\r\n   *   - `params.vehicleType` can be a partial name, or a full name for more specificity\r\n   *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.).\r\n   *\r\n   * @async\r\n   *\r\n   * @param {object} params - Query Search Parameters to append to the URL.\r\n   * @param {string} params.make - Make name to search.\r\n   * @param {number} [params.modelYear] - A number representing the model year to search (greater than 1995).\r\n   * @param {string} [params.vehicleType] - String representing the vehicle type to search.\r\n   *\r\n   * @returns {(Promise<GetModelsForMakeYearResponse | Error>)} Api Response object.\r\n   */\r\n  async GetModelsForMakeYear(params: {\r\n    make: string;\r\n    modelYear?: number;\r\n    vehicleType?: string;\r\n  }): Promise<GetModelsForMakeYearResponse | Error> {\r\n    const action = 'GetModelsForMakeYear';\r\n\r\n    const make: string = params?.make;\r\n    const modelYear: number | undefined = params?.modelYear;\r\n    const vehicleType: string | undefined = params?.vehicleType;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: ` +\r\n            `<${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n    /* Required make param of type string */\r\n    const typeofMake = getTypeof(make);\r\n    if (typeofMake !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.make\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMake}> ${make}`\r\n        )\r\n      );\r\n    }\r\n    /* At least one of modelYear or vehicleType params is required */\r\n    if (!modelYear && !vehicleType) {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, either one of \"params.modelYear\" or \"params.vehicleType\" is required, got: ` +\r\n            `${modelYear} | ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n    /* valid modelYear param of type number */\r\n    const typeofModelYear = getTypeof(modelYear);\r\n    if (modelYear && typeofModelYear !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.modelYear\" must be of type number, got: ` +\r\n            `<${typeofModelYear}> ${modelYear}`\r\n        )\r\n      );\r\n    }\r\n    /* valid vehicleType param of type string */\r\n    const typeofVehicleType = getTypeof(vehicleType);\r\n    if (vehicleType && typeofVehicleType !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.vehicleType\" must be of type string, got: ` +\r\n            `<${typeofVehicleType}> ${vehicleType}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Beginning of the the actionUrl */\r\n    let actionUrl = `${action}/make/${params.make}/`;\r\n\r\n    /* Append params.modelYear and params.vehicleType to the actionUrl, at least one is required by the API */\r\n    if (modelYear && vehicleType) {\r\n      actionUrl += `modelYear/${modelYear}/vehicleType/${vehicleType}`;\r\n    } else if (modelYear) {\r\n      actionUrl += `modelYear/${modelYear}`;\r\n    } else {\r\n      actionUrl += `vehicleType/${vehicleType}`;\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch((err: Error) =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${actionUrl}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch((err: Error) =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetModelsForMakeYearResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeYear\r\n * @alias GetModelsForMakeYearResults\r\n */\r\nexport type GetModelsForMakeYearResults = {\r\n  Make_ID: number;\r\n  Make_Name: string;\r\n  Model_ID: number;\r\n  Model_Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetModelsForMakeYear API Action.\r\n *\r\n * @memberof module:api/actions/GetModelsForMakeYear\r\n * @alias GetModelsForMakeYearResponse\r\n */\r\nexport type GetModelsForMakeYearResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetModelsForMakeYearResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetParts\r\n * @category Actions\r\n * @description GetParts NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetParts](module-api_actions_GetParts.GetParts.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetPartsResponse](#GetPartsResponse)\r\n * > - Type: [GetPartsResults](#GetPartsResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetParts extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of ORGs with letter date in the given range of the dates\r\n   * and with specified Type (`params.type`) of ORG.\r\n   * - Up to 1000 results will be returned at a time.\r\n   * - Get the next page by incrementing the `params.page` query parameter.\r\n   * - All query `params` are optional.\r\n   *\r\n   * @async\r\n   * @param {object} [params] - Query Search Parameters to append to the URL.\r\n   * @param {number} [params.type] - Specified type of ORG to search.\r\n   * @param {string} [params.fromDate] - Start date of search query.\r\n   * @param {string} [params.toDate] - End date of search query.\r\n   * @param {number} [params.page] - Which page number of results to request (100 results per page).\r\n   * @returns {(Promise<GetPartsResponse | Error>)} Api Response object.\r\n   */\r\n  async GetParts(params?: {\r\n    type?: number;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    page?: number;\r\n  }): Promise<GetPartsResponse | Error> {\r\n    const action = 'GetParts';\r\n\r\n    const type: number | undefined = params?.type;\r\n    const fromDate: string | undefined = params?.fromDate;\r\n    const toDate: string | undefined = params?.toDate;\r\n    const page: number | undefined = params?.page;\r\n\r\n    /* Valid params object */\r\n    const typeofParams = getTypeof(params);\r\n    if (params && typeofParams !== 'object') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params\" argument must be of type object, got: <${typeofParams}> ${params}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.type of type number */\r\n    const typeofType = getTypeof(type);\r\n    if (type && typeofType !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.type\" argument must be of type number, got: <${typeofType}> ${type}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.fromDate of type string */\r\n    const typeofFromDate = getTypeof(fromDate);\r\n    if (fromDate && typeofFromDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.fromDate\" argument must be of type string, got: <${typeofFromDate}> ${fromDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.toDate of type number */\r\n    const typeofToDate = getTypeof(toDate);\r\n    if (toDate && typeofToDate !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.toDate\" argument must be of type string, got: <${typeofToDate}> ${toDate}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* valid params.page of type number */\r\n    const typeofPage = getTypeof(page);\r\n    if (page && typeofPage !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"params.page\" argument must be of type number, got: <${typeofPage}> ${page}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString(params).catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetPartsResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResults\r\n */\r\nexport type GetPartsResults = {\r\n  CoverLetterURL: string;\r\n  LetterDate: string;\r\n  ManufacturerId: number;\r\n  ManufacturerName: string;\r\n  ModelYearFrom: string;\r\n  ModelYearTo: string;\r\n  Name: string;\r\n  Type: string;\r\n  URL: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetParts API Action.\r\n *\r\n * @memberof module:api/actions/GetParts\r\n * @alias GetPartsResponse\r\n */\r\nexport type GetPartsResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetPartsResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleTypesForMake\r\n * @category Actions\r\n * @description GetVehicleTypesForMake NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleTypesForMake](module-api_actions_GetVehicleTypesForMake.GetVehicleTypesForMake.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleTypesForMakeResponse](#GetVehicleTypesForMakeResponse)\r\n * > - Type: [GetVehicleTypesForMakeResults](#GetVehicleTypesForMakeResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleTypesForMake extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make,\r\n   * whose name is LIKE the make name in the vPIC Dataset.\r\n   * - `makeName` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string} makeName - Name of the vehicle make to search.\r\n   * @returns {(Promise<GetVehicleTypesForMakeResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleTypesForMake(\r\n    makeName: string\r\n  ): Promise<GetVehicleTypesForMakeResponse | Error> {\r\n    const action = 'GetVehicleTypesForMake';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeName = getTypeof(makeName);\r\n    if (typeofMakeName !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeName\" argument is required and must be of type string, got: ` +\r\n            `<${typeofMakeName}> ${makeName}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeName}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMake\r\n * @alias GetVehicleTypesForMakeResults\r\n */\r\nexport type GetVehicleTypesForMakeResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleTypesForMake API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMake\r\n * @alias GetVehicleTypesForMakeResponse\r\n */\r\nexport type GetVehicleTypesForMakeResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleTypesForMakeResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleTypesForMakeId\r\n * @category Actions\r\n * @description GetVehicleTypesForMakeId NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleTypesForMakeId](module-api_actions_GetVehicleTypesForMakeId.GetVehicleTypesForMakeId.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleTypesForMakeIdResponse](#GetVehicleTypesForMakeIdResponse)\r\n * > - Type: [GetVehicleTypesForMakeIdResults](#GetVehicleTypesForMakeIdResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleTypesForMakeId extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This returns all the Vehicle Types in the vPIC dataset for a specified Make and\r\n   * whose ID equals the make ID in the vPIC Dataset.\r\n   *\r\n   * @async\r\n   * @param {number} makeID - Vehicle make ID.\r\n   * @returns {(Promise<GetVehicleTypesForMakeIdResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleTypesForMakeId(\r\n    makeID: number\r\n  ): Promise<GetVehicleTypesForMakeIdResponse | Error> {\r\n    const action = 'GetVehicleTypesForMakeId';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofMakeId = getTypeof(makeID);\r\n    if (typeofMakeId !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"makeId\" argument is required and must be of type number, got: ` +\r\n            `<${typeofMakeId}> ${makeID}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${makeID}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleTypesForMakeIdResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMakeId\r\n * @alias GetVehicleTypesForMakeIdResults\r\n */\r\nexport type GetVehicleTypesForMakeIdResults = {\r\n  MakeId: number;\r\n  MakeName: string;\r\n  VehicleTypeId: number;\r\n  VehicleTypeName: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleTypesForMakeId API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleTypesForMakeId\r\n * @alias GetVehicleTypesForMakeIdResponse\r\n */\r\nexport type GetVehicleTypesForMakeIdResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleTypesForMakeIdResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleVariableList\r\n * @category Actions\r\n * @description GetVehicleVariableList NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleVariableList](module-api_actions_GetVehicleVariableList.GetVehicleVariableList.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleVariableListResponse](#GetVehicleVariableListResponse)\r\n * > - Type: [GetVehicleVariableListResults](#GetVehicleVariableListResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleVariableList extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the Vehicle related variables that are in the vPIC dataset.\r\n   * - Information on the name, description and the type of the variable is provided.\r\n   *\r\n   * @async\r\n   * @returns {(Promise<GetVehicleVariableListResponse | Error>)} Api Response object.\r\n   */\r\n  public async GetVehicleVariableList(): Promise<\r\n    GetVehicleVariableListResponse | Error\r\n  > {\r\n    const action = 'GetVehicleVariableList';\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleVariableListResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableList\r\n * @alias GetVehicleVariableListResults\r\n */\r\nexport type GetVehicleVariableListResults = {\r\n  DataType: string;\r\n  Description: string;\r\n  ID: number;\r\n  Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleVariableList API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableList\r\n * @alias GetVehicleVariableListResponse\r\n */\r\nexport type GetVehicleVariableListResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleVariableListResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetVehicleVariableValuesList\r\n * @category Actions\r\n * @description GetVehicleVariableValuesList NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetVehicleVariableValuesList](module-api_actions_GetVehicleVariableValuesList.GetVehicleVariableValuesList.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetVehicleVariableValuesListResponse](#GetVehicleVariableValuesListResponse)\r\n * > - Type: [GetVehicleVariableValuesListResults](#GetVehicleVariableValuesListResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetVehicleVariableValuesList extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * This provides a list of all the accepted values for a given variable that are stored in the vPIC dataset.\r\n   *\r\n   * This applies to only \"Look up\" type of variables.\r\n   * - `variableValue` can either be a:\r\n   *   - Variable Name (\"battery type\" in first example, please use full name, not just part of it),\r\n   *   - or Variable ID (number).\r\n   *\r\n   * @async\r\n   * @param {string|number} variableValue - The variable you want to get a values list of.\r\n   * @returns {(Promise<GetVehicleVariableValuesListResponse | Error>)} Api Response object.\r\n   */\r\n  async GetVehicleVariableValuesList(\r\n    variableValue: string | number\r\n  ): Promise<GetVehicleVariableValuesListResponse | Error> {\r\n    const action = 'GetVehicleVariableValuesList';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofVariableValue = getTypeof(variableValue);\r\n    if (typeofVariableValue !== 'string' && typeofVariableValue !== 'number') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"variableValue\" argument is required and must be of type string or number, got: ` +\r\n            `<${typeofVariableValue}> ${variableValue}`\r\n        )\r\n      );\r\n    }\r\n    /* Encode to a valid URI string (space chars, etc.) if variableValue is a string*/\r\n    if (typeofVariableValue === 'string') {\r\n      variableValue = encodeURI(variableValue as string);\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${variableValue}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetVehicleVariableValuesListResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableValuesList\r\n * @alias GetVehicleVariableValuesListResults\r\n */\r\nexport type GetVehicleVariableValuesListResults = {\r\n  ElementName: string;\r\n  Id: number;\r\n  Name: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetVehicleVariableValuesList API Action.\r\n *\r\n * @memberof module:api/actions/GetVehicleVariableValuesList\r\n * @alias GetVehicleVariableValuesListResponse\r\n */\r\nexport type GetVehicleVariableValuesListResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetVehicleVariableValuesListResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n","/**\r\n * @module api/actions/GetWMIsForManufacturer\r\n * @category Actions\r\n * @description GetWMIsForManufacturer NHSTA Api Action.\r\n *\r\n * > **Module Exports**:\r\n * > - Class: [GetWMIsForManufacturer](module-api_actions_GetWMIsForManufacturer.GetWMIsForManufacturer.html)\r\n * >\r\n * > **Types**\r\n * > - Type: [GetWMIsForManufacturerResponse](#GetWMIsForManufacturerResponse)\r\n * > - Type: [GetWMIsForManufacturerResults](#GetWMIsForManufacturerResults)\r\n *\r\n */\r\n\r\n/* Parent Class and Fetch Types */\r\nimport {\r\n  Fetch /* Class */,\r\n  FetchConfig /* Type */,\r\n  FetchResponse /* Type */\r\n} from '../Fetch';\r\n\r\n/* Utility Functions */\r\nimport { getTypeof } from '../../utils';\r\n\r\n/**\r\n * Implemented by [NHTSA](module-api_NHTSA-NHTSA.html).\r\n *\r\n * Extends [api/Fetch.Fetch](module-api_Fetch.Fetch.html).\r\n *\r\n * @category Actions\r\n * @param {FetchConfig} [userConfig] - User configuration options to construct the class with.\r\n */\r\nexport class GetWMIsForManufacturer extends Fetch {\r\n  constructor(userConfig?: FetchConfig) {\r\n    super(userConfig);\r\n  }\r\n\r\n  /**\r\n   * Provides information on the World Manufacturer Identifier (WMI) for a specified `manufacturer`.\r\n   * - Only WMIs registered in vPICList are displayed.\r\n   * - `manufacturer` can be a partial name, or a full name for more specificity\r\n   *   (e.g., \"Merc\", \"Mercedes Benz\", etc.).\r\n   *\r\n   * @async\r\n   * @param {string|number} manufacturer - Manufacturer Name.\r\n   * @returns {(Promise<GetWMIsForManufacturerResponse | Error>)} Api Response object.\r\n   */\r\n  async GetWMIsForManufacturer(\r\n    manufacturer: string\r\n  ): Promise<GetWMIsForManufacturerResponse | Error> {\r\n    const action = 'GetWMIsForManufacturer';\r\n\r\n    /* Runtime typechecking */\r\n    const typeofManufacturer = getTypeof(manufacturer);\r\n    if (typeofManufacturer !== 'string') {\r\n      return Promise.reject(\r\n        new Error(\r\n          `${action}, \"manufacturer\" argument is required and must be of type string, got: ` +\r\n            `<${typeofManufacturer}> ${manufacturer}`\r\n        )\r\n      );\r\n    }\r\n\r\n    /* Build the 'default' query string to be appended to the URL*/\r\n    const queryString = await this.buildQueryString().catch(err =>\r\n      Promise.reject(\r\n        new Error(`${action}, Error building query string: ${err}`)\r\n      )\r\n    );\r\n\r\n    /* Build the final request URL*/\r\n    const url = `${this.baseUrl}/${action}/${manufacturer}${queryString}`;\r\n\r\n    /* Return the result */\r\n    return await this.get(url)\r\n      .then(response => response)\r\n      .catch(err =>\r\n        Promise.reject(new Error(`${action}, Fetch.get() error: ${err}`))\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Type representing the structure of objects found in the '{@link GetWMIsForManufacturerResponse}.Results' array.\r\n *\r\n * @memberof module:api/actions/GetWMIsForManufacturer\r\n * @alias GetWMIsForManufacturerResults\r\n */\r\nexport type GetWMIsForManufacturerResults = {\r\n  Country: string;\r\n  CreatedOn: string;\r\n  DateAvailableToPublic: string;\r\n  Id: number;\r\n  Name: string;\r\n  UpdatedOn: string;\r\n  VehicleType: string;\r\n  WMI: string;\r\n};\r\n\r\n/**\r\n * Type representing the complete response returned by the GetWMIsForManufacturer API Action.\r\n *\r\n * @memberof module:api/actions/GetWMIsForManufacturer\r\n * @alias GetWMIsForManufacturerResponse\r\n */\r\nexport type GetWMIsForManufacturerResponse = {\r\n  /** A count of the items returned in the Results array. */\r\n  Count: number;\r\n  /** A message describing the Results array. */\r\n  Message: string;\r\n  /** Search terms (VIN, WMI, manufacturer, etc.) used in the request URL. */\r\n  SearchCriteria: string;\r\n  /** The search results returned by the NHSTA API request. */\r\n  Results: Array<GetWMIsForManufacturerResults>;\r\n  /** [Fetch API Response](https://github.github.io/fetch/#Response) properties. */\r\n  FetchResponse: FetchResponse;\r\n};\r\n"],"names":["Fetch","getTypeof"],"mappings":"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"}