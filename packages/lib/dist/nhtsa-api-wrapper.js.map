{"version":3,"file":"nhtsa-api-wrapper.js","sources":["../src/utils/argHandler.ts","../src/utils/errorHandler.ts","../src/utils/getTypeof.ts","../src/utils/isValidVin.ts","../src/utils/useFetch.ts","../src/constants.ts","../src/utils/useQueryString.ts","../src/api/endpoints/DecodeVin.ts","../src/api/endpoints/DecodeVinExtended.ts","../src/api/endpoints/DecodeVinValues.ts","../src/api/endpoints/DecodeVinValuesBatch.ts","../src/api/endpoints/DecodeVinValuesExtended.ts","../src/api/endpoints/DecodeWMI.ts","../src/api/endpoints/GetAllMakes.ts","../src/api/endpoints/GetAllManufacturers.ts","../src/api/endpoints/GetCanadianVehicleSpecifications.ts","../src/api/endpoints/GetEquipmentPlantCodes.ts","../src/api/endpoints/GetMakeForManufacturer.ts","../src/api/endpoints/GetMakesForManufacturerAndYear.ts","../src/api/endpoints/GetMakesForVehicleType.ts","../src/api/endpoints/GetManufacturerDetails.ts","../src/api/endpoints/GetModelsForMake.ts","../src/api/endpoints/GetModelsForMakeId.ts","../src/api/endpoints/GetModelsForMakeIdYear.ts","../src/api/endpoints/GetModelsForMakeYear.ts","../src/api/endpoints/GetParts.ts","../src/api/endpoints/GetVehicleTypesForMake.ts","../src/api/endpoints/GetVehicleTypesForMakeId.ts","../src/api/endpoints/GetVehicleVariableList.ts","../src/api/endpoints/GetVehicleVariableValuesList.ts","../src/api/endpoints/GetWMIsForManufacturer.ts"],"sourcesContent":["import { getTypeof } from '../utils'\nimport type { AtLeastOne } from '../types'\n\nexport type IArgToValidate = {\n  name: string\n  value: unknown\n} & AtLeastOne<{\n  required?: boolean\n  types?: string[]\n}>\n\nexport const catchInvalidArguments = ({\n  args,\n  mode = 'default',\n}: {\n  args: IArgToValidate[]\n  mode?: 'default' | 'atLeast'\n}) => {\n  if (getTypeof(args) !== 'array' && !args.length) {\n    throw Error(\n      `catchInvalidArguments requires \"args\" that must be an array of IArgToValidate objects`\n    )\n  }\n\n  if (mode === 'default') {\n    args.forEach((arg) => {\n      validateArgument(arg)\n    })\n  } else if (mode === 'atLeast') {\n    const providedArg = args.find((arg) => !!arg.value)\n    if (!providedArg) {\n      throw Error(\n        `must provide at least one of the following arguments: ${args\n          .map((arg) => arg.name)\n          .join(', ')}`\n      )\n    }\n  }\n}\n\nexport const validateArgument = ({\n  name,\n  value,\n  required,\n  types,\n  mode = 'error',\n}: IArgToValidate & { mode?: 'error' | 'boolean' }): boolean => {\n  /* fast-fail if required args are not provided*/\n  if (getTypeof(name) !== 'string') {\n    throw Error(`'name', is required and must be of type string`)\n  }\n\n  const typeofValue = getTypeof(value)\n  let error = ''\n  const errorPrepend = `error validating argument named \"${name}\",`\n  const errorAppend = `received value: ${value} - of type: <${typeofValue}>`\n\n  if (types && getTypeof(types) !== 'array' && !types.length) {\n    throw Error(`${errorPrepend} 'types' must be an array of strings`)\n  }\n\n  /* ex: if types = ['string', 'number'] then you'll get '<string | number>' */\n  const joinedTypes = types ? `<${types.join(' | ')}>` : ''\n\n  /* argument validation logic */\n  if (required && !types) {\n    if (!value) {\n      error = `${errorPrepend} is required, ${errorAppend}`\n    }\n  } else if (types && !required) {\n    /* if value is not defined and is not required then there should be no need to validate the type and throw error */\n    if (value && !types.includes(typeofValue)) {\n      error = `${errorPrepend} must be of type(s) ${joinedTypes}, ${errorAppend}`\n    }\n  } else if (required && types) {\n    if (!value || !types.includes(typeofValue)) {\n      error = `${errorPrepend} is required and must be of type(s) ${joinedTypes}, ${errorAppend}`\n    }\n  }\n\n  if (error.length) {\n    if (mode === 'boolean') return false\n    if (mode === 'error') throw Error(error)\n  }\n\n  return true\n}\n","import { getTypeof } from '.'\n\nexport const isError = (error: unknown): boolean => {\n  return getTypeof(error) === 'error'\n}\n\nexport const handleError = (error: unknown): Error => {\n  let message = 'an unknown error occurred.'\n  if (isError(error)) {\n    return error as Error\n  }\n  if (getTypeof(error) === 'string') {\n    message = error as string\n  }\n  return Error(message)\n}\n\nexport const rejectWithError = async (error: unknown): Promise<never> => {\n  if (!isError(error)) {\n    error = handleError(error)\n  }\n  return Promise.reject(error)\n}\n","/**\n * @module utils/getTypeof\n * @category Utils\n */\n\n/**\n * Gets type of `value` using `Object.prototype.toString.call(value)`.\n *\n * Why? Because `typeof` is not reliable for all types of values.\n *\n * Object.prototype.toString gives more accurate results in the case someone has used an object wrapper\n * for primitive data types such as `new Number()` or `new String()`.\n * It will also accurately recognize any Error types, Error, TypeError, etc., as 'error'.\n *\n * @param {any} value - Any kind of value (string, object, array, function, etc).\n *\n * @returns {string} - Type of value, normalized to a lowercase string.\n */\nexport const getTypeof = (value: unknown): string => {\n  const toString: string = Object.prototype.toString\n    .call(value)\n    .toLowerCase() /* ex: => '[object string]' or '[object array], etc. */\n\n  /* return only the type, ex: 'string' or 'array' */\n  return toString.slice(8, toString.length - 1)\n}\n","/**\n * @module utils/isValidVin\n * @category Utils\n */\n\n/*\n * There will need to be some way to translate vin digits that are alphabetic\n * into their number value in the VIN algorithm transliteration table.\n * Later, during the creation of the checksum variable, those digits will be\n * multiplied against their corresponding weight (by index) in the WEIGHTS_ARRAY.\n * This transliteration table is a key part of the VIN validation algorithm.\n */\nconst TRANSLITERATION_TABLE: Record<string, number> = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4,\n  E: 5,\n  F: 6,\n  G: 7,\n  H: 8,\n  J: 1,\n  K: 2,\n  L: 3,\n  M: 4,\n  N: 5,\n  P: 7,\n  R: 9,\n  S: 2,\n  T: 3,\n  U: 4,\n  V: 5,\n  W: 6,\n  X: 7,\n  Y: 8,\n  Z: 9,\n}\n\n/*\n * Later, during the creation of the 'checksum' variable, these weights will be\n * multiplied by the value of their mirrored index vin digits.\n * The array index of each weight corresponds to the same index of each\n * digit in the 'vin'.\n */\nconst WEIGHTS_ARRAY: number[] = [\n  8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2,\n]\n\n/**\n * Provides **offline** validation of Vehicle Identification Numbers (VINs) using the\n * [VIN Check Algorithm](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).\n *\n * @param {string} vin - Vehicle Identification Number.\n * @returns {boolean} True for a valid VIN, false for an invalid VIN.\n *\n * @example <caption>When loaded from the browser via html script tags</caption>\n * // <script type=\"text/javascript\" src=\"https://www.npmjs.com/package/@shaggytools/nhtsa-api-wrapper\"></script>\n * const isValid = NHTSA.isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n * @example <caption>When loaded as a module</caption>\n * import { isValidVin } from '@shaggytools/nhtsa-api-wrapper'\n * const isValid = isValidVin('3VWD07AJ5EM388202')\n * console.log(isValid) // true\n *\n */\nexport function isValidVin(vin: string): boolean {\n  /* A valid VIN must be a string and is always exactly 17 digits */\n  if (typeof vin !== 'string' || vin.length != 17) {\n    return false\n  }\n\n  /* Normalize the vin to all uppercase letters */\n  vin = vin.toUpperCase()\n\n  /* split the vin digits into an array */\n  const vinArray: string[] = vin.split('')\n\n  /* checkDigit will be tested against the checkSum later */\n  const checkDigit: string = vinArray[8]\n\n  /*\n   * In a valid VIN, the checkDigit can either be:\n   * a number, 0-9 inclusive OR the character 'X'\n   */\n  if (isNaN(parseInt(checkDigit)) && checkDigit !== 'X') {\n    return false\n  }\n\n  /*\n   * The checkValue must be a digit and 'X' is the only valid alphabetic check value.\n   * As per the algorithm, a checkDigit of 'X' is equal to a checkValue of `10` and needs\n   * to be converted as such.\n   */\n  const checkValue: number = checkDigit === 'X' ? 10 : parseInt(checkDigit)\n\n  /*\n   * Maps the vinArray and converts any values (digits) that are alphabetic,\n   * into numbers, using the TRANSLITERATION_TABLE.\n   * Then these numbers are multiplied against their corresponding weight\n   * in the WEIGHTS_ARRAY, matched by index position.\n   * All 17 of those digitValues are then added together and divided by 11.\n   * The remainder, or % modulo, of that division will be the final 'checksum'.\n   */\n  const checksum: number =\n    vinArray\n      .map((digit: string, index: number) => {\n        let digitValue: number\n        /* Use the transliteration table to convert any Not a Number(NaN) values to numbers */\n        isNaN(parseInt(digit))\n          ? (digitValue = TRANSLITERATION_TABLE[digit])\n          : (digitValue = parseInt(digit))\n\n        /* Convert the digitValue to a weighted number corresponding to it's position, by index, in the weightsArray. */\n        const weight: number = WEIGHTS_ARRAY[index]\n\n        /* The final step for each digit is to multiply the digit by it's corresponding weight */\n        return digitValue * weight\n      })\n      /* Finally, get the sum of all digits and divide by 11, the remainder of that operation is the checksum */\n      .reduce((acc, currValue) => acc + currValue, 0) % 11\n\n  /*\n   * The checksum is compared against the checkValue we set earlier (the 9th digit of the VIN)\n   * As per the algorithm, if they are equal to each other, then the VIN must be valid and\n   * we return true, otherwise the VIN is invalid and we return false.\n   */\n  return checksum === checkValue\n}\n","import type { NhtsaResponse } from '../api/types'\nimport { rejectWithError } from '.'\n\nexport const useFetch = () => {\n  const get = async <T>(\n    url: string,\n    options: RequestInit = {}\n  ): Promise<NhtsaResponse<T>> => {\n    const nhtsaResponse: NhtsaResponse<T> = await fetch(url, options)\n      .then(async (response) => {\n        if (!response.ok) {\n          throw Error(`${response.status} ${response.url}`)\n        }\n\n        const jsonTypes = ['application/json', 'text/json']\n        const contentType = response.headers.get('content-type')\n        const isJson = jsonTypes.some((type) => contentType?.includes(type))\n\n        if (!isJson) {\n          throw Error(\n            `API response is not in JSON format; got ` +\n              `content-type: ${contentType}, responseStatus: ${response.status}}, responseUrl: ${response.url}`\n          )\n        }\n\n        const data: NhtsaResponse<T> = await response.json()\n\n        if (!data) {\n          throw Error(\n            `API responded but returned no data; got ` +\n              `content-type: ${contentType}, responseStatus: ${response.status}}, responseUrl: ${response.url}`\n          )\n        }\n\n        return data\n      })\n      .catch((error: Error) => {\n        error.message = `API error fetching data: ${error.message}`\n        return rejectWithError(error)\n      })\n\n    /* Return the completed ApiResponse */\n    return nhtsaResponse\n  }\n\n  const post = async <T>(\n    url: string,\n    options: RequestInit = {}\n  ): Promise<NhtsaResponse<T>> => {\n    return await get(url, {\n      ...options,\n      method: 'POST',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n    })\n  }\n\n  return {\n    get,\n    post,\n  }\n}\n","export const NHTSA_BASE_URL = 'https://vpic.nhtsa.dot.gov/api/vehicles'\nexport const NHTSA_RESPONSE_FORMAT = 'json'\n","/**\n * @module utils/createQueryString\n * @category Internal Utility Functions\n */\n\nimport { NHTSA_RESPONSE_FORMAT } from '../constants'\nimport { getTypeof, validateArgument } from '.'\n\n/** Valid URI component types */\nexport type QueryStringTypes = string | number | boolean\n\n/** Object containing Key:Value pairs to build the query string with */\nexport type QueryStringParams = Record<string, QueryStringTypes>\n\n/** Structure of the object returned by encodeQueryStringParams() */\nexport type QueryStringParamsEncoded<T> = { [key in keyof T]: string }\n\n/**\n * Utility function to generate a query string conforming to URI component standards.\n * Takes an an optional object of search parameters and returns an encoded query string.\n * The paramater { format: 'json' } is hardcoded and cannot be overridden,\n * no support for CSV or XML formats at this time. i.e. default string will be \"?format=json\".\n * - If first argument is not an object then it will be ignored.\n * - The function ignores parameters that are not strings, numbers, or booleans, and also ignores empty strings by default.\n * - If second argument `allowEmptyStringValues` is set to `true`,\n *   the function will include keys with empty string values, e.g. 'emptyKey='\n *\n * @param {QueryStringParams} params - An object of search parameters to be converted to a query string.\n * @param {boolean} [allowEmptyStringValues=false] - Set to `true` to include keys with empty string values, e.g. 'emptyKey='.\n * @returns {string} - A query string of search parameters for use in a final fetch URL.\n */\nexport const createQueryString = (\n  params?: QueryStringParams,\n  allowEmptyStringValues = false\n): string => {\n  /* Static (hardcoded) params are 'format=json' */\n  const staticParams = { format: NHTSA_RESPONSE_FORMAT }\n\n  /* Merge with valid user params but override with static params */\n  const _params =\n    getTypeof(params) === 'object'\n      ? { ...params, ...staticParams }\n      : staticParams\n\n  /* Create query string from params */\n  const queryString =\n    '?' +\n    Object.entries(encodeQueryStringParams(_params))\n      .map(([key, value], index, array) => {\n        return value.length || (allowEmptyStringValues && value === '')\n          ? `${key}=${value}${index < array.length - 1 ? '&' : ''}`\n          : ''\n      })\n      .join('')\n\n  /* default: ?format=json */\n  return queryString\n}\n\n/**\n * Utility function to perform URI component encoding on values in an object, for use in URL query strings.\n *\n * - Will filter out invalid parameters with values that are not strings, numbers, or booleans.\n * - Returns an object of valid URI encoded parameters with same keys as the original object.\n *\n * In it's current implementation, this function assumes that invalid types have already been filtered out, and that all values are valid.\n * It filters out invalid key/values so that encodeURIComponent() does not throw an error.\n *\n * The function return is typed with the assumption that all values are valid and will not be filtered out,\n * optional values will still show possibly undefined.\n * - If you need to be sure that all keys are present in the returned object, you can use the `validateArgument()` function\n *   to check the type of each value before passing it to this function.\n *\n * @param {QueryStringParams} params - An object of search parameters to be encoded.\n * @returns {QueryStringParamsEncoded} - A new object of same keys as the original object with values converted to URI component strings.\n *   Any keys with values not a string, number, or boolean are filtered out of final object.\n */\nexport const encodeQueryStringParams = <T extends QueryStringParams>(\n  params: T\n): QueryStringParamsEncoded<T> => {\n  return Object.entries(params)\n    .filter(([key, value]) =>\n      validateArgument({\n        name: key,\n        types: ['string', 'number', 'boolean'],\n        value,\n        mode: 'boolean',\n      })\n    )\n    .reduce((acc, [key, value]) => {\n      /* can expect only strings, numbers, and booleans after filtering */\n      acc[key as keyof T] = encodeURIComponent(value)\n      return acc\n    }, {} as QueryStringParamsEncoded<T>)\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeVin will decode the VIN and the decoded output will be made available in the format of Key-value pairs.\n *\n * - In the returned `Results` object:\n *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value\n *   - In case of text variables, the ValueID is not applicable\n * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n *   or older (pre-1980), model year ranges\n *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding\n * - This endpoint also supports partial VIN decoding (VINs that are less than 17 characters)\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *   - Ex: 5UXWX7C5*BA\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinResults>>)} - Api Response object\n */\n\nexport const DecodeVin = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinResults>> => {\n  const endpointName = 'DecodeVin'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${vin}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeVin endpoint\n *\n * @alias DecodeVinResults\n */\nexport type DecodeVinResults = {\n  Value: string | null\n  ValueId: string | null\n  Variable: string\n  VariableId: number\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeVinExtended is exactly like the DecodeVin endpoint but provides additional information on variables\n * related to other NHTSA programs like\n * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n * This will decode the VIN and the decoded output will be made available in the format of Key-value pairs\n *\n * - In the returned `Results` object:\n *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value\n *   - In case of text variables, the ValueID is not applicable\n * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n *   or older (pre-1980), model year ranges\n *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding\n * - This endpoint also supports partial VIN decoding (VINs that are less than 17 characters)\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *   - Ex: 5UXWX7C5*BA\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinExtendedResults>>)} - Api Response object\n */\n\nexport const DecodeVinExtended = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinExtendedResults>> => {\n  const endpointName = 'DecodeVinExtended'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${vin}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeVinExtended endpoint\n *\n * @alias DecodeVinExtendedResults\n */\nexport type DecodeVinExtendedResults = {\n  Value: string | null\n  ValueId: string | null\n  Variable: string\n  VariableId: number\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeVinValues will decode the VIN with the Results returned in a _flat file_ format.\n *\n * - The `Results` will be made available in a flat file format of a single object containing\n *   'key<string>: value<string>' results\n * - Providing params.modelYear allows for the decoding to specifically be done in the current,\n *   or older (pre-1980), model year ranges\n *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding\n * - This endpoint also supports partial VIN decoding (VINs that are less than 17 characters)\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *   - Ex: 5UXWX7C5*BA\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinValuesResults>>)} Api Response object\n */\n\nexport const DecodeVinValues = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinValuesResults>> => {\n  const endpointName = 'DecodeVinValues'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${vin}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeVinValues endpoint\n *\n * @alias DecodeVinValuesResults\n */\nexport type DecodeVinValuesResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL, NHTSA_RESPONSE_FORMAT } from '../../constants'\n/* Utility Functions */\nimport { catchInvalidArguments, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeVinValuesBatch decodes a batch of VINs that are submitted in a standardized format and returns multiple decodes in a flat format.\n * For this particular API you just have to provide a string of VINs, `inputString`, that are separated by a “;”.\n * You can also indicate the model year after the vin, preceded by a “,”\n *\n * - The `Results` will be made available in a flat file format of a single object containing\n *   'key<string>: value<string>' results\n *\n * The `inputString` parameter should be in the following format\n * - ex: '5UXWX7C5*BA,2011; 5YJSA3DS*EF '\n * - no modelYear: `vin; vin; vin`\n * - with modelYear`vin, modelYear; vin, modelYear; vin, modelYear`\n * - mix of with/without modelYear`vin; vin, modelYear`\n * - vin and modelYear are placeholders for real values in these examples\n *\n *  Max 50 VINs per batch\n *\n * @async\n * @param {string} inputString - A string of Vehicle Identification Numbers (full or partial) following the format listed in the description\n * @returns {(Promise<DecodeVINValuesBatchResponse>)} - Api Response object\n */\n\nexport const DecodeVinValuesBatch = async (\n  inputString: string\n): Promise<NhtsaResponse<DecodeVinValuesBatchResults>> => {\n  const endpointName = 'DecodeVinValuesBatch'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'inputString',\n        value: inputString,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const url = `${NHTSA_BASE_URL}/${endpointName}/`\n    const body = encodeURI(\n      `DATA=${inputString}&format=${NHTSA_RESPONSE_FORMAT}`\n    )\n\n    return await useFetch().post(url, { body })\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeVinValuesBatch endpoint\n *\n * @alias DecodeVINValuesBatchResults\n */\nexport type DecodeVinValuesBatchResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeVinValuesExtended is exactly like the DecodeVinValues endpoint (flat format Results) but provides additional information\n * on variables related to other NHTSA programs like\n * [NCSA](https://www.nhtsa.gov/research-data/national-center-statistics-and-analysis-ncsa), etc.\n * The results will be made available in a flat file format of a single object containing 'key<string>: value<string>' results.\n *\n * - In the returned `Results` object:\n *   - The IDs (VariableID and ValueID) represent the unique ID associated with the Variable/Value\n *   - In case of text variables, the ValueID is not applicable\n * - Providing `params.modelYear` allows for the decoding to specifically be done in the current,\n *   or older (pre-1980), model year ranges\n *   - It is recommended to always provide `params.modelYear` if the model year is known at the time of decoding\n * - This endpoint also supports partial VIN decoding (VINs that are less than 17 characters)\n *   - In this case, the VIN will be decoded partially with the available characters\n *   - In case of partial VINs, a \"*\" could be used to indicate the unavailable characters\n *   - The 9th digit is not necessary\n *   - Ex: 5UXWX7C5*BA\n *\n * @async\n * @param {string} vin - Vehicle Identification Number (full or partial)\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.modelYear] - Optional Model Year search parameter\n * @returns {(Promise<NhtsaResponse<DecodeVinExtendedResults>>)} - Api Response object\n */\n\nexport const DecodeVinValuesExtended = async (\n  vin: string,\n  params?: {\n    modelYear?: string | number\n  }\n): Promise<NhtsaResponse<DecodeVinValuesExtendedResults>> => {\n  const endpointName = 'DecodeVinValuesExtended'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'vin', value: vin, required: true, types: ['string'] },\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'modelYear',\n        value: params?.modelYear,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${vin}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeVinValuesExtended endpoint\n *\n * @alias DecodeVinValuesExtendedResults\n */\nexport type DecodeVinValuesExtendedResults = {\n  ABS: string\n  ActiveSafetySysNote: string\n  AdaptiveCruiseControl: string\n  AdaptiveDrivingBeam: string\n  AdaptiveHeadlights: string\n  AdditionalErrorText: string\n  AirBagLocCurtain: string\n  AirBagLocFront: string\n  AirBagLocKnee: string\n  AirBagLocSeatCushion: string\n  AirBagLocSide: string\n  AutoReverseSystem: string\n  AutomaticPedestrianAlertingSound: string\n  AxleConfiguration: string\n  Axles: string\n  BasePrice: string\n  BatteryA: string\n  BatteryA_to: string\n  BatteryCells: string\n  BatteryInfo: string\n  BatteryKWh: string\n  BatteryKWh_to: string\n  BatteryModules: string\n  BatteryPacks: string\n  BatteryType: string\n  BatteryV: string\n  BatteryV_to: string\n  BedLengthIN: string\n  BedType: string\n  BlindSpotIntervention: string\n  BlindSpotMon: string\n  BodyCabType: string\n  BodyClass: string\n  BrakeSystemDesc: string\n  BrakeSystemType: string\n  BusFloorConfigType: string\n  BusLength: string\n  BusType: string\n  CAN_AACN: string\n  CIB: string\n  CashForClunkers: string\n  ChargerLevel: string\n  ChargerPowerKW: string\n  CoolingType: string\n  CurbWeightLB: string\n  CustomMotorcycleType: string\n  DaytimeRunningLight: string\n  DestinationMarket: string\n  DisplacementCC: string\n  DisplacementCI: string\n  DisplacementL: string\n  Doors: string\n  DriveType: string\n  DriverAssist: string\n  DynamicBrakeSupport: string\n  EDR: string\n  ESC: string\n  EVDriveUnit: string\n  ElectrificationLevel: string\n  EngineConfiguration: string\n  EngineCycles: string\n  EngineCylinders: string\n  EngineHP: string\n  EngineHP_to: string\n  EngineKW: string\n  EngineManufacturer: string\n  EngineModel: string\n  EntertainmentSystem: string\n  ErrorCode: string\n  ErrorText: string\n  ForwardCollisionWarning: string\n  FuelInjectionType: string\n  FuelTypePrimary: string\n  FuelTypeSecondary: string\n  GCWR: string\n  GCWR_to: string\n  GVWR: string\n  GVWR_to: string\n  KeylessIgnition: string\n  LaneCenteringAssistance: string\n  LaneDepartureWarning: string\n  LaneKeepSystem: string\n  LowerBeamHeadlampLightSource: string\n  Make: string\n  MakeID: string\n  Manufacturer: string\n  ManufacturerId: string\n  Model: string\n  ModelID: string\n  ModelYear: string\n  MotorcycleChassisType: string\n  MotorcycleSuspensionType: string\n  NCSABodyType: string\n  NCSAMake: string\n  NCSAMapExcApprovedBy: string\n  NCSAMapExcApprovedOn: string\n  NCSAMappingException: string\n  NCSAModel: string\n  NCSANote: string\n  NonLandUse: string\n  Note: string\n  OtherBusInfo: string\n  OtherEngineInfo: string\n  OtherMotorcycleInfo: string\n  OtherRestraintSystemInfo: string\n  OtherTrailerInfo: string\n  ParkAssist: string\n  PedestrianAutomaticEmergencyBraking: string\n  PlantCity: string\n  PlantCompanyName: string\n  PlantCountry: string\n  PlantState: string\n  PossibleValues: string\n  Pretensioner: string\n  RearAutomaticEmergencyBraking: string\n  RearCrossTrafficAlert: string\n  RearVisibilitySystem: string\n  SAEAutomationLevel: string\n  SAEAutomationLevel_to: string\n  SeatBeltsAll: string\n  SeatRows: string\n  Seats: string\n  SemiautomaticHeadlampBeamSwitching: string\n  Series: string\n  Series2: string\n  SteeringLocation: string\n  SuggestedVIN: string\n  TPMS: string\n  TopSpeedMPH: string\n  TrackWidth: string\n  TractionControl: string\n  TrailerBodyType: string\n  TrailerLength: string\n  TrailerType: string\n  TransmissionSpeeds: string\n  TransmissionStyle: string\n  Trim: string\n  Trim2: string\n  Turbo: string\n  VIN: string\n  ValveTrainDesign: string\n  VehicleDescriptor: string\n  VehicleType: string\n  WheelBaseLong: string\n  WheelBaseShort: string\n  WheelBaseType: string\n  WheelSizeFront: string\n  WheelSizeRear: string\n  Wheels: string\n  Windows: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * DecodeWMI provides information on the World Manufacturer Identifier for a specific WMI code.\n * See: [WMI Codes](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/World_Manufacturer_Identifier_(WMI))\n * - `WMI` may be put in as either 3 characters representing VIN position 1-3 or 6 characters\n *   representing VIN positions 1-3 & 12-14. Examples: \"JTD\" \"1T9131\"\n *\n * @async\n * @param {string} WMI - World Manufacturer Identifier\n * @returns {(Promise<NhtsaResponse<DecodeWMIResults>>)} - Api Response object\n */\n\nexport const DecodeWMI = async (\n  WMI: string\n): Promise<NhtsaResponse<DecodeWMIResults>> => {\n  const endpointName = 'DecodeWMI'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'WMI',\n        value: WMI,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${WMI}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for DecodeWMI endpoint\n *\n * @alias DecodeWMIResults\n */\nexport type DecodeWMIResults = {\n  CommonName: string\n  CreatedOn: string\n  DateAvailableToPublic: string\n  Make: string\n  ManufacturerName: string\n  ParentCompanyName: string\n  URL: string\n  UpdatedOn: string | null\n  VehicleType: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport { createQueryString, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { NhtsaResponse } from '../../types'\n\n/**\n * GetAllMakes endpoint provides a list of all the Makes available in the vPIC Dataset.\n * - FYI there are over 10,000 registered makes in the database!\n *\n * @async\n * @returns {(Promise<NhtsaResponse<GetAllMakesResults>>)} - Api Response object\n */\n\nexport const GetAllMakes = async (): Promise<\n  NhtsaResponse<GetAllMakesResults>\n> => {\n  const endpointName = 'GetAllMakes'\n\n  try {\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetAllMakes endpoint\n *\n * @alias GetAllMakesResults\n */\nexport type GetAllMakesResults = {\n  Make_ID: number\n  Make_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetAllManufacturers provides a list of all the Manufacturers available in vPIC Dataset.\n *\n * - `params.manufacturerType` allows the user to filter the list based on manufacturer type\n *   ('Incomplete Vehicles', 'Completed Vehicle Manufacturer', 'Incomplete Vehicle Manufacturer',\n *   'Intermediate Manufacturer', 'Final-Stage Manufacturer', 'Alterer', or any partial match of those strings)\n * - You can get a list of all manufacturer types via `GetVehicleVariableValuesList` endpoint\n *\n * Results are provided in pages of 100 items.\n * - Provide `params.page` to specify (n)th page of results\n *\n * @async\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {string} [params.manufacturerType] - See method description\n * @param {(string|number)} [params.page] - Specify the page number (results returned 100 at a time)\n * @returns {(Promise<NhtsaResponse<GetAllManufacturersResults>>)} - Api Response object\n */\n\nexport const GetAllManufacturers = async (params?: {\n  manufacturerType?: string\n  page?: string | number\n}): Promise<NhtsaResponse<GetAllManufacturersResults>> => {\n  const endpointName = 'GetAllManufacturers'\n\n  try {\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, types: ['object'] },\n      {\n        name: 'manufacturerType',\n        value: params?.manufacturerType,\n        types: ['string'],\n      },\n      {\n        name: 'page',\n        value: params?.page,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetAllManufacturers endpoint\n *\n * @alias GetAllManufacturersResults\n */\nexport type GetAllManufacturersResults = {\n  Country: string\n  Mfr_CommonName: string | null\n  Mfr_ID: number\n  Mfr_Name: string\n  VehicleTypes: Array<{ IsPrimary?: boolean; Name?: string }>\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions,\n * used primarily in collision investigation and reconstruction, combined with a search engine.\n *\n * The database is compiled annually by the Collision Investigation and Research Division of Transport Canada.\n * Visit official [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/)\n * page for more details.\n *\n * Some NHTSA endpoints will return a 404 error if the query string includes empty values (ex: 'make='), and some endpoints aren't bothered.\n * This endpoint will return a 404 error if any of the query parameters in params are missing from the query string.\n * Therefore, parameters are inserted into the query string with empty string values even if that particular param value is not provided by the user.\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL (required)\n * @param {(string|number)} params.year - Model year of the vehicle (required) - year >= 1971 (required)\n * @param {string} [params.make=''] - Vehicle's make, like \"Honda\", \"Toyota\", etc...\n * @param {string} [params.model=''] - Vehicle's model, like \"Pilot\", \"Focus\". Can also include some other elements like Body Type, Engine Model/size, etc...\n * @param {string} [params.units=''] - \"Metric\" (default), or \"US\" for United States customary units\n * @returns {(Promise<NhtsaResponse<GetCanadianVehicleSpecificationsResults>>)} - Api Response object\n */\n\nexport const GetCanadianVehicleSpecifications = async (params: {\n  year: string | number\n  make?: string\n  model?: string\n  units?: string\n}): Promise<NhtsaResponse<GetCanadianVehicleSpecificationsResults>> => {\n  const endpointName = 'GetCanadianVehicleSpecifications'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n      { name: 'make', value: params.make, types: ['string'] },\n      { name: 'model', value: params.model, types: ['string'] },\n      { name: 'units', value: params.units, types: ['string'] },\n    ]\n\n    catchInvalidArguments({ args })\n\n    /* Set default query parameters to empty strings if not provided by the user or API will 404 */\n    const queryString = createQueryString(\n      {\n        make: '',\n        model: '',\n        units: '',\n        ...params,\n      },\n      true\n    )\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetCanadianVehicleSpecifications endpoint\n *\n * @alias GetCanadianVehicleSpecificationsResults\n */\nexport type GetCanadianVehicleSpecificationsResults = {\n  Specs: Array<{\n    Name:\n      | 'Make'\n      | 'Model'\n      | 'MYR'\n      | 'OL'\n      | 'OW'\n      | 'OH'\n      | 'WB'\n      | 'CW'\n      | 'A'\n      | 'B'\n      | 'C'\n      | 'D'\n      | 'E'\n      | 'F'\n      | 'G'\n      | 'TWF'\n      | 'TWR'\n      | 'WD'\n    Value: string\n  }>\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetEquipmentPlantCodes returns assigned Equipment Plant Codes. Can be filtered by Year, Equipment Type and Report Type.\n *\n * ALL parameters are required and endpoint will return 404 if there are any missing keys and/or values\n *\n * `params.year`:\n *  - year >= 2016\n *  - NOTE: It seems API will still respond with years < 2016 but api docs state only years >= 2016 are supported\n * `params.equipmentType`:\n *  - 1 (Tires)\n *  - 3 (Brake Hoses)\n *  - 13 (Glazing)\n *  - 16 (Retread)\n * `params.reportType`:\n *  - 'New' (The Equipment Plant Code was assigned during the selected year)\n *  - 'Updated' (The Equipment Plant data was modified during the selected year)\n *  - 'Closed' (The Equipment Plant is no longer Active)\n *  - 'All' (All Equipment Plant Codes regardless of year, including their status (active or closed))\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.year - Year >= 2016 (required)\n * @param {(string|number)} params.equipmentType - Number equal to 1, 3, 13, or 16 (required)\n * @param {string} params.reportType - 'New', 'Updated', 'Closed', or 'All' (required)\n * @returns {(Promise<NhtsaResponse<GetEquipmentPlantCodesResults>>)} - Api Response object (required)\n */\n\nexport const GetEquipmentPlantCodes = async (params: {\n  year: string | number\n  equipmentType: '1' | '3' | '13' | '16' | 1 | 3 | 13 | 16\n  reportType: 'New' | 'Updated' | 'Closed' | 'All'\n}): Promise<NhtsaResponse<GetEquipmentPlantCodesResults>> => {\n  const endpointName = 'GetEquipmentPlantCodes'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'equipmentType',\n        value: params.equipmentType,\n        required: true,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'reportType',\n        value: params.reportType,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    /* Set default query parameters to empty strings if not provided by the user or API will 404 */\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetEquipmentPlantCodes endpoint\n *\n * @alias GetEquipmentPlantCodesResults\n */\nexport type GetEquipmentPlantCodesResults = {\n  Address: string\n  City: string\n  Country: string\n  DOTCode: string\n  Name: string\n  OldDotCode: string\n  PostalCode: string\n  StateProvince: string\n  Status: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetMakeForManufacturer returns all the Makes in the vPIC dataset for a specified manufacturer that is requested.\n *\n * - `manufacturer` name can be a partial name, or a full name for more specificity\n *   (e.g., \"988\", \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.).\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name.\n *   (it accepts a partial manufacturer name as an input).\n * - Multiple results are returned in case of multiple matches.\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name or ID\n * @returns {(Promise<NhtsaResponse<GetMakeForManufacturerResults>>)} - Api Response object\n */\n\nexport const GetMakeForManufacturer = async (\n  manufacturer: string | number\n): Promise<NhtsaResponse<GetMakeForManufacturerResults>> => {\n  const endpointName = 'GetMakeForManufacturer'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${manufacturer}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetMakeForManufacturer endpoint\n *\n * @alias GetMakeForManufacturerResults\n */\nexport type GetMakeForManufacturerResults = {\n  Make_ID: number\n  Make_Name: string\n  Mfr_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetMakesForManufacturerAndYear returns all the Makes in the vPIC dataset for a specified manufacturer,\n * and whose Year From and Year To range cover the specified year.\n *\n * - `manufacturer` name can be a partial name, or a full name for more specificity\n *   (e.g., \"988\", \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.).\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name.\n *   (it accepts a partial manufacturer name as an input).\n * - Multiple results are returned in case of multiple matches.\n\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name (string) or Manufacturer ID (number)\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.year - Model year of the vehicle - Number, >= 2016\n * @returns {(Promise<NhtsaResponse<GetMakesForManufacturerAndYearResults>>)} - Api Response object\n */\n\nexport const GetMakesForManufacturerAndYear = async (\n  manufacturer: string,\n  params: {\n    year: string | number\n  }\n): Promise<NhtsaResponse<GetMakesForManufacturerAndYearResults>> => {\n  const endpointName = 'GetMakesForManufacturerAndYear'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'year',\n        value: params.year,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${manufacturer}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetMakesForManufacturerAndYear endpoint\n *\n * @alias GetMakesForManufacturerAndYearResults\n */\nexport type GetMakesForManufacturerAndYearResults = {\n  MakeId: number\n  MakeName: string\n  MfrId: number\n  MfrName: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetMakesForVehicleType returns all the Makes in the vPIC dataset for a specified vehicle type (`typeName`),\n * whose name is LIKE the vehicle type name in vPIC Dataset.\n *\n * - Vehicle `typeName` can be a partial name, or a full name for more specificity\n *   (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.)\n *\n * @async\n * @param {string} typeName - A partial or full vehicle type name (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.)\n * @returns {(Promise<NhtsaResponse<GetMakesForVehicleTypeResults>>)} - Api Response object\n */\n\nexport const GetMakesForVehicleType = async (\n  typeName: string\n): Promise<NhtsaResponse<GetMakesForVehicleTypeResults>> => {\n  const endpointName = 'GetMakesForVehicleType'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'typeName',\n        value: typeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${typeName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetMakesForVehicleType endpoint\n *\n * @alias GetMakesForVehicleTypeResults\n */\nexport type GetMakesForVehicleTypeResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetManufacturerDetails provides the details for a specific manufacturer that is requested.\n *\n * - `manufacturer` name can be a partial name, or a full name for more specificity\n *   (e.g., \"988\", \"honda\", \"HONDA OF CANADA MFG., INC.\", etc.).\n * - If supplied `manufacturer` is a number - method will do exact match on Manufacturer's Id.\n * - If supplied `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name.\n *   (it accepts a partial manufacturer name as an input).\n * - Multiple results are returned in case of multiple matches.\n *\n * @async\n * @param {(string|number)} manufacturer - Manufacturer Name or ID\n * @returns {(Promise<NhtsaResponse<GetManufacturerDetailsResults>>)} - Api Response object\n */\n\nexport const GetManufacturerDetails = async (\n  manufacturer: string | number\n): Promise<NhtsaResponse<GetManufacturerDetailsResults>> => {\n  const endpointName = 'GetManufacturerDetails'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: manufacturer,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${manufacturer}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetManufacturerDetails endpoint\n *\n * @alias GetManufacturerDetailsResults\n */\nexport type GetManufacturerDetailsResults = {\n  Address: string | null\n  Address2: string | null\n  City: string | null\n  ContactEmail: string | null\n  ContactFax: string | null\n  ContactPhone: string | null\n  Country: string | null\n  DBAs: string | null\n  EquipmentItems: Array<unknown>\n  LastUpdated: string\n  ManufacturerTypes: Array<{\n    Name: string\n  }>\n  Mfr_CommonName: string | null\n  Mfr_ID: number | null\n  Mfr_Name: string | null\n  OtherManufacturerDetails: string | null\n  PostalCode: string | null\n  PrimaryProduct: string | null\n  PrincipalFirstName: string | null\n  PrincipalLastName: string | null\n  PrincipalPosition: string | null\n  StateProvince: string | null\n  SubmittedName: string | null\n  SubmittedOn: string\n  SubmittedPosition: string | null\n  VehicleTypes: Array<{\n    GVWRFrom: string\n    GVWRTo: string\n    IsPrimary: boolean\n    Name: string\n  }>\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetModelsForMake returns the Models in the vPIC dataset for a specified `makeName`\n * whose Name is LIKE the Make in vPIC Dataset.\n *\n * - `makeName` can be a partial, or a full for more specificity\n *   (e.g., \"Harley\", \"Harley Davidson\", etc.)\n *\n * @async\n * @param {string} makeName - Vehicle make name\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeResults>>)} - Api Response object\n */\n\nexport const GetModelsForMake = async (\n  makeName: string\n): Promise<NhtsaResponse<GetModelsForMakeResults>> => {\n  const endpointName = 'GetModelsForMake'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeName',\n        value: makeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${makeName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetModelsForMake endpoint\n *\n * @alias GetModelsForMakeResults\n */\nexport type GetModelsForMakeResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetModelsForMakeId returns the Models in the vPIC dataset for a specified Make\n * whose ID is equal to the `makeID` in the vPIC Dataset.\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints:\n * - `DecodeVin`\n * - `DecodeVinExtended`\n * - NOTE: one of the objects in the Results array will have key/values of `Variable: \"Make\"` and `VariableId: 26`,\n *   and the `ValueId` key in that object is the `makeID` for use in this endpoint.\n *\n * @async\n * @param {(string|number)} makeId - Make ID to search\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeIdResults>>)} - Api Response object\n */\n\nexport const GetModelsForMakeId = async (\n  makeId: string | number\n): Promise<NhtsaResponse<GetModelsForMakeIdResults>> => {\n  const endpointName = 'GetModelsForMakeId'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeId',\n        value: makeId,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${makeId}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetModelsForMakeId endpoint\n *\n * @alias GetModelsForMakeIdResults\n */\nexport type GetModelsForMakeIdResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  encodeQueryStringParams,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse, AtLeastOne } from '../../types'\n\n/**\n * GetModelsForMakeIdYear returns the Models in the vPIC dataset for a specified Model Year\n * and Make whose name is LIKE the Make in the vPIC Dataset.\n *\n * `params.makeId` is required + a minimum of one of the following are required (or a combination of both):\n *   - `params.modelYear` year you want to search for (years >= 1995 are supported according to NHTSA docs)\n *   - `params.vehicleType` can be a partial name, or a full name for more specificity\n *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.)\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints:\n * - `DecodeVin`\n * - `DecodeVinExtended`\n * - NOTE: one of the objects in the Results array will have key/values of `Variable: \"Make\"` and `VariableId: 26`,\n *   and the `ValueId` key in that object is the `makeID` for use in this endpoint.\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {(string|number)} params.makeId - Make ID to search\n * @param {(string|number)} [params.modelYear] - A number representing the model year to search (greater than 1995)\n * @param {string} [params.vehicleType] - String representing the vehicle type to search\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeIdYearResults>>)} Api Response object\n */\n\nexport const GetModelsForMakeIdYear = async (\n  params: {\n    makeId: string | number\n  } & AtLeastOne<{\n    modelYear?: string | number\n    vehicleType?: string\n  }>\n): Promise<NhtsaResponse<GetModelsForMakeIdYearResults>> => {\n  const endpointName = 'GetModelsForMakeIdYear'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'modelYear',\n        value: params.modelYear,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params.vehicleType,\n        types: ['string'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      {\n        name: 'makeId',\n        value: params.makeId,\n        required: true,\n        types: ['string'],\n      },\n      ...atLeastOne,\n    ]\n\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    /*\n     * This endpoint requires special logic to handle encoding param values.\n     * Params are never run through createQueryString and therefore won't be encoded without this\n     */\n    const { makeId, modelYear, vehicleType } = encodeQueryStringParams(params)\n\n    /* Build the URL */\n    let url = `${NHTSA_BASE_URL}/${endpointName}/make/${makeId}/`\n\n    if (modelYear) {\n      url += `modelYear/${modelYear}`\n    }\n    if (vehicleType) {\n      url += `${modelYear ? '/' : ''}vehicleType/${vehicleType}`\n    }\n\n    url += createQueryString()\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetModelsForMakeIdYear endpoint\n *\n * @alias GetModelsForMakeIdYearResults\n */\nexport type GetModelsForMakeIdYearResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  encodeQueryStringParams,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { NhtsaResponse, IArgToValidate, AtLeastOne } from '../../types'\n\n/**\n * GetModelsForMakeYear returns the Models in the vPIC dataset for a specified Model Year\n * and Make whose name is LIKE the Make in the vPIC Dataset.\n *   - `params.make` is required. It can be a partial, or a full name for more specificity\n *     (e.g., \"Harley\", \"Harley Davidson\", etc.)\n *\n * A minimum of one of the following are required (or a combination of both):\n *   - `params.modelYear` is a number (years >= 1995 are supported)\n *   - `params.vehicleType` can be a partial name, or a full name for more specificity\n *     (e.g., \"Vehicle\", \"Moto\", \"Low Speed Vehicle\", etc.)\n *\n * @async\n * @param {Object} params - Query Search Parameters to append to the URL\n * @param {string} params.make - Make name to search\n * @param {(string|number)} [params.modelYear] - A number representing the model year to search (greater than 1995), required if params.vehicleType is not provided\n * @param {string} [params.vehicleType] - String representing the vehicle type to search, required if params.modelYear is not provided\n * @returns {(Promise<NhtsaResponse<GetModelsForMakeYearResults>>)} Api Response object\n */\n\nexport const GetModelsForMakeYear = async (\n  params: { make: string } & AtLeastOne<{\n    modelYear?: string | number\n    vehicleType?: string\n  }>\n): Promise<NhtsaResponse<GetModelsForMakeYearResults>> => {\n  const endpointName = 'GetModelsForMakeYear'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'modelYear',\n        value: params.modelYear,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params.vehicleType,\n        types: ['string'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, required: true, types: ['object'] },\n      { name: 'make', value: params.make, required: true, types: ['string'] },\n      ...atLeastOne,\n    ]\n\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    /*\n     * This endpoint requires special logic to handle encoding param values.\n     * Params are never run through createQueryString and therefore won't be encoded without this\n     */\n    const { make, modelYear, vehicleType } = encodeQueryStringParams(params)\n\n    /* Build the URL */\n    let url = `${NHTSA_BASE_URL}/${endpointName}/make/${make}/`\n\n    if (modelYear) {\n      url += `modelYear/${modelYear}`\n    }\n    if (vehicleType) {\n      url += `${modelYear ? '/' : ''}vehicleType/${vehicleType}`\n    }\n\n    url += createQueryString()\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetModelsForMakeYear endpoint\n *\n * @alias GetModelsForMakeYearResults\n */\nexport type GetModelsForMakeYearResults = {\n  Make_ID: number\n  Make_Name: string\n  Model_ID: number\n  Model_Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetParts provides a list of ORGs with letter date in the given range of the dates\n * and with specified Type (`params.type`) of ORG.\n * - Up to 1000 results will be returned at a time.\n * - Get the next page by incrementing the `params.page` query parameter.\n *\n * All query `params` are optional.\n *\n * `params.type`:\n * - (optional) number, 565 (Vehicle Identification Number Guidance, based on 49 CFR Part 565)\n *   or 566 (Manufacturer Identification – Reporting Requirements based on 49 CFR Part 566)\n * `params.fromDate`:\n * - (optional) ORG's Letter Date should be on or after this date\n * `params.manufacturer`:\n * - (optional) if supplied value is a number - method will do exact match on Manufacturer's Id\n * - if supplied value is a string - it will look for manufacturers whose name is LIKE the provided name\n * - it accepts a partial manufacturer name as an input\n * - multiple results are returned in case of multiple matches\n * - manufacturer name can be a partial name, or a full name for more specificity\n *   (e.g., \"988\", \"HONDA\", \"HONDA OF CANADA MFG., INC.\", etc.)\n * `params.page`:\n *  - (optional) number, 1 (default) first 1000 records, 2 - next 1000 records, etc\n *\n * @async\n * @param {Object} [params] - Query Search Parameters to append to the URL\n * @param {(string|number)} [params.type] - Specified type of ORG to search\n * @param {string} [params.fromDate] - Start date of search query\n * @param {string} [params.toDate] - End date of search query\n * @param {(string|number)} [params.page] - Which page number of results to request (100 results per page)\n * @returns {(Promise<NhtsaResponse<GetPartsResults>>)} - Api Response object (required)\n */\n\nexport const GetParts = async (params?: {\n  type?: string | number\n  fromDate?: string\n  toDate?: string\n  page?: string | number\n}): Promise<NhtsaResponse<GetPartsResults>> => {\n  const endpointName = 'GetParts'\n\n  try {\n    /* Validate the arguments */\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, types: ['object'] },\n      { name: 'type', value: params?.type, types: ['string', 'number'] },\n      { name: 'fromDate', value: params?.fromDate, types: ['string'] },\n      { name: 'toDate', value: params?.toDate, types: ['string'] },\n      { name: 'page', value: params?.page, types: ['string', 'number'] },\n    ]\n\n    catchInvalidArguments({ args })\n\n    /* Set default query parameters to empty strings if not provided by the user or API will 404 */\n    const queryString = createQueryString(params)\n    const url = `${NHTSA_BASE_URL}/${endpointName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetParts endpoint\n *\n * @alias GetPartsResults\n */\nexport type GetPartsResults = {\n  CoverLetterURL: string\n  LetterDate: string\n  ManufacturerId: number\n  ManufacturerName: string\n  ModelYearFrom: number | null\n  ModelYearTo: number | null\n  Name: string\n  Type: string\n  URL: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetVehicleTypesForMake returns all the Vehicle Types in the vPIC dataset for a specified Make,\n * whose name is LIKE the make name in the vPIC Dataset.\n *\n * - `makeName` can be a partial name, or a full name for more specificity\n *   (e.g., \"Merc\", \"Mercedes Benz\", etc.)\n *\n * @async\n * @param {string} makeName - Name of the vehicle make to search\n * @returns {(Promise<NhtsaResponse<GetVehicleTypesForMakeResults>>)} - Api Response object\n */\n\nexport const GetVehicleTypesForMake = async (\n  makeName: string\n): Promise<NhtsaResponse<GetVehicleTypesForMakeResults>> => {\n  const endpointName = 'GetVehicleTypesForMake'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeName',\n        value: makeName,\n        required: true,\n        types: ['string'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${makeName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetVehicleTypesForMake endpoint\n *\n * @alias GetVehicleTypesForMakeResults\n */\nexport type GetVehicleTypesForMakeResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetVehicleTypesForMakeId returns the Models in the vPIC dataset for a specified Make\n * whose ID is equal to the `makeID` in the vPIC Dataset.\n *\n * You can get `makeID`s via `MAKE_ID` key in Results objects of the following endpoints:\n * - `GetAllMakes` endpoint\n * - `GetMakeForManufacturer` endpoint\n * - `GetModelsForMake` endpoint\n * - `GetModelsForMakeYear` endpoint\n *\n * You can get `makeID`s via `MakeID` key in Results objects of the following endpoints:\n * - `DecodeVinValues`\n * - `DecodeVinValuesBatch`\n *\n * You can get `makeID`s via `ValueId` key in Results objects of the following endpoints:\n * - `DecodeVin`\n * - `DecodeVinExtended`\n * - NOTE: one of the objects in the Results array will have key/values of `Variable: \"Make\"` and `VariableId: 26`,\n *   and the `ValueId` key in that object is the `makeID` for use in this endpoint.\n *\n * @async\n * @param {(string|number)} makeId - Make ID to search\n * @returns {(Promise<NhtsaResponse<GetVehicleTypesForMakeIdResults>>)} - Api Response object\n */\n\nexport const GetVehicleTypesForMakeId = async (\n  makeId: string | number\n): Promise<NhtsaResponse<GetVehicleTypesForMakeIdResults>> => {\n  const endpointName = 'GetVehicleTypesForMakeId'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'makeId',\n        value: makeId,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${makeId}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetVehicleTypesForMakeId endpoint\n *\n * @alias GetVehicleTypesForMakeIdResults\n */\nexport type GetVehicleTypesForMakeIdResults = {\n  MakeId: number\n  MakeName: string\n  VehicleTypeId: number\n  VehicleTypeName: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport { createQueryString, rejectWithError, useFetch } from '../../utils'\n/* Types */\nimport type { NhtsaResponse } from '../../types'\n\n/**\n * GetVehicleVariableList provides a list of all the Vehicle related variables that are in the vPIC dataset.\n *\n * - Information on the name, description and the type of the variable is provided.\n *\n * @async\n * @returns {(Promise<NhtsaResponse<GetVehicleVariableListResults>>)} - Api Response object\n */\n\nexport const GetVehicleVariableList = async (): Promise<\n  NhtsaResponse<GetVehicleVariableListResults>\n> => {\n  const endpointName = 'GetVehicleVariableList'\n\n  try {\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetVehicleVariableList endpoint\n *\n * @alias GetVehicleVariableListResults\n */\nexport type GetVehicleVariableListResults = {\n  DataType: 'string' | 'int' | 'decimal' | 'lookup'\n  Description: string\n  GroupName: string | null\n  ID: number\n  Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  catchInvalidArguments,\n  createQueryString,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetVehicleVariableValuesList provides a list of all the accepted values for a given variable that are stored in the vPIC dataset.\n *\n * This only applies to \"Look up\" type of variables\n * - Search parameter (`variableValue`) can either be a:\n *   - Variable Name (ex: \"battery type\"; must use full name, not just part of it),\n *   - or Variable ID (number)\n *\n * @async\n * @param {(string|number)} variableValue - The variable you want to get a values list of\n * @returns {(Promise<NhtsaResponse<GetVehicleVariableValuesListResults>>)} - Api Response object\n */\n\nexport const GetVehicleVariableValuesList = async (\n  variableValue: number | string\n): Promise<NhtsaResponse<GetVehicleVariableValuesListResults>> => {\n  const endpointName = 'GetVehicleVariableValuesList'\n\n  try {\n    const args: IArgToValidate[] = [\n      {\n        name: 'variableValue',\n        value: variableValue,\n        required: true,\n        types: ['string', 'number'],\n      },\n    ]\n\n    catchInvalidArguments({ args })\n\n    const queryString = createQueryString()\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${variableValue}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetVehicleVariableValuesList endpoint\n *\n * @alias GetVehicleVariableValuesListResults\n */\nexport type GetVehicleVariableValuesListResults = {\n  ElementName: string\n  Id: number\n  Name: string\n}\n","/* Constants */\nimport { NHTSA_BASE_URL } from '../../constants'\n/* Utility Functions */\nimport {\n  createQueryString,\n  catchInvalidArguments,\n  rejectWithError,\n  useFetch,\n} from '../../utils'\n/* Types */\nimport type { AtLeastOne, IArgToValidate, NhtsaResponse } from '../../types'\n\n/**\n * GetWMIsForManufacturer provides information on the World Manufacturer Identifier (WMI) for a specified `manufacturer`.\n * Only WMIs registered in vPICList are displayed. Multiple results are returned in case of multiple matches.\n *\n * - Both `manufacturer` and `vehicleType` are optional but at least one must be provided.\n *\n * `manufacturer` can be a partial name, or a full name for more specificity, or WMI ID number (e.g., \"Merc\", \"Mercedes Benz\", 987, etc.)\n * - If `manufacturer` is a number - method will do exact match on Manufacturer's Id\n * - If `manufacturer` is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input).\n *\n * `vehicleType` can be a string or number (e.g., \"car\", 1)\n * - If `vehicleType` is a number - method will do exact match on VehicleType's Id\n * - If `vehicleType` is a string - it will look for VehicleType whose name is LIKE the provided name (it accepts a partial VehicleType name as an input).\n *\n * @async\n * @param {Object} [params] - Query Search Parameters to append to the URL.\n * @param {(string|number)} [params.manufacturer] - Manufacturer Name, must be included if vehicleType is not provided\n * @param {(string|number)} [params.vehicleType] - Optional Vehicle Type search parameter, must be included if manufacturer is not provided\n * @returns {(Promise<NhtsaResponse<GetWMIsForManufacturerResults>>)} - Api Response object\n */\n\nexport const GetWMIsForManufacturer = async (\n  params?: AtLeastOne<{\n    manufacturer?: string | number\n    vehicleType?: string | number\n  }>\n): Promise<NhtsaResponse<GetWMIsForManufacturerResults>> => {\n  const endpointName = 'GetWMIsForManufacturer'\n\n  try {\n    /* Validate the arguments */\n    const atLeastOne: IArgToValidate[] = [\n      {\n        name: 'manufacturer',\n        value: params?.manufacturer,\n        types: ['string', 'number'],\n      },\n      {\n        name: 'vehicleType',\n        value: params?.vehicleType,\n        types: ['string', 'number'],\n      },\n    ]\n    const args: IArgToValidate[] = [\n      { name: 'params', value: params, types: ['object'] },\n      ...atLeastOne,\n    ]\n\n    catchInvalidArguments({ args })\n    catchInvalidArguments({ args: atLeastOne, mode: 'atLeast' })\n\n    const manufacturer = params?.manufacturer\n      ? encodeURIComponent(params.manufacturer)\n      : ''\n    const vehicleType = params?.vehicleType || ''\n    const queryString = createQueryString({ vehicleType })\n    const url = `${NHTSA_BASE_URL}/${endpointName}/${manufacturer}${queryString}`\n\n    return await useFetch().get(url)\n  } catch (error) {\n    return rejectWithError(error)\n  }\n}\n\n/**\n * Type representing the structure of objects found in the NhtsaResponse 'Results' array for GetWMIsForManufacturer endpoint\n *\n * @alias GetWMIsForManufacturerResults\n */\nexport type GetWMIsForManufacturerResults = {\n  Country: string | null\n  CreatedOn: string\n  DateAvailableToPublic: string\n  Id: number\n  Name: string\n  UpdatedOn: string\n  VehicleType: string\n  WMI: string\n}\n"],"names":["catchInvalidArguments","args","mode","getTypeof","arg","validateArgument","name","value","required","types","typeofValue","error","errorPrepend","errorAppend","joinedTypes","isError","handleError","message","rejectWithError","toString","TRANSLITERATION_TABLE","WEIGHTS_ARRAY","isValidVin","vin","vinArray","checkDigit","checkValue","digit","index","digitValue","weight","acc","currValue","useFetch","get","url","options","response","jsonTypes","contentType","type","data","NHTSA_BASE_URL","NHTSA_RESPONSE_FORMAT","createQueryString","params","allowEmptyStringValues","staticParams","_params","encodeQueryStringParams","key","array","DecodeVin","endpointName","queryString","DecodeVinExtended","DecodeVinValues","DecodeVinValuesBatch","inputString","body","DecodeVinValuesExtended","DecodeWMI","WMI","GetAllMakes","GetAllManufacturers","GetCanadianVehicleSpecifications","GetEquipmentPlantCodes","GetMakeForManufacturer","manufacturer","GetMakesForManufacturerAndYear","GetMakesForVehicleType","typeName","GetManufacturerDetails","GetModelsForMake","makeName","GetModelsForMakeId","makeId","GetModelsForMakeIdYear","atLeastOne","modelYear","vehicleType","GetModelsForMakeYear","make","GetParts","GetVehicleTypesForMake","GetVehicleTypesForMakeId","GetVehicleVariableList","GetVehicleVariableValuesList","variableValue","GetWMIsForManufacturer"],"mappings":"gFAWO,MAAMA,EAAwB,CAAC,CACpC,KAAAC,EACA,KAAAC,EAAO,SACT,IAGM,CACJ,GAAIC,EAAUF,CAAI,IAAM,SAAW,CAACA,EAAK,OACjC,MAAA,MACJ,uFAAA,EAIJ,GAAIC,IAAS,UACND,EAAA,QAASG,GAAQ,CACpBC,EAAiBD,CAAG,CAAA,CACrB,UACQF,IAAS,WAEd,CADgBD,EAAK,KAAMG,GAAQ,CAAC,CAACA,EAAI,KAAK,EAE1C,MAAA,MACJ,yDAAyDH,EACtD,IAAKG,GAAQA,EAAI,IAAI,EACrB,KAAK,IAAI,GAAA,CAIpB,EAEaC,EAAmB,CAAC,CAC/B,KAAAC,EACA,MAAAC,EACA,SAAAC,EACA,MAAAC,EACA,KAAAP,EAAO,OACT,IAAgE,CAE1D,GAAAC,EAAUG,CAAI,IAAM,SACtB,MAAM,MAAM,gDAAgD,EAGxD,MAAAI,EAAcP,EAAUI,CAAK,EACnC,IAAII,EAAQ,GACZ,MAAMC,EAAe,oCAAoCN,MACnDO,EAAc,mBAAmBN,iBAAqBG,KAE5D,GAAID,GAASN,EAAUM,CAAK,IAAM,SAAW,CAACA,EAAM,OAC5C,MAAA,MAAM,GAAGG,uCAAkD,EAInE,MAAME,EAAcL,EAAQ,IAAIA,EAAM,KAAK,KAAK,KAAO,GAkBvD,GAfID,GAAY,CAACC,EACVF,IACHI,EAAQ,GAAGC,kBAA6BC,KAEjCJ,GAAS,CAACD,EAEfD,GAAS,CAACE,EAAM,SAASC,CAAW,IAC9BC,EAAA,GAAGC,wBAAmCE,MAAgBD,KAEvDL,GAAYC,IACjB,CAACF,GAAS,CAACE,EAAM,SAASC,CAAW,KAC/BC,EAAA,GAAGC,wCAAmDE,MAAgBD,KAI9EF,EAAM,OAAQ,CAChB,GAAIT,IAAS,UAAkB,MAAA,GAC/B,GAAIA,IAAS,QAAS,MAAM,MAAMS,CAAK,CACzC,CAEO,MAAA,EACT,ECpFaI,EAAWJ,GACfR,EAAUQ,CAAK,IAAM,QAGjBK,EAAeL,GAA0B,CACpD,IAAIM,EAAU,6BACV,OAAAF,EAAQJ,CAAK,EACRA,GAELR,EAAUQ,CAAK,IAAM,WACbM,EAAAN,GAEL,MAAMM,CAAO,EACtB,EAEaC,EAAkB,MAAOP,IAC/BI,EAAQJ,CAAK,IAChBA,EAAQK,EAAYL,CAAK,GAEpB,QAAQ,OAAOA,CAAK,GCHhBR,EAAaI,GAA2B,CACnD,MAAMY,EAAmB,OAAO,UAAU,SACvC,KAAKZ,CAAK,EACV,cAGH,OAAOY,EAAS,MAAM,EAAGA,EAAS,OAAS,CAAC,CAC9C,ECbMC,EAAgD,CACpD,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,CACL,EAQMC,EAA0B,CAC9B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CACnD,EAoBO,SAASC,EAAWC,EAAsB,CAE/C,GAAI,OAAOA,GAAQ,UAAYA,EAAI,QAAU,GACpC,MAAA,GAITA,EAAMA,EAAI,cAGJ,MAAAC,EAAqBD,EAAI,MAAM,EAAE,EAGjCE,EAAqBD,EAAS,CAAC,EAMrC,GAAI,MAAM,SAASC,CAAU,CAAC,GAAKA,IAAe,IACzC,MAAA,GAQT,MAAMC,EAAqBD,IAAe,IAAM,GAAK,SAASA,CAAU,EAiCxE,OAtBED,EACG,IAAI,CAACG,EAAeC,IAAkB,CACjC,IAAAC,EAEE,MAAA,SAASF,CAAK,CAAC,EAChBE,EAAaT,EAAsBO,CAAK,EACxCE,EAAa,SAASF,CAAK,EAG1B,MAAAG,EAAiBT,EAAcO,CAAK,EAG1C,OAAOC,EAAaC,CAAA,CACrB,EAEA,OAAO,CAACC,EAAKC,IAAcD,EAAMC,EAAW,CAAC,EAAI,KAOlCN,CACtB,CC7HO,MAAMO,EAAW,IAAM,CAC5B,MAAMC,EAAM,MACVC,EACAC,EAAuB,CAAA,IAEiB,MAAM,MAAMD,EAAKC,CAAO,EAC7D,KAAK,MAAOC,GAAa,CACpB,GAAA,CAACA,EAAS,GACZ,MAAM,MAAM,GAAGA,EAAS,UAAUA,EAAS,KAAK,EAG5C,MAAAC,EAAY,CAAC,mBAAoB,WAAW,EAC5CC,EAAcF,EAAS,QAAQ,IAAI,cAAc,EAGvD,GAAI,CAFWC,EAAU,KAAME,GAASD,GAAA,YAAAA,EAAa,SAASC,EAAK,EAG3D,MAAA,MACJ,yDACmBD,sBAAgCF,EAAS,yBAAyBA,EAAS,KAAA,EAI5F,MAAAI,EAAyB,MAAMJ,EAAS,OAE9C,GAAI,CAACI,EACG,MAAA,MACJ,yDACmBF,sBAAgCF,EAAS,yBAAyBA,EAAS,KAAA,EAI3F,OAAAI,CAAA,CACR,EACA,MAAO9B,IACAA,EAAA,QAAU,4BAA4BA,EAAM,UAC3CO,EAAgBP,CAAK,EAC7B,EAiBE,MAAA,CACL,IAAAuB,EACA,KAbW,MACXC,EACAC,EAAuB,CAAA,IAEhB,MAAMF,EAAIC,EAAK,CACpB,GAAGC,EACH,OAAQ,OACR,QAAS,CAAE,eAAgB,mCAAoC,CAAA,CAChE,CAKD,CAEJ,EC5DaM,EAAiB,0CACjBC,EAAwB,OC8BxBC,EAAoB,CAC/BC,EACAC,EAAyB,KACd,CAEL,MAAAC,EAAe,CAAE,OAAQJ,GAGzBK,EACJ7C,EAAU0C,CAAM,IAAM,SAClB,CAAE,GAAGA,EAAQ,GAAGE,CAChB,EAAAA,EAcC,MAVL,IACA,OAAO,QAAQE,EAAwBD,CAAO,CAAC,EAC5C,IAAI,CAAC,CAACE,EAAK3C,CAAK,EAAGqB,EAAOuB,IAClB5C,EAAM,QAAWuC,GAA0BvC,IAAU,GACxD,GAAG2C,KAAO3C,IAAQqB,EAAQuB,EAAM,OAAS,EAAI,IAAM,KACnD,EACL,EACA,KAAK,EAAE,CAId,EAoBaF,EACXJ,GAEO,OAAO,QAAQA,CAAM,EACzB,OAAO,CAAC,CAACK,EAAK3C,CAAK,IAClBF,EAAiB,CACf,KAAM6C,EACN,MAAO,CAAC,SAAU,SAAU,SAAS,EACrC,MAAA3C,EACA,KAAM,SAAA,CACP,GAEF,OAAO,CAACwB,EAAK,CAACmB,EAAK3C,CAAK,KAEnBwB,EAAAmB,CAAc,EAAI,mBAAmB3C,CAAK,EACvCwB,GACN,CAAiC,CAAA,EC3D3BqB,EAAY,MACvB7B,EACAsB,IAG6C,CAC7C,MAAMQ,EAAe,YAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,MAAO,MAAOsB,EAAK,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EAC7D,CAAE,KAAM,SAAU,MAAOsB,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CACE,KAAM,YACN,MAAOA,GAAA,YAAAA,EAAQ,UACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,KAAgB9B,IAAM+B,IAEvD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC1Ba4C,EAAoB,MAC/BhC,EACAsB,IAGqD,CACrD,MAAMQ,EAAe,oBAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,MAAO,MAAOsB,EAAK,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EAC7D,CAAE,KAAM,SAAU,MAAOsB,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CACE,KAAM,YACN,MAAOA,GAAA,YAAAA,EAAQ,UACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,KAAgB9B,IAAM+B,IAEvD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EChCa6C,EAAkB,MAC7BjC,EACAsB,IAGmD,CACnD,MAAMQ,EAAe,kBAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,MAAO,MAAOsB,EAAK,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EAC7D,CAAE,KAAM,SAAU,MAAOsB,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CACE,KAAM,YACN,MAAOA,GAAA,YAAAA,EAAQ,UACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,KAAgB9B,IAAM+B,IAEvD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC/Ba8C,EAAuB,MAClCC,GACwD,CACxD,MAAML,EAAe,uBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,cACN,MAAO0D,EACP,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAG4B,EAExB,MAAAvB,EAAM,GAAGO,KAAkBW,KAC3BM,EAAO,UACX,QAAQD,YAAsBf,GAAA,EAGhC,OAAO,MAAMV,EAAS,EAAE,KAAKE,EAAK,CAAE,KAAAwB,EAAM,QACnChD,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EClBaiD,EAA0B,MACrCrC,EACAsB,IAG2D,CAC3D,MAAMQ,EAAe,0BAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,MAAO,MAAOsB,EAAK,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EAC7D,CAAE,KAAM,SAAU,MAAOsB,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CACE,KAAM,YACN,MAAOA,GAAA,YAAAA,EAAQ,UACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,KAAgB9B,IAAM+B,IAEvD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC1CakD,EAAY,MACvBC,GAC6C,CAC7C,MAAMT,EAAe,YAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,MACN,MAAO8D,EACP,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAG4B,EAE9B,MAAMR,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBS,IAAMR,IAEvD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EChCaoD,EAAc,SAEtB,CACH,MAAMV,EAAe,cAEjB,GAAA,CACF,MAAMC,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,IAAeC,IAEhD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECEaqD,EAAsB,MAAOnB,GAGgB,CACxD,MAAMQ,EAAe,sBAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CACE,KAAM,mBACN,MAAOA,GAAA,YAAAA,EAAQ,iBACf,MAAO,CAAC,QAAQ,CAClB,EACA,CACE,KAAM,OACN,MAAOA,GAAA,YAAAA,EAAQ,KACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,IAAeC,IAEhD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC3BasD,EAAmC,MAAOpB,GAKgB,CACrE,MAAMQ,EAAe,mCAEjB,GAAA,CAEF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACnE,CACE,KAAM,OACN,MAAOA,EAAO,KACd,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CAAE,KAAM,OAAQ,MAAOA,EAAO,KAAM,MAAO,CAAC,QAAQ,CAAE,EACtD,CAAE,KAAM,QAAS,MAAOA,EAAO,MAAO,MAAO,CAAC,QAAQ,CAAE,EACxD,CAAE,KAAM,QAAS,MAAOA,EAAO,MAAO,MAAO,CAAC,QAAQ,CAAE,CAAA,EAGpC7C,EAAA,CAAE,KAAAC,EAAM,EAG9B,MAAMqD,EAAcV,EAClB,CACE,KAAM,GACN,MAAO,GACP,MAAO,GACP,GAAGC,CACL,EACA,EAAA,EAEIV,EAAM,GAAGO,KAAkBW,KAAgBC,IAEjD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECnCauD,EAAyB,MAAOrB,GAIgB,CAC3D,MAAMQ,EAAe,yBAEjB,GAAA,CAEF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACnE,CACE,KAAM,OACN,MAAOA,EAAO,KACd,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CACE,KAAM,gBACN,MAAOA,EAAO,cACd,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CACE,KAAM,aACN,MAAOA,EAAO,WACd,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAGxB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,IAAeC,IAEhD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECrDawD,EAAyB,MACpCC,GAC0D,CAC1D,MAAMf,EAAe,yBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,eACN,MAAOoE,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAG4B,EAE9B,MAAMd,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBe,IAAed,IAEhE,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECpBa0D,EAAiC,MAC5CD,EACAvB,IAGkE,CAClE,MAAMQ,EAAe,iCAEjB,GAAA,CACF,MAAMpD,EAAyB,CAC7B,CACE,KAAM,eACN,MAAOmE,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CAAE,KAAM,SAAU,MAAOvB,EAAQ,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACnE,CACE,KAAM,OACN,MAAOA,EAAO,KACd,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAGoB7C,EAAA,CAAE,KAAAC,EAAM,EAExB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,KAAgBe,IAAed,IAEhE,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECzCa2D,EAAyB,MACpCC,GAC0D,CAC1D,MAAMlB,EAAe,yBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,WACN,MAAOuE,EACP,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAG4B,EAE9B,MAAMjB,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBkB,IAAWjB,IAE5D,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECrBa6D,EAAyB,MACpCJ,GAC0D,CAC1D,MAAMf,EAAe,yBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,eACN,MAAOoE,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAG4B,EAE9B,MAAMd,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBe,IAAed,IAEhE,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC3Ba8D,EAAmB,MAC9BC,GACoD,CACpD,MAAMrB,EAAe,mBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,WACN,MAAO0E,EACP,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAG4B,EAE9B,MAAMpB,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBqB,IAAWpB,IAE5D,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECXagE,EAAqB,MAChCC,GACsD,CACtD,MAAMvB,EAAe,qBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,SACN,MAAO4E,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAG4B,EAE9B,MAAMtB,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBuB,IAAStB,IAE1D,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECfakE,EAAyB,MACpChC,GAM0D,CAC1D,MAAMQ,EAAe,yBAEjB,GAAA,CAEF,MAAMyB,EAA+B,CACnC,CACE,KAAM,YACN,MAAOjC,EAAO,UACd,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CACE,KAAM,cACN,MAAOA,EAAO,YACd,MAAO,CAAC,QAAQ,CAClB,CAAA,EAEI5C,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACnE,CACE,KAAM,SACN,MAAOA,EAAO,OACd,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,EACA,GAAGiC,CAAA,EAGiB9E,EAAA,CAAE,KAAAC,EAAM,EAC9BD,EAAsB,CAAE,KAAM8E,EAAY,KAAM,SAAW,CAAA,EAM3D,KAAM,CAAE,OAAAF,EAAQ,UAAAG,EAAW,YAAAC,CAAY,EAAI/B,EAAwBJ,CAAM,EAGrE,IAAAV,EAAM,GAAGO,KAAkBW,UAAqBuB,KAEpD,OAAIG,IACF5C,GAAO,aAAa4C,KAElBC,IACK7C,GAAA,GAAG4C,EAAY,IAAM,iBAAiBC,KAG/C7C,GAAOS,EAAkB,EAElB,MAAMX,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC1EasE,EAAuB,MAClCpC,GAIwD,CACxD,MAAMQ,EAAe,uBAEjB,GAAA,CAEF,MAAMyB,EAA+B,CACnC,CACE,KAAM,YACN,MAAOjC,EAAO,UACd,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CACE,KAAM,cACN,MAAOA,EAAO,YACd,MAAO,CAAC,QAAQ,CAClB,CAAA,EAEI5C,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACnE,CAAE,KAAM,OAAQ,MAAOA,EAAO,KAAM,SAAU,GAAM,MAAO,CAAC,QAAQ,CAAE,EACtE,GAAGiC,CAAA,EAGiB9E,EAAA,CAAE,KAAAC,EAAM,EAC9BD,EAAsB,CAAE,KAAM8E,EAAY,KAAM,SAAW,CAAA,EAM3D,KAAM,CAAE,KAAAI,EAAM,UAAAH,EAAW,YAAAC,CAAY,EAAI/B,EAAwBJ,CAAM,EAGnE,IAAAV,EAAM,GAAGO,KAAkBW,UAAqB6B,KAEpD,OAAIH,IACF5C,GAAO,aAAa4C,KAElBC,IACK7C,GAAA,GAAG4C,EAAY,IAAM,iBAAiBC,KAG/C7C,GAAOS,EAAkB,EAElB,MAAMX,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECzCawE,EAAW,MAAOtC,GAKgB,CAC7C,MAAMQ,EAAe,WAEjB,GAAA,CAEF,MAAMpD,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,CAAE,KAAM,OAAQ,MAAOA,GAAA,YAAAA,EAAQ,KAAM,MAAO,CAAC,SAAU,QAAQ,CAAE,EACjE,CAAE,KAAM,WAAY,MAAOA,GAAA,YAAAA,EAAQ,SAAU,MAAO,CAAC,QAAQ,CAAE,EAC/D,CAAE,KAAM,SAAU,MAAOA,GAAA,YAAAA,EAAQ,OAAQ,MAAO,CAAC,QAAQ,CAAE,EAC3D,CAAE,KAAM,OAAQ,MAAOA,GAAA,YAAAA,EAAQ,KAAM,MAAO,CAAC,SAAU,QAAQ,CAAE,CAAA,EAG7C7C,EAAA,CAAE,KAAAC,EAAM,EAGxB,MAAAqD,EAAcV,EAAkBC,CAAM,EACtCV,EAAM,GAAGO,KAAkBW,IAAeC,IAEhD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EChDayE,EAAyB,MACpCV,GAC0D,CAC1D,MAAMrB,EAAe,yBAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,WACN,MAAO0E,EACP,SAAU,GACV,MAAO,CAAC,QAAQ,CAClB,CAAA,EAG4B,EAE9B,MAAMpB,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBqB,IAAWpB,IAE5D,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECXa0E,EAA2B,MACtCT,GAC4D,CAC5D,MAAMvB,EAAe,2BAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,SACN,MAAO4E,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAG4B,EAE9B,MAAMtB,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBuB,IAAStB,IAE1D,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EC7Ca2E,EAAyB,SAEjC,CACH,MAAMjC,EAAe,yBAEjB,GAAA,CACF,MAAMC,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,IAAeC,IAEhD,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,ECJa4E,EAA+B,MAC1CC,GACgE,CAChE,MAAMnC,EAAe,+BAEjB,GAAA,CAUoBrD,EAAA,CAAE,KATO,CAC7B,CACE,KAAM,gBACN,MAAOwF,EACP,SAAU,GACV,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAG4B,EAE9B,MAAMlC,EAAcV,IACdT,EAAM,GAAGO,KAAkBW,KAAgBmC,IAAgBlC,IAEjE,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF,EChBa8E,EAAyB,MACpC5C,GAI0D,CAC1D,MAAMQ,EAAe,yBAEjB,GAAA,CAEF,MAAMyB,EAA+B,CACnC,CACE,KAAM,eACN,MAAOjC,GAAA,YAAAA,EAAQ,aACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,EACA,CACE,KAAM,cACN,MAAOA,GAAA,YAAAA,EAAQ,YACf,MAAO,CAAC,SAAU,QAAQ,CAC5B,CAAA,EAEI5C,EAAyB,CAC7B,CAAE,KAAM,SAAU,MAAO4C,EAAQ,MAAO,CAAC,QAAQ,CAAE,EACnD,GAAGiC,CAAA,EAGiB9E,EAAA,CAAE,KAAAC,EAAM,EAC9BD,EAAsB,CAAE,KAAM8E,EAAY,KAAM,SAAW,CAAA,EAE3D,MAAMV,EAAevB,GAAA,MAAAA,EAAQ,aACzB,mBAAmBA,EAAO,YAAY,EACtC,GACEmC,GAAcnC,GAAA,YAAAA,EAAQ,cAAe,GACrCS,EAAcV,EAAkB,CAAE,YAAAoC,CAAa,CAAA,EAC/C7C,EAAM,GAAGO,KAAkBW,KAAgBe,IAAed,IAEhE,OAAO,MAAMrB,EAAA,EAAW,IAAIE,CAAG,QACxBxB,GACP,OAAOO,EAAgBP,CAAK,CAC9B,CACF"}